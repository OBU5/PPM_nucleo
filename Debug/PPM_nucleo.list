
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b79c  20000010  08007518  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b7ac  08007518  0002b7ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165ce  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029bc  00000000  00000000  0003660c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00038fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001358  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b92f  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f736  00000000  00000000  000670ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115596  00000000  00000000  00076825  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018bdbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005864  00000000  00000000  0018be38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080074c0 	.word	0x080074c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080074c0 	.word	0x080074c0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	4907      	ldr	r1, [pc, #28]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f001 f877 	bl	800165e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f838 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fb96 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 fb84 	bl	8000c84 <MX_DMA_Init>
  MX_ETH_Init();
 800057c:	f000 f8ca 	bl	8000714 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000580:	f000 fb22 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000584:	f000 fb50 	bl	8000c28 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000588:	f000 f904 	bl	8000794 <MX_SPI1_Init>
  MX_TIM8_Init();
 800058c:	f000 fa50 	bl	8000a30 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000590:	f000 f93a 	bl	8000808 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000594:	f000 f9f8 	bl	8000988 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000598:	2100      	movs	r1, #0
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0x64>)
 800059c:	f004 fc24 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80005a0:	2104      	movs	r1, #4
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <main+0x64>)
 80005a4:	f004 fc20 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <main+0x68>)
 80005ac:	f004 fc1c 	bl	8004de8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005b0:	2100      	movs	r1, #0
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x6c>)
 80005b4:	f004 fcce 	bl	8004f54 <HAL_TIM_IC_Start_IT>

	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1, rxCount);
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <main+0x70>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	4906      	ldr	r1, [pc, #24]	; (80005dc <main+0x74>)
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x78>)
 80005c4:	f003 fea2 	bl	800430c <HAL_SPI_Receive_DMA>
	//LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005c8:	e7fe      	b.n	80005c8 <main+0x60>
 80005ca:	bf00      	nop
 80005cc:	2002b61c 	.word	0x2002b61c
 80005d0:	20000044 	.word	0x20000044
 80005d4:	2002b6c0 	.word	0x2002b6c0
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20015d94 	.word	0x20015d94
 80005e0:	2002b65c 	.word	0x2002b65c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b8      	sub	sp, #224	; 0xe0
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 ff5c 	bl	80074b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2290      	movs	r2, #144	; 0x90
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 ff4d 	bl	80074b0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000616:	f002 fcbb 	bl	8002f90 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <SystemClock_Config+0x124>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a3a      	ldr	r2, [pc, #232]	; (8000708 <SystemClock_Config+0x124>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <SystemClock_Config+0x124>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <SystemClock_Config+0x128>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a35      	ldr	r2, [pc, #212]	; (800070c <SystemClock_Config+0x128>)
 8000638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <SystemClock_Config+0x128>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800066c:	23d8      	movs	r3, #216	; 0xd8
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000678:	2309      	movs	r3, #9
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fce4 	bl	8003050 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068e:	f000 fc4d 	bl	8000f2c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000692:	f002 fc8d 	bl	8002fb0 <HAL_PWREx_EnableOverDrive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800069c:	f000 fc46 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c6:	2107      	movs	r1, #7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 ff6f 	bl	80035ac <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006d4:	f000 fc2a 	bl	8000f2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <SystemClock_Config+0x12c>)
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 f953 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006fc:	f000 fc16 	bl	8000f2c <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	37e0      	adds	r7, #224	; 0xe0
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000
 8000710:	00200110 	.word	0x00200110

08000714 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ETH_Init+0x78>)
 800071a:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <MX_ETH_Init+0x7c>)
 800071c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ETH_Init+0x78>)
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ETH_Init+0x78>)
 8000726:	2200      	movs	r2, #0
 8000728:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ETH_Init+0x78>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ETH_Init+0x78>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	3301      	adds	r3, #1
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ETH_Init+0x78>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	3302      	adds	r3, #2
 8000742:	22e1      	movs	r2, #225	; 0xe1
 8000744:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ETH_Init+0x78>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	3303      	adds	r3, #3
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_ETH_Init+0x78>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	3304      	adds	r3, #4
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_ETH_Init+0x78>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	3305      	adds	r3, #5
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_ETH_Init+0x78>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_ETH_Init+0x78>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_ETH_Init+0x78>)
 8000772:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000776:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_ETH_Init+0x78>)
 800077a:	f001 fc77 	bl	800206c <HAL_ETH_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fbd2 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2002b760 	.word	0x2002b760
 8000790:	40028000 	.word	0x40028000

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_SPI1_Init+0x6c>)
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <MX_SPI1_Init+0x70>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007ae:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007da:	2207      	movs	r2, #7
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_SPI1_Init+0x6c>)
 80007ec:	f003 fcfc 	bl	80041e8 <HAL_SPI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80007f6:	f000 fb99 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2002b65c 	.word	0x2002b65c
 8000804:	40013000 	.word	0x40013000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	222c      	movs	r2, #44	; 0x2c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f006 fe34 	bl	80074b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <MX_TIM1_Init+0x178>)
 800084a:	4a4e      	ldr	r2, [pc, #312]	; (8000984 <MX_TIM1_Init+0x17c>)
 800084c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800084e:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <MX_TIM1_Init+0x178>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <MX_TIM1_Init+0x178>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <MX_TIM1_Init+0x178>)
 800085c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <MX_TIM1_Init+0x178>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <MX_TIM1_Init+0x178>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <MX_TIM1_Init+0x178>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000874:	4842      	ldr	r0, [pc, #264]	; (8000980 <MX_TIM1_Init+0x178>)
 8000876:	f004 fa56 	bl	8004d26 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 fb54 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800088e:	4619      	mov	r1, r3
 8000890:	483b      	ldr	r0, [pc, #236]	; (8000980 <MX_TIM1_Init+0x178>)
 8000892:	f004 fee7 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800089c:	f000 fb46 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a0:	4837      	ldr	r0, [pc, #220]	; (8000980 <MX_TIM1_Init+0x178>)
 80008a2:	f004 fa6b 	bl	8004d7c <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008ac:	f000 fb3e 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008b0:	2320      	movs	r3, #32
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008c0:	4619      	mov	r1, r3
 80008c2:	482f      	ldr	r0, [pc, #188]	; (8000980 <MX_TIM1_Init+0x178>)
 80008c4:	f005 fd9c 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008ce:	f000 fb2d 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008d2:	2370      	movs	r3, #112	; 0x70
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 80008d6:	f240 336a 	movw	r3, #874	; 0x36a
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80008dc:	2302      	movs	r3, #2
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_TIM1_Init+0x178>)
 80008fc:	f004 fd9a 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000906:	f000 fb11 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 800090e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000918:	2204      	movs	r2, #4
 800091a:	4619      	mov	r1, r3
 800091c:	4818      	ldr	r0, [pc, #96]	; (8000980 <MX_TIM1_Init+0x178>)
 800091e:	f004 fd89 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000928:	f000 fb00 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800094e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM1_Init+0x178>)
 8000962:	f005 fddb 	bl	800651c <HAL_TIMEx_ConfigBreakDeadTime>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800096c:	f000 fade 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM1_Init+0x178>)
 8000972:	f000 fce1 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3768      	adds	r7, #104	; 0x68
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2002b61c 	.word	0x2002b61c
 8000984:	40010000 	.word	0x40010000

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009d0:	f004 fa94 	bl	8004efc <HAL_TIM_IC_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009da:	f000 faa7 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_TIM2_Init+0xa4>)
 80009ee:	f005 fd07 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80009f8:	f000 fa98 	bl	8000f2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_TIM2_Init+0xa4>)
 8000a14:	f004 fc71 	bl	80052fa <HAL_TIM_IC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a1e:	f000 fa85 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2002b6c0 	.word	0x2002b6c0

08000a30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09e      	sub	sp, #120	; 0x78
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	222c      	movs	r2, #44	; 0x2c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 fd18 	bl	80074b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a80:	4b4f      	ldr	r3, [pc, #316]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000a82:	4a50      	ldr	r2, [pc, #320]	; (8000bc4 <MX_TIM8_Init+0x194>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000a94:	226b      	movs	r2, #107	; 0x6b
 8000a96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b49      	ldr	r3, [pc, #292]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000aa0:	2218      	movs	r2, #24
 8000aa2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000aaa:	4845      	ldr	r0, [pc, #276]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000aac:	f004 f93b 	bl	8004d26 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000ab6:	f000 fa39 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ac0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483e      	ldr	r0, [pc, #248]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000ac8:	f004 fdcc 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000ad2:	f000 fa2b 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ad6:	483a      	ldr	r0, [pc, #232]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000ad8:	f004 f950 	bl	8004d7c <HAL_TIM_PWM_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000ae2:	f000 fa23 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000aea:	f004 faa1 	bl	8005030 <HAL_TIM_OnePulse_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000af4:	f000 fa1a 	bl	8000f2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000af8:	2306      	movs	r3, #6
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000b00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b04:	4619      	mov	r1, r3
 8000b06:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000b08:	f004 fe66 	bl	80057d8 <HAL_TIM_SlaveConfigSynchro>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000b12:	f000 fa0b 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b26:	4619      	mov	r1, r3
 8000b28:	4825      	ldr	r0, [pc, #148]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000b2a:	f005 fc69 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000b34:	f000 f9fa 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b38:	2370      	movs	r3, #112	; 0x70
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8000b3c:	2336      	movs	r3, #54	; 0x36
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000b5e:	f004 fc69 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000b68:	f000 f9e0 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000ba2:	f005 fcbb 	bl	800651c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000bac:	f000 f9be 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_TIM8_Init+0x190>)
 8000bb2:	f000 fbc1 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8000bb6:	bf00      	nop
 8000bb8:	3778      	adds	r7, #120	; 0x78
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000044 	.word	0x20000044
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <MX_USART3_UART_Init+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART3_UART_Init+0x58>)
 8000c0c:	f005 fd22 	bl	8006654 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f989 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000084 	.word	0x20000084
 8000c24:	40004800 	.word	0x40004800

08000c28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c36:	2206      	movs	r2, #6
 8000c38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6c:	f002 f847 	bl	8002cfe <HAL_PCD_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c76:	f000 f959 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000104 	.word	0x20000104

08000c84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000c88:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c8c:	f7ff fc54 	bl	8000538 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f000 fe3c 	bl	8001912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c9a:	2038      	movs	r0, #56	; 0x38
 8000c9c:	f000 fe55 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a43      	ldr	r2, [pc, #268]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	4b3e      	ldr	r3, [pc, #248]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a3d      	ldr	r2, [pc, #244]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a37      	ldr	r2, [pc, #220]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2110      	movs	r1, #16
 8000d66:	482c      	ldr	r0, [pc, #176]	; (8000e18 <MX_GPIO_Init+0x174>)
 8000d68:	f001 ff96 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d72:	482a      	ldr	r0, [pc, #168]	; (8000e1c <MX_GPIO_Init+0x178>)
 8000d74:	f001 ff90 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_GPIO_Init+0x17c>)
 8000d7e:	f001 ff8b 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_GPIO_Init+0x180>)
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_GPIO_Init+0x184>)
 8000d98:	f001 fdd4 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4819      	ldr	r0, [pc, #100]	; (8000e18 <MX_GPIO_Init+0x174>)
 8000db4:	f001 fdc6 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000db8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_GPIO_Init+0x178>)
 8000dd2:	f001 fdb7 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_GPIO_Init+0x17c>)
 8000dee:	f001 fda9 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <MX_GPIO_Init+0x17c>)
 8000e06:	f001 fd9d 	bl	8002944 <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3730      	adds	r7, #48	; 0x30
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40021800 	.word	0x40021800
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40020800 	.word	0x40020800

08000e2c <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	// observe interval of SPI receiving
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e34:	2101      	movs	r1, #1
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <HAL_SPI_RxCpltCallback+0x44>)
 8000e38:	f001 ff47 	bl	8002cca <HAL_GPIO_TogglePin>
	// Run the measurement again
	filledBuffers++;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_SPI_RxCpltCallback+0x48>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_SPI_RxCpltCallback+0x48>)
 8000e46:	701a      	strb	r2, [r3, #0]
	if (filledBuffers == 1) {
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_SPI_RxCpltCallback+0x48>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10a      	bne.n	8000e66 <HAL_SPI_RxCpltCallback+0x3a>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2, rxCount);
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_SPI_RxCpltCallback+0x4c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	4908      	ldr	r1, [pc, #32]	; (8000e7c <HAL_SPI_RxCpltCallback+0x50>)
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_SPI_RxCpltCallback+0x54>)
 8000e5c:	f003 fa56 	bl	800430c <HAL_SPI_Receive_DMA>
		filledBuffers = 0;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_SPI_RxCpltCallback+0x48>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
	 rxCount++;
	 sprintf(msg, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	 }*/
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020400 	.word	0x40020400
 8000e74:	2000002c 	.word	0x2000002c
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000508 	.word	0x20000508
 8000e80:	2002b65c 	.word	0x2002b65c

08000e84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_TIM_IC_CaptureCallback>:
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea8:	d130      	bne.n	8000f0c <HAL_TIM_IC_CaptureCallback+0x74>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4819      	ldr	r0, [pc, #100]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000eae:	f001 ff0c 	bl	8002cca <HAL_GPIO_TogglePin>
		if (Is_First_Captured == 0) {
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x38>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f004 fccd 	bl	800585c <HAL_TIM_ReadCapturedValue>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000ec6:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
			frequency =  HAL_RCC_GetHCLKFreq() / difference;
			Is_First_Captured = 0;
		}
	}
}
 8000ece:	e01d      	b.n	8000f0c <HAL_TIM_IC_CaptureCallback+0x74>
		else if (Is_First_Captured) {
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d019      	beq.n	8000f0c <HAL_TIM_IC_CaptureCallback+0x74>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f004 fcbe 	bl	800585c <HAL_TIM_ReadCapturedValue>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ee4:	601a      	str	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ef2:	6013      	str	r3, [r2, #0]
			frequency =  HAL_RCC_GetHCLKFreq() / difference;
 8000ef4:	f002 fd1e 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f04:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020400 	.word	0x40020400
 8000f18:	20000040 	.word	0x20000040
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	20000034 	.word	0x20000034
 8000f24:	20000038 	.word	0x20000038
 8000f28:	2000003c 	.word	0x2000003c

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x44>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_ETH_MspInit+0x158>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	f040 8096 	bne.w	80010d4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a40      	ldr	r2, [pc, #256]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_ETH_MspInit+0x15c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001050:	2332      	movs	r3, #50	; 0x32
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	481e      	ldr	r0, [pc, #120]	; (80010e4 <HAL_ETH_MspInit+0x160>)
 800106c:	f001 fc6a 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001070:	2386      	movs	r3, #134	; 0x86
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001080:	230b      	movs	r3, #11
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_ETH_MspInit+0x164>)
 800108c:	f001 fc5a 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a2:	230b      	movs	r3, #11
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <HAL_ETH_MspInit+0x168>)
 80010ae:	f001 fc49 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c4:	230b      	movs	r3, #11
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <HAL_ETH_MspInit+0x16c>)
 80010d0:	f001 fc38 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3738      	adds	r7, #56	; 0x38
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40028000 	.word	0x40028000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40021800 	.word	0x40021800

080010f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_SPI_MspInit+0x114>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d174      	bne.n	8001200 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_SPI_MspInit+0x118>)
 800111c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a36      	ldr	r2, [pc, #216]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_SPI_MspInit+0x118>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a30      	ldr	r2, [pc, #192]	; (800120c <HAL_SPI_MspInit+0x118>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_SPI_MspInit+0x118>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800115e:	f248 0320 	movw	r3, #32800	; 0x8020
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001170:	2305      	movs	r3, #5
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <HAL_SPI_MspInit+0x11c>)
 800117c:	f001 fbe2 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <HAL_SPI_MspInit+0x120>)
 800119c:	f001 fbd2 	bl	8002944 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_SPI_MspInit+0x128>)
 80011a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011a8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011e6:	f000 fbcb 	bl	8001980 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 80011f0:	f7ff fe9c 	bl	8000f2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_SPI_MspInit+0x124>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013000 	.word	0x40013000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020c00 	.word	0x40020c00
 8001218:	2002b700 	.word	0x2002b700
 800121c:	40026410 	.word	0x40026410

08001220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_TIM_Base_MspInit+0x78>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d114      	bne.n	800125c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201b      	movs	r0, #27
 8001250:	f000 fb5f 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001254:	201b      	movs	r0, #27
 8001256:	f000 fb78 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800125a:	e018      	b.n	800128e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_TIM_Base_MspInit+0x80>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d113      	bne.n	800128e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_Base_MspInit+0x7c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	202e      	movs	r0, #46	; 0x2e
 8001284:	f000 fb45 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001288:	202e      	movs	r0, #46	; 0x2e
 800128a:	f000 fb5e 	bl	800194a <HAL_NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40010000 	.word	0x40010000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c4:	d12f      	bne.n	8001326 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a13      	ldr	r2, [pc, #76]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_TIM_IC_MspInit+0x8c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001306:	2301      	movs	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <HAL_TIM_IC_MspInit+0x90>)
 8001312:	f001 fb17 	bl	8002944 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201c      	movs	r0, #28
 800131c:	f000 faf9 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f000 fb12 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_TIM_MspPostInit+0xa8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d11d      	bne.n	8001396 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001372:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <HAL_TIM_MspPostInit+0xb0>)
 8001390:	f001 fad8 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001394:	e020      	b.n	80013d8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_TIM_MspPostInit+0xb4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d11b      	bne.n	80013d8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_MspPostInit+0xac>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80013c8:	2303      	movs	r3, #3
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <HAL_TIM_MspPostInit+0xb8>)
 80013d4:	f001 fab6 	bl	8002944 <HAL_GPIO_Init>
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010400 	.word	0x40010400
 80013f0:	40020800 	.word	0x40020800

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_UART_MspInit+0x7c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d128      	bne.n	8001468 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x80>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <HAL_UART_MspInit+0x80>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_UART_MspInit+0x80>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0x80>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_UART_MspInit+0x80>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_UART_MspInit+0x80>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001458:	2307      	movs	r3, #7
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0x84>)
 8001464:	f001 fa6e 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40004800 	.word	0x40004800
 8001474:	40023800 	.word	0x40023800
 8001478:	40020c00 	.word	0x40020c00

0800147c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149c:	d141      	bne.n	8001522 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014c8:	230a      	movs	r3, #10
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <HAL_PCD_MspInit+0xb4>)
 80014d4:	f001 fa36 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_PCD_MspInit+0xb4>)
 80014ee:	f001 fa29 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f6:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_PCD_MspInit+0xb0>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6353      	str	r3, [r2, #52]	; 0x34
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_PCD_MspInit+0xb0>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_PCD_MspInit+0xb0>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_PCD_MspInit+0xb0>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_PCD_MspInit+0xb0>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f8a6 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM1_CC_IRQHandler+0x10>)
 8001596:	f003 fd91 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2002b61c 	.word	0x2002b61c

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f003 fd87 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2002b6c0 	.word	0x2002b6c0

080015b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM8_CC_IRQHandler+0x10>)
 80015be:	f003 fd7d 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000044 	.word	0x20000044

080015cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <DMA2_Stream0_IRQHandler+0x10>)
 80015d2:	f000 fae3 	bl	8001b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2002b700 	.word	0x2002b700

080015e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SystemInit+0x28>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <SystemInit+0x28>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SystemInit+0x28>)
 80015f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fa:	609a      	str	r2, [r3, #8]
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001612:	e003      	b.n	800161c <LoopCopyDataInit>

08001614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161a:	3104      	adds	r1, #4

0800161c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001624:	d3f6      	bcc.n	8001614 <CopyDataInit>
  ldr  r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001628:	e002      	b.n	8001630 <LoopFillZerobss>

0800162a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800162c:	f842 3b04 	str.w	r3, [r2], #4

08001630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001634:	d3f9      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001636:	f7ff ffd3 	bl	80015e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f005 ff15 	bl	8007468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7fe ff93 	bl	8000568 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001648:	08007508 	.word	0x08007508
  ldr  r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001650:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001654:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001658:	2002b7ac 	.word	0x2002b7ac

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>

0800165e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 f94a 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f805 	bl	8001678 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800166e:	f7ff fc65 	bl	8000f3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f965 	bl	8001966 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f92d 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000004 	.word	0x20000004
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	20000008 	.word	0x20000008

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	2002b7a8 	.word	0x2002b7a8

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2002b7a8 	.word	0x2002b7a8

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_Delay+0x40>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000000c 	.word	0x2000000c

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <__NVIC_SetPriorityGrouping+0x40>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	4313      	orrs	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x40>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	05fa0000 	.word	0x05fa0000

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff feb8 	bl	8001700 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e099      	b.n	8001ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019bc:	e00f      	b.n	80019de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019be:	f7ff fe9f 	bl	8001700 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d908      	bls.n	80019de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2203      	movs	r2, #3
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e078      	b.n	8001ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e8      	bne.n	80019be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_DMA_Init+0x158>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d107      	bne.n	8001a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	4313      	orrs	r3, r2
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d117      	bne.n	8001aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fa77 	bl	8001f78 <DMA_CheckFifoParam>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e016      	b.n	8001ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fa2e 	bl	8001f0c <DMA_CalcBaseAndBitshift>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	223f      	movs	r2, #63	; 0x3f
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	e010803f 	.word	0xe010803f

08001adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_DMA_Start_IT+0x26>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e048      	b.n	8001b94 <HAL_DMA_Start_IT+0xb8>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d137      	bne.n	8001b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f9c0 	bl	8001eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0216 	orr.w	r2, r2, #22
 8001b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e005      	b.n	8001b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <HAL_DMA_IRQHandler+0x258>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a92      	ldr	r2, [pc, #584]	; (8001df8 <HAL_DMA_IRQHandler+0x25c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2204      	movs	r2, #4
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2210      	movs	r2, #16
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d043      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03c      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2210      	movs	r2, #16
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d024      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e01f      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0208 	bic.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2220      	movs	r2, #32
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 808e 	beq.w	8001e3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8086 	beq.w	8001e3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2220      	movs	r2, #32
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d136      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x1da>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d07d      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
        }
        return;
 8001db2:	e078      	b.n	8001ea6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01c      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d030      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e02b      	b.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d027      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e022      	b.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
 8001df4:	20000004 	.word	0x20000004
 8001df8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d032      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d022      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2205      	movs	r2, #5
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d307      	bcc.n	8001e82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f2      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x2ca>
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ea6:	bf00      	nop
    }
  }
}
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d108      	bne.n	8001ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eee:	e007      	b.n	8001f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b10      	subs	r3, #16
 8001f1c:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <DMA_CalcBaseAndBitshift+0x60>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <DMA_CalcBaseAndBitshift+0x64>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d908      	bls.n	8001f4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	1d1a      	adds	r2, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4a:	e006      	b.n	8001f5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	aaaaaaab 	.word	0xaaaaaaab
 8001f70:	080074f0 	.word	0x080074f0
 8001f74:	fffffc00 	.word	0xfffffc00

08001f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d855      	bhi.n	8002044 <DMA_CheckFifoParam+0xcc>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <DMA_CheckFifoParam+0x28>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fb1 	.word	0x08001fb1
 8001fac:	08002045 	.word	0x08002045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d045      	beq.n	8002048 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e042      	b.n	8002048 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fca:	d13f      	bne.n	800204c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e03c      	b.n	800204c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d121      	bne.n	8002020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d836      	bhi.n	8002050 <DMA_CheckFifoParam+0xd8>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x70>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08001fff 	.word	0x08001fff
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	08002011 	.word	0x08002011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e02f      	b.n	800205e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200e:	e021      	b.n	8002054 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002018:	d11e      	bne.n	8002058 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800201e:	e01b      	b.n	8002058 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <DMA_CheckFifoParam+0xb4>
 8002026:	2b03      	cmp	r3, #3
 8002028:	d003      	beq.n	8002032 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800202a:	e018      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      break;
 8002030:	e015      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00e      	beq.n	800205c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      break;
 8002042:	e00b      	b.n	800205c <DMA_CheckFifoParam+0xe4>
      break;
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;   
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 800205c:	bf00      	nop
    }
  } 
  
  return status; 
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800207c:	4ba9      	ldr	r3, [pc, #676]	; (8002324 <HAL_ETH_Init+0x2b8>)
 800207e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e183      	b.n	800239a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe ff6c 	bl	8000f84 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ac:	4b9e      	ldr	r3, [pc, #632]	; (8002328 <HAL_ETH_Init+0x2bc>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	4a9d      	ldr	r2, [pc, #628]	; (8002328 <HAL_ETH_Init+0x2bc>)
 80020b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b6:	6453      	str	r3, [r2, #68]	; 0x44
 80020b8:	4b9b      	ldr	r3, [pc, #620]	; (8002328 <HAL_ETH_Init+0x2bc>)
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020c4:	4b99      	ldr	r3, [pc, #612]	; (800232c <HAL_ETH_Init+0x2c0>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a98      	ldr	r2, [pc, #608]	; (800232c <HAL_ETH_Init+0x2c0>)
 80020ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020ce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020d0:	4b96      	ldr	r3, [pc, #600]	; (800232c <HAL_ETH_Init+0x2c0>)
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4994      	ldr	r1, [pc, #592]	; (800232c <HAL_ETH_Init+0x2c0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020f6:	f7ff fb03 	bl	8001700 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80020fc:	e011      	b.n	8002122 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80020fe:	f7ff faff 	bl	8001700 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800210c:	d909      	bls.n	8002122 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e13b      	b.n	800239a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e4      	bne.n	80020fe <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f023 031c 	bic.w	r3, r3, #28
 8002142:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002144:	f001 fbf6 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8002148:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4a78      	ldr	r2, [pc, #480]	; (8002330 <HAL_ETH_Init+0x2c4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d908      	bls.n	8002164 <HAL_ETH_Init+0xf8>
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_ETH_Init+0x2c8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d804      	bhi.n	8002164 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e027      	b.n	80021b4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	4a73      	ldr	r2, [pc, #460]	; (8002334 <HAL_ETH_Init+0x2c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d908      	bls.n	800217e <HAL_ETH_Init+0x112>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4a72      	ldr	r2, [pc, #456]	; (8002338 <HAL_ETH_Init+0x2cc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d804      	bhi.n	800217e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f043 030c 	orr.w	r3, r3, #12
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	e01a      	b.n	80021b4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4a6d      	ldr	r2, [pc, #436]	; (8002338 <HAL_ETH_Init+0x2cc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d903      	bls.n	800218e <HAL_ETH_Init+0x122>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4a6c      	ldr	r2, [pc, #432]	; (800233c <HAL_ETH_Init+0x2d0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d911      	bls.n	80021b2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_ETH_Init+0x2d0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d908      	bls.n	80021a8 <HAL_ETH_Init+0x13c>
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4a69      	ldr	r2, [pc, #420]	; (8002340 <HAL_ETH_Init+0x2d4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d804      	bhi.n	80021a8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e005      	b.n	80021b4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f043 0310 	orr.w	r3, r3, #16
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	e000      	b.n	80021b4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021b2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80021bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f956 	bl	8002474 <HAL_ETH_WritePHYRegister>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80021d2:	6939      	ldr	r1, [r7, #16]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f9b3 	bl	8002540 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0d9      	b.n	800239a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80021e6:	20ff      	movs	r0, #255	; 0xff
 80021e8:	f7ff fa96 	bl	8001718 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a7 	beq.w	8002344 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80021f6:	f7ff fa83 	bl	8001700 <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8cd 	bl	80023a4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800220a:	f7ff fa79 	bl	8001700 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d90f      	bls.n	800223c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f98c 	bl	8002540 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0ae      	b.n	800239a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0da      	beq.n	80021fc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f911 	bl	8002474 <HAL_ETH_WritePHYRegister>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f96e 	bl	8002540 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800226c:	2301      	movs	r3, #1
 800226e:	e094      	b.n	800239a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002270:	f7ff fa46 	bl	8001700 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	461a      	mov	r2, r3
 800227c:	2101      	movs	r1, #1
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f890 	bl	80023a4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002284:	f7ff fa3c 	bl	8001700 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d90f      	bls.n	80022b6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f94f 	bl	8002540 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e071      	b.n	800239a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0da      	beq.n	8002276 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	461a      	mov	r2, r3
 80022c6:	211f      	movs	r1, #31
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f86b 	bl	80023a4 <HAL_ETH_ReadPHYRegister>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80022d8:	6939      	ldr	r1, [r7, #16]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f930 	bl	8002540 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80022e8:	2301      	movs	r3, #1
 80022ea:	e056      	b.n	800239a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	e002      	b.n	8002306 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e037      	b.n	8002388 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e032      	b.n	8002388 <HAL_ETH_Init+0x31c>
 8002322:	bf00      	nop
 8002324:	03938700 	.word	0x03938700
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	01312cff 	.word	0x01312cff
 8002334:	02160ebf 	.word	0x02160ebf
 8002338:	039386ff 	.word	0x039386ff
 800233c:	05f5e0ff 	.word	0x05f5e0ff
 8002340:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002354:	4313      	orrs	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f889 	bl	8002474 <HAL_ETH_WritePHYRegister>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8e6 	bl	8002540 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e00c      	b.n	800239a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002380:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002384:	f7ff f9c8 	bl	8001718 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002388:	6939      	ldr	r1, [r7, #16]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8d8 	bl	8002540 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop

080023a4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	460b      	mov	r3, r1
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b82      	cmp	r3, #130	; 0x82
 80023c4:	d101      	bne.n	80023ca <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
 80023c8:	e050      	b.n	800246c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2282      	movs	r2, #130	; 0x82
 80023ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 031c 	and.w	r3, r3, #28
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8a1b      	ldrh	r3, [r3, #16]
 80023e6:	02db      	lsls	r3, r3, #11
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	019b      	lsls	r3, r3, #6
 80023f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002416:	f7ff f973 	bl	8001700 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800241c:	e015      	b.n	800244a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800241e:	f7ff f96f 	bl	8001700 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d309      	bcc.n	8002442 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e014      	b.n	800246c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e4      	bne.n	800241e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	460b      	mov	r3, r1
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b42      	cmp	r3, #66	; 0x42
 8002494:	d101      	bne.n	800249a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	e04e      	b.n	8002538 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2242      	movs	r2, #66	; 0x42
 800249e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 031c 	and.w	r3, r3, #28
 80024b0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8a1b      	ldrh	r3, [r3, #16]
 80024b6:	02db      	lsls	r3, r3, #11
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	019b      	lsls	r3, r3, #6
 80024c4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024f0:	f7ff f906 	bl	8001700 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024f6:	e015      	b.n	8002524 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80024f8:	f7ff f902 	bl	8001700 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d309      	bcc.n	800251c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e00d      	b.n	8002538 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e4      	bne.n	80024f8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0b0      	sub	sp, #192	; 0xc0
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800255c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002564:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800256e:	2300      	movs	r3, #0
 8002570:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258a:	663b      	str	r3, [r7, #96]	; 0x60
 800258c:	e001      	b.n	8002592 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002596:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800259c:	2300      	movs	r3, #0
 800259e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002614:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002618:	4bab      	ldr	r3, [pc, #684]	; (80028c8 <ETH_MACDMAConfig+0x388>)
 800261a:	4013      	ands	r3, r2
 800261c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002620:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002624:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002628:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800262a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800262c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002632:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002636:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800263a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002640:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002644:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002648:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800264a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800264c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800264e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002650:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002654:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002656:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002668:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002674:	2001      	movs	r0, #1
 8002676:	f7ff f84f 	bl	8001718 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002682:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002684:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002688:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800268a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800268c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800268e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002692:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002698:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800269a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800269e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80026a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80026a4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80026a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80026b0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026b2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026be:	2001      	movs	r0, #1
 80026c0:	f7ff f82a 	bl	8001718 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026cc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026d6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80026e0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80026ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026f0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026f4:	4013      	ands	r3, r2
 80026f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80026fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002704:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800270a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800270c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002710:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002716:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800271c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800271e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002730:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800273c:	2001      	movs	r0, #1
 800273e:	f7fe ffeb 	bl	8001718 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800274a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800274c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002750:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002766:	2001      	movs	r0, #1
 8002768:	f7fe ffd6 	bl	8001718 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002774:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800277a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002788:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800279a:	2304      	movs	r3, #4
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800279e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80027a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027be:	2300      	movs	r3, #0
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80027ca:	4413      	add	r3, r2
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80027d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <ETH_MACDMAConfig+0x38c>)
 80027d8:	4013      	ands	r3, r2
 80027da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027de:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80027e0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027e2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80027e4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80027e6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80027e8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80027ea:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80027ec:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80027ee:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80027f0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80027f2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80027f4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80027f6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80027fa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80027fe:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002812:	4413      	add	r3, r2
 8002814:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002818:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002822:	4413      	add	r3, r2
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe ff74 	bl	8001718 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f241 0318 	movw	r3, #4120	; 0x1018
 8002838:	4413      	add	r3, r2
 800283a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800283e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002844:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002848:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800284c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002850:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002854:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002856:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800285a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002868:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002878:	2001      	movs	r0, #1
 800287a:	f7fe ff4d 	bl	8001718 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800288a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10d      	bne.n	80028b0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	f241 031c 	movw	r3, #4124	; 0x101c
 800289c:	4413      	add	r3, r2
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <ETH_MACDMAConfig+0x390>)
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80028ac:	440b      	add	r3, r1
 80028ae:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	461a      	mov	r2, r3
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f80b 	bl	80028d4 <ETH_MACAddressConfig>
}
 80028be:	bf00      	nop
 80028c0:	37c0      	adds	r7, #192	; 0xc0
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	ff20810f 	.word	0xff20810f
 80028cc:	f8de3f23 	.word	0xf8de3f23
 80028d0:	00010040 	.word	0x00010040

080028d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3305      	adds	r3, #5
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	3204      	adds	r2, #4
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <ETH_MACAddressConfig+0x68>)
 80028f6:	4413      	add	r3, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3303      	adds	r3, #3
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	061a      	lsls	r2, r3, #24
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3302      	adds	r3, #2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	4313      	orrs	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <ETH_MACAddressConfig+0x6c>)
 8002926:	4413      	add	r3, r2
 8002928:	461a      	mov	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6013      	str	r3, [r2, #0]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40028040 	.word	0x40028040
 8002940:	40028044 	.word	0x40028044

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e175      	b.n	8002c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8164 	bne.w	8002c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d00b      	beq.n	80029a2 <HAL_GPIO_Init+0x5e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002996:	2b11      	cmp	r3, #17
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b12      	cmp	r3, #18
 80029a0:	d130      	bne.n	8002a04 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d8:	2201      	movs	r2, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0201 	and.w	r2, r3, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x100>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b12      	cmp	r3, #18
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80be 	beq.w	8002c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_GPIO_Init+0x320>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_GPIO_Init+0x320>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_GPIO_Init+0x320>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ae6:	4a60      	ldr	r2, [pc, #384]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d037      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a56      	ldr	r2, [pc, #344]	; (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a53      	ldr	r2, [pc, #332]	; (8002c7c <HAL_GPIO_Init+0x338>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a51      	ldr	r2, [pc, #324]	; (8002c84 <HAL_GPIO_Init+0x340>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_GPIO_Init+0x344>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <HAL_GPIO_Init+0x348>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e012      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e010      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b94:	4934      	ldr	r1, [pc, #208]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba2:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc6:	4a33      	ldr	r2, [pc, #204]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bcc:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf0:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae86 	bls.w	8002964 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3724      	adds	r7, #36	; 0x24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022400 	.word	0x40022400
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca8:	787b      	ldrb	r3, [r7, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cb4:	e003      	b.n	8002cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	041a      	lsls	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cec:	887a      	ldrh	r2, [r7, #2]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d00:	b08f      	sub	sp, #60	; 0x3c
 8002d02:	af0a      	add	r7, sp, #40	; 0x28
 8002d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e116      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fba6 	bl	800147c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f932 	bl	8006fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	687e      	ldr	r6, [r7, #4]
 8002d5c:	466d      	mov	r5, sp
 8002d5e:	f106 0410 	add.w	r4, r6, #16
 8002d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d72:	1d33      	adds	r3, r6, #4
 8002d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f004 f8c6 	bl	8006f08 <USB_CoreInit>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0d7      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f920 	bl	8006fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e04a      	b.n	8002e36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	333d      	adds	r3, #61	; 0x3d
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	333c      	adds	r3, #60	; 0x3c
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	b298      	uxth	r0, r3
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3342      	adds	r3, #66	; 0x42
 8002ddc:	4602      	mov	r2, r0
 8002dde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3344      	adds	r3, #68	; 0x44
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3348      	adds	r3, #72	; 0x48
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3350      	adds	r3, #80	; 0x50
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3301      	adds	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3af      	bcc.n	8002da0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e044      	b.n	8002ed0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3b5      	bcc.n	8002e46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	687e      	ldr	r6, [r7, #4]
 8002ee2:	466d      	mov	r5, sp
 8002ee4:	f106 0410 	add.w	r4, r6, #16
 8002ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ef8:	1d33      	adds	r3, r6, #4
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f004 f897 	bl	8007030 <USB_DevInit>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e014      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f80b 	bl	8002f48 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fa49 	bl	80073ce <USB_DevDisconnect>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	10000003 	.word	0x10000003

08002f90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40007000 	.word	0x40007000

08002fb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fde:	f7fe fb8f 	bl	8001700 <HAL_GetTick>
 8002fe2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe4:	e009      	b.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe6:	f7fe fb8b 	bl	8001700 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff4:	d901      	bls.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e022      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d1ee      	bne.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7fe fb74 	bl	8001700 <HAL_GetTick>
 8003018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301a:	e009      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301c:	f7fe fb70 	bl	8001700 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	d901      	bls.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e007      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303c:	d1ee      	bne.n	800301c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e29b      	b.n	800359e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	4b96      	ldr	r3, [pc, #600]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00c      	beq.n	800309a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003080:	4b93      	ldr	r3, [pc, #588]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
 800308c:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06c      	beq.n	8003180 <HAL_RCC_OscConfig+0x130>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e275      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x7a>
 80030bc:	4b84      	ldr	r3, [pc, #528]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a83      	ldr	r2, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x9c>
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xc0>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe fae6 	bl	8001700 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fae2 	bl	8001700 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e229      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fad2 	bl	8001700 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe face 	bl	8001700 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e215      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x110>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d069      	beq.n	8003262 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1e9      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	493d      	ldr	r1, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e040      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe fa84 	bl	8001700 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fc:	f7fe fa80 	bl	8001700 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1c7      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4929      	ldr	r1, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
 800322e:	e018      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fa60 	bl	8001700 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe fa5c 	bl	8001700 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1a3      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d038      	beq.n	80032e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fa3d 	bl	8001700 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fa39 	bl	8001700 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e180      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x23a>
 80032a8:	e01a      	b.n	80032e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe fa23 	bl	8001700 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe fa1f 	bl	8001700 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d903      	bls.n	80032d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e166      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
 80032d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a4 	beq.w	8003436 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a88      	ldr	r2, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b86      	ldr	r3, [pc, #536]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	4b83      	ldr	r3, [pc, #524]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003322:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7f      	ldr	r2, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fe f9e7 	bl	8001700 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe f9e3 	bl	8001700 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e12a      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x31a>
 800335c:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a6f      	ldr	r2, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x33c>
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x35e>
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a61      	ldr	r2, [pc, #388]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a58      	ldr	r2, [pc, #352]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe f997 	bl	8001700 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe f993 	bl	8001700 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x386>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe f981 	bl	8001700 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe f97d 	bl	8001700 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0c2      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a3c      	ldr	r2, [pc, #240]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80ae 	beq.w	800359c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d06d      	beq.n	8003528 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d14b      	bne.n	80034ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe f94e 	bl	8001700 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe f94a 	bl	8001700 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e091      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f91c 	bl	8001700 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f918 	bl	8001700 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e05f      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x47c>
 80034ea:	e057      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe f902 	bl	8001700 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe f8fe 	bl	8001700 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e045      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x4b0>
 800351e:	e03d      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_RCC_OscConfig+0x558>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d129      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d122      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003560:	4293      	cmp	r3, r2
 8003562:	d119      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d10f      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4965      	ldr	r1, [pc, #404]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fe f82e 	bl	8001700 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe f82a 	bl	8001700 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4922      	ldr	r1, [pc, #136]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4601      	mov	r1, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	fa21 f303 	lsr.w	r3, r1, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1d0>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd ff8a 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	080074d8 	.word	0x080074d8
 800377c:	20000004 	.word	0x20000004
 8003780:	20000008 	.word	0x20000008

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	2300      	movs	r3, #0
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379a:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d007      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x32>
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d008      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x38>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f040 80b4 	bne.w	8003918 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b5e      	ldr	r3, [pc, #376]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037b2:	60bb      	str	r3, [r7, #8]
      break;
 80037b4:	e0b3      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b6:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037b8:	60bb      	str	r3, [r7, #8]
      break;
 80037ba:	e0b0      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037bc:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04a      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d2:	4b55      	ldr	r3, [pc, #340]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	099b      	lsrs	r3, r3, #6
 80037d8:	f04f 0400 	mov.w	r4, #0
 80037dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	ea03 0501 	and.w	r5, r3, r1
 80037e8:	ea04 0602 	and.w	r6, r4, r2
 80037ec:	4629      	mov	r1, r5
 80037ee:	4632      	mov	r2, r6
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f04f 0400 	mov.w	r4, #0
 80037f8:	0154      	lsls	r4, r2, #5
 80037fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037fe:	014b      	lsls	r3, r1, #5
 8003800:	4619      	mov	r1, r3
 8003802:	4622      	mov	r2, r4
 8003804:	1b49      	subs	r1, r1, r5
 8003806:	eb62 0206 	sbc.w	r2, r2, r6
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	f04f 0400 	mov.w	r4, #0
 8003812:	0194      	lsls	r4, r2, #6
 8003814:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003818:	018b      	lsls	r3, r1, #6
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	eb64 0402 	sbc.w	r4, r4, r2
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	00e2      	lsls	r2, r4, #3
 800382a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800382e:	00d9      	lsls	r1, r3, #3
 8003830:	460b      	mov	r3, r1
 8003832:	4614      	mov	r4, r2
 8003834:	195b      	adds	r3, r3, r5
 8003836:	eb44 0406 	adc.w	r4, r4, r6
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	0262      	lsls	r2, r4, #9
 8003844:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003848:	0259      	lsls	r1, r3, #9
 800384a:	460b      	mov	r3, r1
 800384c:	4614      	mov	r4, r2
 800384e:	4618      	mov	r0, r3
 8003850:	4621      	mov	r1, r4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f04f 0400 	mov.w	r4, #0
 8003858:	461a      	mov	r2, r3
 800385a:	4623      	mov	r3, r4
 800385c:	f7fc fcec 	bl	8000238 <__aeabi_uldivmod>
 8003860:	4603      	mov	r3, r0
 8003862:	460c      	mov	r4, r1
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e049      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003868:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	ea03 0501 	and.w	r5, r3, r1
 800387e:	ea04 0602 	and.w	r6, r4, r2
 8003882:	4629      	mov	r1, r5
 8003884:	4632      	mov	r2, r6
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f04f 0400 	mov.w	r4, #0
 800388e:	0154      	lsls	r4, r2, #5
 8003890:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003894:	014b      	lsls	r3, r1, #5
 8003896:	4619      	mov	r1, r3
 8003898:	4622      	mov	r2, r4
 800389a:	1b49      	subs	r1, r1, r5
 800389c:	eb62 0206 	sbc.w	r2, r2, r6
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	0194      	lsls	r4, r2, #6
 80038aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038ae:	018b      	lsls	r3, r1, #6
 80038b0:	1a5b      	subs	r3, r3, r1
 80038b2:	eb64 0402 	sbc.w	r4, r4, r2
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038c4:	00d9      	lsls	r1, r3, #3
 80038c6:	460b      	mov	r3, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	195b      	adds	r3, r3, r5
 80038cc:	eb44 0406 	adc.w	r4, r4, r6
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	02a2      	lsls	r2, r4, #10
 80038da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038de:	0299      	lsls	r1, r3, #10
 80038e0:	460b      	mov	r3, r1
 80038e2:	4614      	mov	r4, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	4621      	mov	r1, r4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4623      	mov	r3, r4
 80038f2:	f7fc fca1 	bl	8000238 <__aeabi_uldivmod>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	60bb      	str	r3, [r7, #8]
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800391a:	60bb      	str	r3, [r7, #8]
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	68bb      	ldr	r3, [r7, #8]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200

08003934 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000004 	.word	0x20000004

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4601      	mov	r1, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	080074e8 	.word	0x080074e8

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffdc 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 800397c:	4601      	mov	r1, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	080074e8 	.word	0x080074e8

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039c4:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d8:	4964      	ldr	r1, [pc, #400]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d017      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	4959      	ldr	r1, [pc, #356]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	494a      	ldr	r1, [pc, #296]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 808b 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8c:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fe2c 	bl	8001700 <HAL_GetTick>
 8003aa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aac:	f7fd fe28 	bl	8001700 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	; 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e38d      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d035      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d02e      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d114      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fdf0 	bl	8001700 <HAL_GetTick>
 8003b20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fd fdec 	bl	8001700 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e34f      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b52:	d111      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b62:	400b      	ands	r3, r1
 8003b64:	4901      	ldr	r1, [pc, #4]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000
 8003b74:	0ffffcff 	.word	0x0ffffcff
 8003b78:	4bb3      	ldr	r3, [pc, #716]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4ab2      	ldr	r2, [pc, #712]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b82:	6093      	str	r3, [r2, #8]
 8003b84:	4bb0      	ldr	r3, [pc, #704]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	49ad      	ldr	r1, [pc, #692]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ba2:	4ba9      	ldr	r3, [pc, #676]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba8:	4aa7      	ldr	r2, [pc, #668]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bb2:	4ba5      	ldr	r3, [pc, #660]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	49a2      	ldr	r1, [pc, #648]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd0:	4b9d      	ldr	r3, [pc, #628]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bde:	499a      	ldr	r1, [pc, #616]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf2:	4b95      	ldr	r3, [pc, #596]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c00:	4991      	ldr	r1, [pc, #580]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c14:	4b8c      	ldr	r3, [pc, #560]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c22:	4989      	ldr	r1, [pc, #548]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c36:	4b84      	ldr	r3, [pc, #528]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4980      	ldr	r1, [pc, #512]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c58:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4978      	ldr	r1, [pc, #480]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7a:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f023 020c 	bic.w	r2, r3, #12
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	496f      	ldr	r1, [pc, #444]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	4967      	ldr	r1, [pc, #412]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cbe:	4b62      	ldr	r3, [pc, #392]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	495e      	ldr	r1, [pc, #376]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce0:	4b59      	ldr	r3, [pc, #356]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	4956      	ldr	r1, [pc, #344]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d02:	4b51      	ldr	r3, [pc, #324]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	494d      	ldr	r1, [pc, #308]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d24:	4b48      	ldr	r3, [pc, #288]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	4945      	ldr	r1, [pc, #276]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d46:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	493c      	ldr	r1, [pc, #240]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d68:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d76:	4934      	ldr	r1, [pc, #208]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d8a:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d98:	492b      	ldr	r1, [pc, #172]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	491b      	ldr	r1, [pc, #108]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	4912      	ldr	r1, [pc, #72]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	4909      	ldr	r1, [pc, #36]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00f      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	e002      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	4985      	ldr	r1, [pc, #532]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e60:	4b80      	ldr	r3, [pc, #512]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e70:	497c      	ldr	r1, [pc, #496]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d005      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e86:	f040 80d6 	bne.w	8004036 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e96:	f7fd fc33 	bl	8001700 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e9e:	f7fd fc2f 	bl	8001700 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	; 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e194      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d021      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11d      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ede:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	0e1b      	lsrs	r3, r3, #24
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	019a      	lsls	r2, r3, #6
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	4957      	ldr	r1, [pc, #348]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d129      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	493d      	ldr	r1, [pc, #244]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f023 021f 	bic.w	r2, r3, #31
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	3b01      	subs	r3, #1
 8003f84:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01d      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	0f1b      	lsrs	r3, r3, #28
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	019a      	lsls	r2, r3, #6
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	061b      	lsls	r3, r3, #24
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	071b      	lsls	r3, r3, #28
 8003fcc:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	019a      	lsls	r2, r3, #6
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	071b      	lsls	r3, r3, #28
 8003ffc:	4919      	ldr	r1, [pc, #100]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800400a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd fb76 	bl	8001700 <HAL_GetTick>
 8004014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004018:	f7fd fb72 	bl	8001700 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0d7      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 80cd 	bne.w	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404a:	f7fd fb59 	bl	8001700 <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004052:	f7fd fb55 	bl	8001700 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d903      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0ba      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004064:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004068:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004074:	d0ed      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d009      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02e      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800409e:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040ac:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	0f1b      	lsrs	r3, r3, #28
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	019a      	lsls	r2, r3, #6
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	4944      	ldr	r1, [pc, #272]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040da:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	493d      	ldr	r1, [pc, #244]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d022      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004108:	d11d      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800410a:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	0e1b      	lsrs	r3, r3, #24
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004118:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	0f1b      	lsrs	r3, r3, #28
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	019a      	lsls	r2, r3, #6
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	431a      	orrs	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	431a      	orrs	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	4929      	ldr	r1, [pc, #164]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	019a      	lsls	r2, r3, #6
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	431a      	orrs	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	4917      	ldr	r1, [pc, #92]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4911      	ldr	r1, [pc, #68]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fd faa6 	bl	8001700 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b8:	f7fd faa2 	bl	8001700 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e007      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d6:	d1ef      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800

080041e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e084      	b.n	8004304 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fc ff6d 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004230:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800423a:	d902      	bls.n	8004242 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e002      	b.n	8004248 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004250:	d007      	beq.n	8004262 <HAL_SPI_Init+0x7a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004272:	d903      	bls.n	800427c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
 800427a:	e002      	b.n	8004282 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0204 	and.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	ea42 0103 	orr.w	r1, r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d110      	bne.n	8004348 <HAL_SPI_Receive_DMA+0x3c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d10b      	bne.n	8004348 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2204      	movs	r2, #4
 8004334:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f900 	bl	8004544 <HAL_SPI_TransmitReceive_DMA>
 8004344:	4603      	mov	r3, r0
 8004346:	e0f3      	b.n	8004530 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_SPI_Receive_DMA+0x4a>
 8004352:	2302      	movs	r3, #2
 8004354:	e0ec      	b.n	8004530 <HAL_SPI_Receive_DMA+0x224>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d002      	beq.n	8004370 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800436a:	2302      	movs	r3, #2
 800436c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800436e:	e0da      	b.n	8004526 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_Receive_DMA+0x70>
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004380:	e0d1      	b.n	8004526 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2204      	movs	r2, #4
 8004386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d107      	bne.n	80043d8 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043f0:	d908      	bls.n	8004404 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e042      	b.n	800448a <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004412:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	d134      	bne.n	800448a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800442e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004436:	b29b      	uxth	r3, r3
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d111      	bne.n	8004464 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004456:	b29b      	uxth	r3, r3
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004462:	e012      	b.n	800448a <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004472:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800447a:	b29b      	uxth	r3, r3
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <HAL_SPI_Receive_DMA+0x22c>)
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_SPI_Receive_DMA+0x230>)
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	4a28      	ldr	r2, [pc, #160]	; (8004540 <HAL_SPI_Receive_DMA+0x234>)
 80044a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	2200      	movs	r2, #0
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	4619      	mov	r1, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f7fd fb0a 	bl	8001adc <HAL_DMA_Start_IT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d2:	f043 0210 	orr.w	r2, r3, #16
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80044e6:	e01e      	b.n	8004526 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d007      	beq.n	8004506 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004504:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0220 	orr.w	r2, r2, #32
 8004514:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800452e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	080049c5 	.word	0x080049c5
 800453c:	080048ad 	.word	0x080048ad
 8004540:	080049fd 	.word	0x080049fd

08004544 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004560:	2302      	movs	r3, #2
 8004562:	e16c      	b.n	800483e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004572:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800457a:	7dbb      	ldrb	r3, [r7, #22]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d00d      	beq.n	800459c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004586:	d106      	bne.n	8004596 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004590:	7dbb      	ldrb	r3, [r7, #22]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d002      	beq.n	800459c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800459a:	e14b      	b.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045b2:	e13f      	b.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d003      	beq.n	80045c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2205      	movs	r2, #5
 80045c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	887a      	ldrh	r2, [r7, #2]
 80045ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	887a      	ldrh	r2, [r7, #2]
 80045f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004610:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800461a:	d908      	bls.n	800462e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	e06f      	b.n	800470e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800463c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004648:	d126      	bne.n	8004698 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004664:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004674:	e010      	b.n	8004698 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004684:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	3301      	adds	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a2:	d134      	bne.n	800470e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d111      	bne.n	80046e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046da:	b29b      	uxth	r3, r3
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046e6:	e012      	b.n	800470e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fe:	b29b      	uxth	r3, r3
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	b29b      	uxth	r3, r3
 8004704:	3301      	adds	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b04      	cmp	r3, #4
 8004718:	d108      	bne.n	800472c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c
 800472a:	e007      	b.n	800473c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4a47      	ldr	r2, [pc, #284]	; (8004850 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	4a46      	ldr	r2, [pc, #280]	; (8004854 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800473a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	4a45      	ldr	r2, [pc, #276]	; (8004858 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8004742:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	2200      	movs	r2, #0
 800474a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	4619      	mov	r1, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	461a      	mov	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	f7fd f9b9 	bl	8001adc <HAL_DMA_Start_IT>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004774:	f043 0210 	orr.w	r2, r3, #16
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004788:	e054      	b.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	2200      	movs	r2, #0
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	2200      	movs	r2, #0
 80047b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2200      	movs	r2, #0
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	4619      	mov	r1, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f7fd f983 	bl	8001adc <HAL_DMA_Start_IT>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e0:	f043 0210 	orr.w	r2, r3, #16
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80047f4:	e01e      	b.n	8004834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d007      	beq.n	8004814 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0220 	orr.w	r2, r2, #32
 8004822:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0202 	orr.w	r2, r2, #2
 8004832:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	080049c5 	.word	0x080049c5
 800484c:	080048ad 	.word	0x080048ad
 8004850:	080049e1 	.word	0x080049e1
 8004854:	08004933 	.word	0x08004933
 8004858:	080049fd 	.word	0x080049fd

0800485c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ba:	f7fc ff21 	bl	8001700 <HAL_GetTick>
 80048be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d02a      	beq.n	8004926 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0220 	bic.w	r2, r2, #32
 80048de:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0203 	bic.w	r2, r2, #3
 80048ee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f978 	bl	8004bea <SPI_EndRxTransaction>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff ffba 	bl	8004898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004924:	e002      	b.n	800492c <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7fc fa80 	bl	8000e2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004940:	f7fc fede 	bl	8001700 <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004954:	d030      	beq.n	80049b8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0220 	bic.w	r2, r2, #32
 8004964:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	2164      	movs	r1, #100	; 0x64
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f995 	bl	8004c9a <SPI_EndRxTxTransaction>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0203 	bic.w	r2, r2, #3
 8004990:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff ff71 	bl	8004898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049b6:	e002      	b.n	80049be <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff ff4f 	bl	800485c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff4c 	bl	8004870 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff ff48 	bl	8004884 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0203 	bic.w	r2, r2, #3
 8004a18:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f043 0210 	orr.w	r2, r3, #16
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff ff32 	bl	8004898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a4c:	e04c      	b.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d048      	beq.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a56:	f7fc fe53 	bl	8001700 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d902      	bls.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d13d      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a84:	d111      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d004      	beq.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d107      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab2:	d10f      	bne.n	8004ad4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e00f      	b.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d1a3      	bne.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b1e:	e057      	b.n	8004bd0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b26:	d106      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d048      	beq.n	8004bd0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b3e:	f7fc fddf 	bl	8001700 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d902      	bls.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d13d      	bne.n	8004bd0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6c:	d111      	bne.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b76:	d004      	beq.n	8004b82 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d107      	bne.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9a:	d10f      	bne.n	8004bbc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e008      	b.n	8004be2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d19f      	bne.n	8004b20 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfe:	d111      	bne.n	8004c24 <SPI_EndRxTransaction+0x3a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c08:	d004      	beq.n	8004c14 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d107      	bne.n	8004c24 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff ff04 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e023      	b.n	8004c92 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c52:	d11d      	bne.n	8004c90 <SPI_EndRxTransaction+0xa6>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5c:	d004      	beq.n	8004c68 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d113      	bne.n	8004c90 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff4b 	bl	8004b10 <SPI_WaitFifoStateUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af02      	add	r7, sp, #8
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff ff2c 	bl	8004b10 <SPI_WaitFifoStateUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e027      	b.n	8004d1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2180      	movs	r1, #128	; 0x80
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f7ff feaf 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e014      	b.n	8004d1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff ff05 	bl	8004b10 <SPI_WaitFifoStateUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	f043 0220 	orr.w	r2, r3, #32
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e000      	b.n	8004d1e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e01d      	b.n	8004d74 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc fa67 	bl	8001220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f000 fddb 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01d      	b.n	8004dca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f815 	bl	8004dd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fdb0 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d841      	bhi.n	8004e7c <HAL_TIM_PWM_Start_IT+0x94>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_TIM_PWM_Start_IT+0x18>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e7d 	.word	0x08004e7d
 8004e08:	08004e7d 	.word	0x08004e7d
 8004e0c:	08004e7d 	.word	0x08004e7d
 8004e10:	08004e47 	.word	0x08004e47
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004e7d 	.word	0x08004e7d
 8004e1c:	08004e7d 	.word	0x08004e7d
 8004e20:	08004e59 	.word	0x08004e59
 8004e24:	08004e7d 	.word	0x08004e7d
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004e6b 	.word	0x08004e6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0202 	orr.w	r2, r2, #2
 8004e42:	60da      	str	r2, [r3, #12]
      break;
 8004e44:	e01b      	b.n	8004e7e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0204 	orr.w	r2, r2, #4
 8004e54:	60da      	str	r2, [r3, #12]
      break;
 8004e56:	e012      	b.n	8004e7e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0208 	orr.w	r2, r2, #8
 8004e66:	60da      	str	r2, [r3, #12]
      break;
 8004e68:	e009      	b.n	8004e7e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0210 	orr.w	r2, r2, #16
 8004e78:	60da      	str	r2, [r3, #12]
      break;
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004e7c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fa94 	bl	80063b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <HAL_TIM_PWM_Start_IT+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIM_PWM_Start_IT+0xb8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <HAL_TIM_PWM_Start_IT+0x10c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_PWM_Start_IT+0xbc>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_PWM_Start_IT+0xbe>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_TIM_PWM_Start_IT+0x110>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b06      	cmp	r3, #6
 8004eca:	d00b      	beq.n	8004ee4 <HAL_TIM_PWM_Start_IT+0xfc>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e01d      	b.n	8004f4a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f9be 	bl	80012a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fcf0 	bl	8005920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d841      	bhi.n	8004fe8 <HAL_TIM_IC_Start_IT+0x94>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_TIM_IC_Start_IT+0x18>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fe9 	.word	0x08004fe9
 8004f74:	08004fe9 	.word	0x08004fe9
 8004f78:	08004fe9 	.word	0x08004fe9
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fe9 	.word	0x08004fe9
 8004f84:	08004fe9 	.word	0x08004fe9
 8004f88:	08004fe9 	.word	0x08004fe9
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	08004fd7 	.word	0x08004fd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0202 	orr.w	r2, r2, #2
 8004fae:	60da      	str	r2, [r3, #12]
      break;
 8004fb0:	e01b      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0204 	orr.w	r2, r2, #4
 8004fc0:	60da      	str	r2, [r3, #12]
      break;
 8004fc2:	e012      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0208 	orr.w	r2, r2, #8
 8004fd2:	60da      	str	r2, [r3, #12]
      break;
 8004fd4:	e009      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0210 	orr.w	r2, r2, #16
 8004fe4:	60da      	str	r2, [r3, #12]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004fe8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f9de 	bl	80063b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_TIM_IC_Start_IT+0xd8>)
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b06      	cmp	r3, #6
 8005008:	d00b      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0xce>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d007      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	00010007 	.word	0x00010007

08005030 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e02d      	b.n	80050a0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f825 	bl	80050a8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fc55 	bl	8005920 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0208 	bic.w	r2, r2, #8
 8005084:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fb feca 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fbec 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fbf3 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0204 	mvn.w	r2, #4
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb fea0 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fbc2 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fbc9 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b08      	cmp	r3, #8
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fb fe76 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fb98 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fb9f 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb fe4c 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fb6e 	bl	80058e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb75 	bl	80058f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0201 	mvn.w	r2, #1
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb fe22 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 f9e0 	bl	800662c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f9d3 	bl	8006640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fb23 	bl	800590c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d10e      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f06f 0220 	mvn.w	r2, #32
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 f993 	bl	8006618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005310:	2302      	movs	r3, #2
 8005312:	e08a      	b.n	800542a <HAL_TIM_IC_ConfigChannel+0x130>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11b      	bne.n	8005362 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6819      	ldr	r1, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f000 fe77 	bl	800602c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 020c 	bic.w	r2, r2, #12
 800534c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6999      	ldr	r1, [r3, #24]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	619a      	str	r2, [r3, #24]
 8005360:	e05a      	b.n	8005418 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d11c      	bne.n	80053a2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f000 fefb 	bl	8006172 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800538a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
 80053a0:	e03a      	b.n	8005418 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d11b      	bne.n	80053e0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f000 ff48 	bl	800624c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020c 	bic.w	r2, r2, #12
 80053ca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69d9      	ldr	r1, [r3, #28]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	61da      	str	r2, [r3, #28]
 80053de:	e01b      	b.n	8005418 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6819      	ldr	r1, [r3, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 ff68 	bl	80062c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005402:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69d9      	ldr	r1, [r3, #28]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	021a      	lsls	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e105      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x226>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b14      	cmp	r3, #20
 8005462:	f200 80f0 	bhi.w	8005646 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005647 	.word	0x08005647
 8005474:	08005647 	.word	0x08005647
 8005478:	08005647 	.word	0x08005647
 800547c:	08005501 	.word	0x08005501
 8005480:	08005647 	.word	0x08005647
 8005484:	08005647 	.word	0x08005647
 8005488:	08005647 	.word	0x08005647
 800548c:	08005543 	.word	0x08005543
 8005490:	08005647 	.word	0x08005647
 8005494:	08005647 	.word	0x08005647
 8005498:	08005647 	.word	0x08005647
 800549c:	08005583 	.word	0x08005583
 80054a0:	08005647 	.word	0x08005647
 80054a4:	08005647 	.word	0x08005647
 80054a8:	08005647 	.word	0x08005647
 80054ac:	080055c5 	.word	0x080055c5
 80054b0:	08005647 	.word	0x08005647
 80054b4:	08005647 	.word	0x08005647
 80054b8:	08005647 	.word	0x08005647
 80054bc:	08005605 	.word	0x08005605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 faca 	bl	8005a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0204 	bic.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
      break;
 80054fe:	e0a3      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fb1c 	bl	8005b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      break;
 8005540:	e082      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fb73 	bl	8005c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0208 	orr.w	r2, r2, #8
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0204 	bic.w	r2, r2, #4
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
      break;
 8005580:	e062      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fbc9 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
      break;
 80055c2:	e041      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fc00 	bl	8005dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005602:	e021      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fc32 	bl	8005e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005646:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop

08005664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e0a6      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x166>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b4f      	ldr	r3, [pc, #316]	; (80057d4 <HAL_TIM_ConfigClockSource+0x170>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d067      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x120>
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d80b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x6c>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d073      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d802      	bhi.n	80056c6 <HAL_TIM_ConfigClockSource+0x62>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d06f      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056c4:	e078      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d06c      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056ca:	2b30      	cmp	r3, #48	; 0x30
 80056cc:	d06a      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056ce:	e073      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d00d      	beq.n	80056f0 <HAL_TIM_ConfigClockSource+0x8c>
 80056d4:	2b70      	cmp	r3, #112	; 0x70
 80056d6:	d804      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x7e>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d033      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xe0>
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d041      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056e0:	e06a      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d066      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x152>
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	d017      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056ee:	e063      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6899      	ldr	r1, [r3, #8]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f000 fe38 	bl	8006374 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005712:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
      break;
 800571c:	e04c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f000 fe21 	bl	8006374 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e039      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	461a      	mov	r2, r3
 8005752:	f000 fcdf 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2150      	movs	r1, #80	; 0x50
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fdee 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 8005762:	e029      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	461a      	mov	r2, r3
 8005772:	f000 fd3b 	bl	80061ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2160      	movs	r1, #96	; 0x60
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fdde 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 8005782:	e019      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	461a      	mov	r2, r3
 8005792:	f000 fcbf 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fdce 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 80057a2:	e009      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fdc5 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 80057b4:	e000      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fffeff88 	.word	0xfffeff88

080057d8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e031      	b.n	8005854 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fb8a 	bl	8005f1c <TIM_SlaveTimer_SetConfig>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e018      	b.n	8005854 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005830:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005840:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d831      	bhi.n	80058d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058d5 	.word	0x080058d5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058d5 	.word	0x080058d5
 80058a8:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	60fb      	str	r3, [r7, #12]

      break;
 80058b4:	e00f      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	60fb      	str	r3, [r7, #12]

      break;
 80058be:	e00a      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	60fb      	str	r3, [r7, #12]

      break;
 80058c8:	e005      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	60fb      	str	r3, [r7, #12]

      break;
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058d4:	bf00      	nop
  }

  return tmpreg;
 80058d6:	68fb      	ldr	r3, [r7, #12]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a40      	ldr	r2, [pc, #256]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d00f      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3a      	ldr	r2, [pc, #232]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d02b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d027      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <TIM_Base_SetConfig+0x118>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d023      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <TIM_Base_SetConfig+0x11c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <TIM_Base_SetConfig+0x120>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a29      	ldr	r2, [pc, #164]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d017      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a28      	ldr	r2, [pc, #160]	; (8005a48 <TIM_Base_SetConfig+0x128>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <TIM_Base_SetConfig+0x12c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00f      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <TIM_Base_SetConfig+0x130>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <TIM_Base_SetConfig+0x134>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <TIM_Base_SetConfig+0x138>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <TIM_Base_SetConfig+0x13c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d108      	bne.n	80059e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <TIM_Base_SetConfig+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0xf8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d103      	bne.n	8005a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	615a      	str	r2, [r3, #20]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40010400 	.word	0x40010400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	40001800 	.word	0x40001800
 8005a58:	40001c00 	.word	0x40001c00
 8005a5c:	40002000 	.word	0x40002000

08005a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <TIM_OC1_SetConfig+0xd8>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0302 	bic.w	r3, r3, #2
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC1_SetConfig+0x64>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <TIM_OC1_SetConfig+0xe0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10c      	bne.n	8005ade <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0308 	bic.w	r3, r3, #8
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <TIM_OC1_SetConfig+0xdc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC1_SetConfig+0x8e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <TIM_OC1_SetConfig+0xe0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	fffeff8f 	.word	0xfffeff8f
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40010400 	.word	0x40010400

08005b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0210 	bic.w	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <TIM_OC2_SetConfig+0xe4>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0320 	bic.w	r3, r3, #32
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <TIM_OC2_SetConfig+0xe8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC2_SetConfig+0x68>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <TIM_OC2_SetConfig+0xec>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10d      	bne.n	8005bc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <TIM_OC2_SetConfig+0xe8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC2_SetConfig+0x94>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <TIM_OC2_SetConfig+0xec>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d113      	bne.n	8005c00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	feff8fff 	.word	0xfeff8fff
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <TIM_OC3_SetConfig+0xe0>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <TIM_OC3_SetConfig+0xe4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_OC3_SetConfig+0x66>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a21      	ldr	r2, [pc, #132]	; (8005d1c <TIM_OC3_SetConfig+0xe8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <TIM_OC3_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC3_SetConfig+0x92>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <TIM_OC3_SetConfig+0xe8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d113      	bne.n	8005cee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	fffeff8f 	.word	0xfffeff8f
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <TIM_OC4_SetConfig+0xa4>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <TIM_OC4_SetConfig+0xa8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC4_SetConfig+0x68>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a12      	ldr	r2, [pc, #72]	; (8005dcc <TIM_OC4_SetConfig+0xac>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	feff8fff 	.word	0xfeff8fff
 8005dc8:	40010000 	.word	0x40010000
 8005dcc:	40010400 	.word	0x40010400

08005dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <TIM_OC5_SetConfig+0x98>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a12      	ldr	r2, [pc, #72]	; (8005e6c <TIM_OC5_SetConfig+0x9c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC5_SetConfig+0x5e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <TIM_OC5_SetConfig+0xa0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d109      	bne.n	8005e42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	fffeff8f 	.word	0xfffeff8f
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400

08005e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <TIM_OC6_SetConfig+0x9c>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	051b      	lsls	r3, r3, #20
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <TIM_OC6_SetConfig+0xa0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC6_SetConfig+0x60>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <TIM_OC6_SetConfig+0xa4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d109      	bne.n	8005ee8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	029b      	lsls	r3, r3, #10
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	feff8fff 	.word	0xfeff8fff
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4b39      	ldr	r3, [pc, #228]	; (8006028 <TIM_SlaveTimer_SetConfig+0x10c>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b30      	cmp	r3, #48	; 0x30
 8005f60:	d05c      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0x100>
 8005f62:	2b30      	cmp	r3, #48	; 0x30
 8005f64:	d806      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x58>
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d058      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0x100>
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d056      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0x100>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d054      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005f72:	e054      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005f74:	2b50      	cmp	r3, #80	; 0x50
 8005f76:	d03d      	beq.n	8005ff4 <TIM_SlaveTimer_SetConfig+0xd8>
 8005f78:	2b50      	cmp	r3, #80	; 0x50
 8005f7a:	d802      	bhi.n	8005f82 <TIM_SlaveTimer_SetConfig+0x66>
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	d010      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005f80:	e04d      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005f82:	2b60      	cmp	r3, #96	; 0x60
 8005f84:	d040      	beq.n	8006008 <TIM_SlaveTimer_SetConfig+0xec>
 8005f86:	2b70      	cmp	r3, #112	; 0x70
 8005f88:	d000      	beq.n	8005f8c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005f8a:	e048      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68d9      	ldr	r1, [r3, #12]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f000 f9ea 	bl	8006374 <TIM_ETR_SetConfig>
      break;
 8005fa0:	e03d      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d101      	bne.n	8005fae <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e038      	b.n	8006020 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fd4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	621a      	str	r2, [r3, #32]
      break;
 8005ff2:	e014      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6899      	ldr	r1, [r3, #8]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	461a      	mov	r2, r3
 8006002:	f000 f887 	bl	8006114 <TIM_TI1_ConfigInputStage>
      break;
 8006006:	e00a      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6899      	ldr	r1, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	461a      	mov	r2, r3
 8006016:	f000 f8e9 	bl	80061ec <TIM_TI2_ConfigInputStage>
      break;
 800601a:	e000      	b.n	800601e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800601c:	bf00      	nop
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	fffefff8 	.word	0xfffefff8

0800602c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <TIM_TI1_SetConfig+0xcc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01b      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d017      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <TIM_TI1_SetConfig+0xd0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a24      	ldr	r2, [pc, #144]	; (8006100 <TIM_TI1_SetConfig+0xd4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <TIM_TI1_SetConfig+0xd8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a22      	ldr	r2, [pc, #136]	; (8006108 <TIM_TI1_SetConfig+0xdc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a21      	ldr	r2, [pc, #132]	; (800610c <TIM_TI1_SetConfig+0xe0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_TI1_SetConfig+0x66>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <TIM_TI1_SetConfig+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <TIM_TI1_SetConfig+0x6a>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <TIM_TI1_SetConfig+0x6c>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e003      	b.n	80060b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 030a 	bic.w	r3, r3, #10
 80060d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f003 030a 	and.w	r3, r3, #10
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40010400 	.word	0x40010400
 800610c:	40014000 	.word	0x40014000
 8006110:	40001800 	.word	0x40001800

08006114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 030a 	bic.w	r3, r3, #10
 8006150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f023 0210 	bic.w	r2, r3, #16
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	031b      	lsls	r3, r3, #12
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0210 	bic.w	r2, r3, #16
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006216:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	031b      	lsls	r3, r3, #12
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006228:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0303 	bic.w	r3, r3, #3
 8006278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	b2db      	uxtb	r3, r3
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800629c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	621a      	str	r2, [r3, #32]
}
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006302:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	031b      	lsls	r3, r3, #12
 8006308:	b29b      	uxth	r3, r3
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006316:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	031b      	lsls	r3, r3, #12
 800631c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	f043 0307 	orr.w	r3, r3, #7
 8006360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]
}
 8006368:	bf00      	nop
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	431a      	orrs	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	609a      	str	r2, [r3, #8]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2201      	movs	r2, #1
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ec:	431a      	orrs	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006414:	2302      	movs	r3, #2
 8006416:	e06d      	b.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a30      	ldr	r2, [pc, #192]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2f      	ldr	r2, [pc, #188]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006452:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006464:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d01d      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40014000 	.word	0x40014000
 8006518:	40001800 	.word	0x40001800

0800651c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e065      	b.n	8006604 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a16      	ldr	r2, [pc, #88]	; (8006610 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d115      	bne.n	80065f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	051b      	lsls	r3, r3, #20
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40010000 	.word	0x40010000
 8006614:	40010400 	.word	0x40010400

08006618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e040      	b.n	80066e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fa febc 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	; 0x24
 8006680:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f82c 	bl	80066f0 <UART_SetConfig>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e022      	b.n	80066e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 faca 	bl	8006c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fb51 	bl	8006d88 <UART_CheckIdleState>
 80066e6:	4603      	mov	r3, r0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4bb1      	ldr	r3, [pc, #708]	; (80069e4 <UART_SetConfig+0x2f4>)
 8006720:	4013      	ands	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	6939      	ldr	r1, [r7, #16]
 8006728:	430b      	orrs	r3, r1
 800672a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	430a      	orrs	r2, r1
 8006764:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a9f      	ldr	r2, [pc, #636]	; (80069e8 <UART_SetConfig+0x2f8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d121      	bne.n	80067b4 <UART_SetConfig+0xc4>
 8006770:	4b9e      	ldr	r3, [pc, #632]	; (80069ec <UART_SetConfig+0x2fc>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d816      	bhi.n	80067ac <UART_SetConfig+0xbc>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <UART_SetConfig+0x94>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	08006795 	.word	0x08006795
 8006788:	080067a1 	.word	0x080067a1
 800678c:	0800679b 	.word	0x0800679b
 8006790:	080067a7 	.word	0x080067a7
 8006794:	2301      	movs	r3, #1
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e151      	b.n	8006a3e <UART_SetConfig+0x34e>
 800679a:	2302      	movs	r3, #2
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e14e      	b.n	8006a3e <UART_SetConfig+0x34e>
 80067a0:	2304      	movs	r3, #4
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e14b      	b.n	8006a3e <UART_SetConfig+0x34e>
 80067a6:	2308      	movs	r3, #8
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e148      	b.n	8006a3e <UART_SetConfig+0x34e>
 80067ac:	2310      	movs	r3, #16
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	bf00      	nop
 80067b2:	e144      	b.n	8006a3e <UART_SetConfig+0x34e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a8d      	ldr	r2, [pc, #564]	; (80069f0 <UART_SetConfig+0x300>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d134      	bne.n	8006828 <UART_SetConfig+0x138>
 80067be:	4b8b      	ldr	r3, [pc, #556]	; (80069ec <UART_SetConfig+0x2fc>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f003 030c 	and.w	r3, r3, #12
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d829      	bhi.n	8006820 <UART_SetConfig+0x130>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0xe4>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	08006809 	.word	0x08006809
 80067d8:	08006821 	.word	0x08006821
 80067dc:	08006821 	.word	0x08006821
 80067e0:	08006821 	.word	0x08006821
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006821 	.word	0x08006821
 80067ec:	08006821 	.word	0x08006821
 80067f0:	08006821 	.word	0x08006821
 80067f4:	0800680f 	.word	0x0800680f
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006821 	.word	0x08006821
 8006800:	08006821 	.word	0x08006821
 8006804:	0800681b 	.word	0x0800681b
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e117      	b.n	8006a3e <UART_SetConfig+0x34e>
 800680e:	2302      	movs	r3, #2
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e114      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006814:	2304      	movs	r3, #4
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e111      	b.n	8006a3e <UART_SetConfig+0x34e>
 800681a:	2308      	movs	r3, #8
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e10e      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006820:	2310      	movs	r3, #16
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	bf00      	nop
 8006826:	e10a      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a71      	ldr	r2, [pc, #452]	; (80069f4 <UART_SetConfig+0x304>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d120      	bne.n	8006874 <UART_SetConfig+0x184>
 8006832:	4b6e      	ldr	r3, [pc, #440]	; (80069ec <UART_SetConfig+0x2fc>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800683c:	2b10      	cmp	r3, #16
 800683e:	d00f      	beq.n	8006860 <UART_SetConfig+0x170>
 8006840:	2b10      	cmp	r3, #16
 8006842:	d802      	bhi.n	800684a <UART_SetConfig+0x15a>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <UART_SetConfig+0x164>
 8006848:	e010      	b.n	800686c <UART_SetConfig+0x17c>
 800684a:	2b20      	cmp	r3, #32
 800684c:	d005      	beq.n	800685a <UART_SetConfig+0x16a>
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d009      	beq.n	8006866 <UART_SetConfig+0x176>
 8006852:	e00b      	b.n	800686c <UART_SetConfig+0x17c>
 8006854:	2300      	movs	r3, #0
 8006856:	77fb      	strb	r3, [r7, #31]
 8006858:	e0f1      	b.n	8006a3e <UART_SetConfig+0x34e>
 800685a:	2302      	movs	r3, #2
 800685c:	77fb      	strb	r3, [r7, #31]
 800685e:	e0ee      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006860:	2304      	movs	r3, #4
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e0eb      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006866:	2308      	movs	r3, #8
 8006868:	77fb      	strb	r3, [r7, #31]
 800686a:	e0e8      	b.n	8006a3e <UART_SetConfig+0x34e>
 800686c:	2310      	movs	r3, #16
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	bf00      	nop
 8006872:	e0e4      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a5f      	ldr	r2, [pc, #380]	; (80069f8 <UART_SetConfig+0x308>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d120      	bne.n	80068c0 <UART_SetConfig+0x1d0>
 800687e:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <UART_SetConfig+0x2fc>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d00f      	beq.n	80068ac <UART_SetConfig+0x1bc>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d802      	bhi.n	8006896 <UART_SetConfig+0x1a6>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <UART_SetConfig+0x1b0>
 8006894:	e010      	b.n	80068b8 <UART_SetConfig+0x1c8>
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	d005      	beq.n	80068a6 <UART_SetConfig+0x1b6>
 800689a:	2bc0      	cmp	r3, #192	; 0xc0
 800689c:	d009      	beq.n	80068b2 <UART_SetConfig+0x1c2>
 800689e:	e00b      	b.n	80068b8 <UART_SetConfig+0x1c8>
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
 80068a4:	e0cb      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068a6:	2302      	movs	r3, #2
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e0c8      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068ac:	2304      	movs	r3, #4
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e0c5      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068b2:	2308      	movs	r3, #8
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e0c2      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068b8:	2310      	movs	r3, #16
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	bf00      	nop
 80068be:	e0be      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a4d      	ldr	r2, [pc, #308]	; (80069fc <UART_SetConfig+0x30c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d124      	bne.n	8006914 <UART_SetConfig+0x224>
 80068ca:	4b48      	ldr	r3, [pc, #288]	; (80069ec <UART_SetConfig+0x2fc>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d8:	d012      	beq.n	8006900 <UART_SetConfig+0x210>
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d802      	bhi.n	80068e6 <UART_SetConfig+0x1f6>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <UART_SetConfig+0x204>
 80068e4:	e012      	b.n	800690c <UART_SetConfig+0x21c>
 80068e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ea:	d006      	beq.n	80068fa <UART_SetConfig+0x20a>
 80068ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068f0:	d009      	beq.n	8006906 <UART_SetConfig+0x216>
 80068f2:	e00b      	b.n	800690c <UART_SetConfig+0x21c>
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0a1      	b.n	8006a3e <UART_SetConfig+0x34e>
 80068fa:	2302      	movs	r3, #2
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e09e      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006900:	2304      	movs	r3, #4
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e09b      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006906:	2308      	movs	r3, #8
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e098      	b.n	8006a3e <UART_SetConfig+0x34e>
 800690c:	2310      	movs	r3, #16
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	bf00      	nop
 8006912:	e094      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a39      	ldr	r2, [pc, #228]	; (8006a00 <UART_SetConfig+0x310>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d124      	bne.n	8006968 <UART_SetConfig+0x278>
 800691e:	4b33      	ldr	r3, [pc, #204]	; (80069ec <UART_SetConfig+0x2fc>)
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d012      	beq.n	8006954 <UART_SetConfig+0x264>
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006932:	d802      	bhi.n	800693a <UART_SetConfig+0x24a>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <UART_SetConfig+0x258>
 8006938:	e012      	b.n	8006960 <UART_SetConfig+0x270>
 800693a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693e:	d006      	beq.n	800694e <UART_SetConfig+0x25e>
 8006940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006944:	d009      	beq.n	800695a <UART_SetConfig+0x26a>
 8006946:	e00b      	b.n	8006960 <UART_SetConfig+0x270>
 8006948:	2301      	movs	r3, #1
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e077      	b.n	8006a3e <UART_SetConfig+0x34e>
 800694e:	2302      	movs	r3, #2
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e074      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006954:	2304      	movs	r3, #4
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e071      	b.n	8006a3e <UART_SetConfig+0x34e>
 800695a:	2308      	movs	r3, #8
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e06e      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006960:	2310      	movs	r3, #16
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	bf00      	nop
 8006966:	e06a      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a25      	ldr	r2, [pc, #148]	; (8006a04 <UART_SetConfig+0x314>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d124      	bne.n	80069bc <UART_SetConfig+0x2cc>
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <UART_SetConfig+0x2fc>)
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d012      	beq.n	80069a8 <UART_SetConfig+0x2b8>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d802      	bhi.n	800698e <UART_SetConfig+0x29e>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <UART_SetConfig+0x2ac>
 800698c:	e012      	b.n	80069b4 <UART_SetConfig+0x2c4>
 800698e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006992:	d006      	beq.n	80069a2 <UART_SetConfig+0x2b2>
 8006994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006998:	d009      	beq.n	80069ae <UART_SetConfig+0x2be>
 800699a:	e00b      	b.n	80069b4 <UART_SetConfig+0x2c4>
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e04d      	b.n	8006a3e <UART_SetConfig+0x34e>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e04a      	b.n	8006a3e <UART_SetConfig+0x34e>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e047      	b.n	8006a3e <UART_SetConfig+0x34e>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e044      	b.n	8006a3e <UART_SetConfig+0x34e>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	bf00      	nop
 80069ba:	e040      	b.n	8006a3e <UART_SetConfig+0x34e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a11      	ldr	r2, [pc, #68]	; (8006a08 <UART_SetConfig+0x318>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d139      	bne.n	8006a3a <UART_SetConfig+0x34a>
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <UART_SetConfig+0x2fc>)
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d4:	d027      	beq.n	8006a26 <UART_SetConfig+0x336>
 80069d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069da:	d817      	bhi.n	8006a0c <UART_SetConfig+0x31c>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01c      	beq.n	8006a1a <UART_SetConfig+0x32a>
 80069e0:	e027      	b.n	8006a32 <UART_SetConfig+0x342>
 80069e2:	bf00      	nop
 80069e4:	efff69f3 	.word	0xefff69f3
 80069e8:	40011000 	.word	0x40011000
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40004400 	.word	0x40004400
 80069f4:	40004800 	.word	0x40004800
 80069f8:	40004c00 	.word	0x40004c00
 80069fc:	40005000 	.word	0x40005000
 8006a00:	40011400 	.word	0x40011400
 8006a04:	40007800 	.word	0x40007800
 8006a08:	40007c00 	.word	0x40007c00
 8006a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a10:	d006      	beq.n	8006a20 <UART_SetConfig+0x330>
 8006a12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a16:	d009      	beq.n	8006a2c <UART_SetConfig+0x33c>
 8006a18:	e00b      	b.n	8006a32 <UART_SetConfig+0x342>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e00e      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006a20:	2302      	movs	r3, #2
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e00b      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006a26:	2304      	movs	r3, #4
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e008      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e005      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006a32:	2310      	movs	r3, #16
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	bf00      	nop
 8006a38:	e001      	b.n	8006a3e <UART_SetConfig+0x34e>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a46:	d17f      	bne.n	8006b48 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006a48:	7ffb      	ldrb	r3, [r7, #31]
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d85c      	bhi.n	8006b08 <UART_SetConfig+0x418>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x364>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a99 	.word	0x08006a99
 8006a5c:	08006ab9 	.word	0x08006ab9
 8006a60:	08006b09 	.word	0x08006b09
 8006a64:	08006ad1 	.word	0x08006ad1
 8006a68:	08006b09 	.word	0x08006b09
 8006a6c:	08006b09 	.word	0x08006b09
 8006a70:	08006b09 	.word	0x08006b09
 8006a74:	08006af1 	.word	0x08006af1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fc ff68 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8006a7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	005a      	lsls	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	441a      	add	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	61bb      	str	r3, [r7, #24]
        break;
 8006a96:	e03a      	b.n	8006b0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fc ff6c 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	005a      	lsls	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	441a      	add	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	61bb      	str	r3, [r7, #24]
        break;
 8006ab6:	e02a      	b.n	8006b0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	085a      	lsrs	r2, r3, #1
 8006abe:	4b5f      	ldr	r3, [pc, #380]	; (8006c3c <UART_SetConfig+0x54c>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6852      	ldr	r2, [r2, #4]
 8006ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	61bb      	str	r3, [r7, #24]
        break;
 8006ace:	e01e      	b.n	8006b0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad0:	f7fc fe58 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8006ad4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	61bb      	str	r3, [r7, #24]
        break;
 8006aee:	e00e      	b.n	8006b0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	61bb      	str	r3, [r7, #24]
        break;
 8006b06:	e002      	b.n	8006b0e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
        break;
 8006b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d916      	bls.n	8006b42 <UART_SetConfig+0x452>
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1a:	d212      	bcs.n	8006b42 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f023 030f 	bic.w	r3, r3, #15
 8006b24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	897b      	ldrh	r3, [r7, #10]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	897a      	ldrh	r2, [r7, #10]
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	e070      	b.n	8006c24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
 8006b46:	e06d      	b.n	8006c24 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006b48:	7ffb      	ldrb	r3, [r7, #31]
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d859      	bhi.n	8006c02 <UART_SetConfig+0x512>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x464>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006c03 	.word	0x08006c03
 8006b64:	08006bcd 	.word	0x08006bcd
 8006b68:	08006c03 	.word	0x08006c03
 8006b6c:	08006c03 	.word	0x08006c03
 8006b70:	08006c03 	.word	0x08006c03
 8006b74:	08006beb 	.word	0x08006beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fc fee8 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8006b7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	085a      	lsrs	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	441a      	add	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	61bb      	str	r3, [r7, #24]
        break;
 8006b94:	e038      	b.n	8006c08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b96:	f7fc feed 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8006b9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	085a      	lsrs	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	61bb      	str	r3, [r7, #24]
        break;
 8006bb2:	e029      	b.n	8006c08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	085a      	lsrs	r2, r3, #1
 8006bba:	4b21      	ldr	r3, [pc, #132]	; (8006c40 <UART_SetConfig+0x550>)
 8006bbc:	4413      	add	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6852      	ldr	r2, [r2, #4]
 8006bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	61bb      	str	r3, [r7, #24]
        break;
 8006bca:	e01d      	b.n	8006c08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7fc fdda 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8006bd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	085a      	lsrs	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	441a      	add	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	61bb      	str	r3, [r7, #24]
        break;
 8006be8:	e00e      	b.n	8006c08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e002      	b.n	8006c08 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
        break;
 8006c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	d908      	bls.n	8006c20 <UART_SetConfig+0x530>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d204      	bcs.n	8006c20 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	60da      	str	r2, [r3, #12]
 8006c1e:	e001      	b.n	8006c24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	01e84800 	.word	0x01e84800
 8006c40:	00f42400 	.word	0x00f42400

08006c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d10a      	bne.n	8006d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006d96:	f7fa fcb3 	bl	8001700 <HAL_GetTick>
 8006d9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d10e      	bne.n	8006dc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006daa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f82a 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e020      	b.n	8006e0a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d10e      	bne.n	8006df4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f814 	bl	8006e12 <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e00a      	b.n	8006e0a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e22:	e05d      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d059      	beq.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2c:	f7fa fc68 	bl	8001700 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d11b      	bne.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e042      	b.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d02b      	beq.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d123      	bne.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ea0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e00f      	b.n	8006f00 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69da      	ldr	r2, [r3, #28]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d092      	beq.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f08:	b084      	sub	sp, #16
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	f107 001c 	add.w	r0, r7, #28
 8006f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d120      	bne.n	8006f62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <USB_CoreInit+0xac>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d105      	bne.n	8006f56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa52 	bl	8007400 <USB_CoreReset>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]
 8006f60:	e010      	b.n	8006f84 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa46 	bl	8007400 <USB_CoreReset>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d10b      	bne.n	8006fa2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f043 0206 	orr.w	r2, r3, #6
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fae:	b004      	add	sp, #16
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	ffbdffbf 	.word	0xffbdffbf

08006fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 0201 	bic.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d106      	bne.n	8007006 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	60da      	str	r2, [r3, #12]
 8007004:	e00b      	b.n	800701e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e001      	b.n	800701e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e003      	b.n	8007026 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800701e:	2032      	movs	r0, #50	; 0x32
 8007020:	f7fa fb7a 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007030:	b084      	sub	sp, #16
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800703e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	e009      	b.n	8007064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3340      	adds	r3, #64	; 0x40
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b0e      	cmp	r3, #14
 8007068:	d9f2      	bls.n	8007050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11c      	bne.n	80070aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800707e:	f043 0302 	orr.w	r3, r3, #2
 8007082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e005      	b.n	80070b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070bc:	461a      	mov	r2, r3
 80070be:	2300      	movs	r3, #0
 80070c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c8:	4619      	mov	r1, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d0:	461a      	mov	r2, r3
 80070d2:	680b      	ldr	r3, [r1, #0]
 80070d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d10c      	bne.n	80070f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070e2:	2100      	movs	r1, #0
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f959 	bl	800739c <USB_SetDevSpeed>
 80070ea:	e018      	b.n	800711e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070ec:	2101      	movs	r1, #1
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f954 	bl	800739c <USB_SetDevSpeed>
 80070f4:	e013      	b.n	800711e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d10c      	bne.n	8007116 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f949 	bl	800739c <USB_SetDevSpeed>
 800710a:	e008      	b.n	800711e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f944 	bl	800739c <USB_SetDevSpeed>
 8007114:	e003      	b.n	800711e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007116:	2103      	movs	r1, #3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f93f 	bl	800739c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800711e:	2110      	movs	r1, #16
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8f3 	bl	800730c <USB_FlushTxFifo>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f911 	bl	8007358 <USB_FlushRxFifo>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	461a      	mov	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007152:	461a      	mov	r2, r3
 8007154:	2300      	movs	r3, #0
 8007156:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	461a      	mov	r2, r3
 8007160:	2300      	movs	r3, #0
 8007162:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	e043      	b.n	80071f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800717c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007180:	d118      	bne.n	80071b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007194:	461a      	mov	r2, r3
 8007196:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	e013      	b.n	80071c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	461a      	mov	r2, r3
 80071ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e008      	b.n	80071c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	461a      	mov	r2, r3
 80071c2:	2300      	movs	r3, #0
 80071c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	461a      	mov	r2, r3
 80071d4:	2300      	movs	r3, #0
 80071d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	461a      	mov	r2, r3
 80071e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	3301      	adds	r3, #1
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d3b7      	bcc.n	800716a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071fa:	2300      	movs	r3, #0
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	e043      	b.n	8007288 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007216:	d118      	bne.n	800724a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	461a      	mov	r2, r3
 800722c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e013      	b.n	800725c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	461a      	mov	r2, r3
 8007242:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e008      	b.n	800725c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	461a      	mov	r2, r3
 8007258:	2300      	movs	r3, #0
 800725a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	461a      	mov	r2, r3
 800726a:	2300      	movs	r3, #0
 800726c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	461a      	mov	r2, r3
 800727c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007280:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3301      	adds	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3b7      	bcc.n	8007200 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f043 0210 	orr.w	r2, r3, #16
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <USB_DevInit+0x2d4>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f043 0208 	orr.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d105      	bne.n	80072f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <USB_DevInit+0x2d8>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007300:	b004      	add	sp, #16
 8007302:	4770      	bx	lr
 8007304:	803c3800 	.word	0x803c3800
 8007308:	40000004 	.word	0x40000004

0800730c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	019b      	lsls	r3, r3, #6
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a09      	ldr	r2, [pc, #36]	; (8007354 <USB_FlushTxFifo+0x48>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e006      	b.n	8007346 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b20      	cmp	r3, #32
 8007342:	d0f0      	beq.n	8007326 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	00030d40 	.word	0x00030d40

08007358 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2210      	movs	r2, #16
 8007368:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <USB_FlushRxFifo+0x40>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b10      	cmp	r3, #16
 8007386:	d0f0      	beq.n	800736a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	00030d40 	.word	0x00030d40

0800739c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80073ee:	2003      	movs	r0, #3
 80073f0:	f7fa f992 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a13      	ldr	r2, [pc, #76]	; (8007464 <USB_CoreReset+0x64>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e01b      	b.n	8007456 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	daf2      	bge.n	800740c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a09      	ldr	r2, [pc, #36]	; (8007464 <USB_CoreReset+0x64>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e006      	b.n	8007456 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d0f0      	beq.n	8007436 <USB_CoreReset+0x36>

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	00030d40 	.word	0x00030d40

08007468 <__libc_init_array>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4e0d      	ldr	r6, [pc, #52]	; (80074a0 <__libc_init_array+0x38>)
 800746c:	4c0d      	ldr	r4, [pc, #52]	; (80074a4 <__libc_init_array+0x3c>)
 800746e:	1ba4      	subs	r4, r4, r6
 8007470:	10a4      	asrs	r4, r4, #2
 8007472:	2500      	movs	r5, #0
 8007474:	42a5      	cmp	r5, r4
 8007476:	d109      	bne.n	800748c <__libc_init_array+0x24>
 8007478:	4e0b      	ldr	r6, [pc, #44]	; (80074a8 <__libc_init_array+0x40>)
 800747a:	4c0c      	ldr	r4, [pc, #48]	; (80074ac <__libc_init_array+0x44>)
 800747c:	f000 f820 	bl	80074c0 <_init>
 8007480:	1ba4      	subs	r4, r4, r6
 8007482:	10a4      	asrs	r4, r4, #2
 8007484:	2500      	movs	r5, #0
 8007486:	42a5      	cmp	r5, r4
 8007488:	d105      	bne.n	8007496 <__libc_init_array+0x2e>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007490:	4798      	blx	r3
 8007492:	3501      	adds	r5, #1
 8007494:	e7ee      	b.n	8007474 <__libc_init_array+0xc>
 8007496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800749a:	4798      	blx	r3
 800749c:	3501      	adds	r5, #1
 800749e:	e7f2      	b.n	8007486 <__libc_init_array+0x1e>
 80074a0:	08007500 	.word	0x08007500
 80074a4:	08007500 	.word	0x08007500
 80074a8:	08007500 	.word	0x08007500
 80074ac:	08007504 	.word	0x08007504

080074b0 <memset>:
 80074b0:	4402      	add	r2, r0
 80074b2:	4603      	mov	r3, r0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d100      	bne.n	80074ba <memset+0xa>
 80074b8:	4770      	bx	lr
 80074ba:	f803 1b01 	strb.w	r1, [r3], #1
 80074be:	e7f9      	b.n	80074b4 <memset+0x4>

080074c0 <_init>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr

080074cc <_fini>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr
