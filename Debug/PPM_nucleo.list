
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b748  20000010  08006df0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2002b758  08006df0  0002b758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001641b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029bc  00000000  00000000  00036459  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00038e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  0003a290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b92f  00000000  00000000  0003b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6a7  00000000  00000000  00066eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115530  00000000  00000000  00076596  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018bac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057b8  00000000  00000000  0018bb44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d98 	.word	0x08006d98

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08006d98 	.word	0x08006d98

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	4907      	ldr	r1, [pc, #28]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056c:	f000 ff7d 	bl	800146a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000570:	f000 f830 	bl	80005d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000574:	f000 fb3a 	bl	8000bec <MX_GPIO_Init>
	MX_DMA_Init();
 8000578:	f000 fb28 	bl	8000bcc <MX_DMA_Init>
	MX_ETH_Init();
 800057c:	f000 f8c2 	bl	8000704 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000580:	f000 fac6 	bl	8000b10 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000584:	f000 faf4 	bl	8000b70 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000588:	f000 f8fc 	bl	8000784 <MX_SPI1_Init>
	MX_TIM8_Init();
 800058c:	f000 f9f4 	bl	8000978 <MX_TIM8_Init>
	MX_TIM1_Init();
 8000590:	f000 f932 	bl	80007f8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	// Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <main+0x58>)
 8000598:	f004 fb2c 	bl	8004bf4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	4808      	ldr	r0, [pc, #32]	; (80005c0 <main+0x58>)
 80005a0:	f004 fb28 	bl	8004bf4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0x5c>)
 80005a8:	f004 fb24 	bl	8004bf4 <HAL_TIM_PWM_Start_IT>

	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1, rxCount);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <main+0x60>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	4905      	ldr	r1, [pc, #20]	; (80005cc <main+0x64>)
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x68>)
 80005b8:	f003 fdae 	bl	8004118 <HAL_SPI_Receive_DMA>
	//LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005bc:	e7fe      	b.n	80005bc <main+0x54>
 80005be:	bf00      	nop
 80005c0:	2002b608 	.word	0x2002b608
 80005c4:	20000030 	.word	0x20000030
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20015d80 	.word	0x20015d80
 80005d0:	2002b648 	.word	0x2002b648

080005d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0b8      	sub	sp, #224	; 0xe0
 80005d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 fbd0 	bl	8006d88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2290      	movs	r2, #144	; 0x90
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f006 fbc1 	bl	8006d88 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000606:	f002 fbc9 	bl	8002d9c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <SystemClock_Config+0x124>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a3a      	ldr	r2, [pc, #232]	; (80006f8 <SystemClock_Config+0x124>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <SystemClock_Config+0x124>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <SystemClock_Config+0x128>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a35      	ldr	r2, [pc, #212]	; (80006fc <SystemClock_Config+0x128>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062c:	6013      	str	r3, [r2, #0]
 800062e:	4b33      	ldr	r3, [pc, #204]	; (80006fc <SystemClock_Config+0x128>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000656:	2304      	movs	r3, #4
 8000658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 800065c:	23d8      	movs	r3, #216	; 0xd8
 800065e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000668:	2309      	movs	r3, #9
 800066a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fbf2 	bl	8002e5c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xae>
		Error_Handler();
 800067e:	f000 fbaf 	bl	8000de0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000682:	f002 fb9b 	bl	8002dbc <HAL_PWREx_EnableOverDrive>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xbc>
		Error_Handler();
 800068c:	f000 fba8 	bl	8000de0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80006b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b6:	2107      	movs	r1, #7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fe7d 	bl	80033b8 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xf4>
		Error_Handler();
 80006c4:	f000 fb8c 	bl	8000de0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <SystemClock_Config+0x12c>)
 80006ca:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80006d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006da:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f861 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x11c>
		Error_Handler();
 80006ec:	f000 fb78 	bl	8000de0 <Error_Handler>
	}
}
 80006f0:	bf00      	nop
 80006f2:	37e0      	adds	r7, #224	; 0xe0
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000
 8000700:	00200110 	.word	0x00200110

08000704 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ETH_Init+0x78>)
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_ETH_Init+0x7c>)
 800070c:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ETH_Init+0x78>)
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ETH_Init+0x78>)
 8000716:	2200      	movs	r2, #0
 8000718:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_ETH_Init+0x78>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_ETH_Init+0x78>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_ETH_Init+0x78>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	3302      	adds	r3, #2
 8000732:	22e1      	movs	r2, #225	; 0xe1
 8000734:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ETH_Init+0x78>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	3303      	adds	r3, #3
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_ETH_Init+0x78>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	3304      	adds	r3, #4
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_ETH_Init+0x78>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	3305      	adds	r3, #5
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_ETH_Init+0x78>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_ETH_Init+0x78>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_ETH_Init+0x78>)
 8000762:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000766:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_ETH_Init+0x78>)
 800076a:	f001 fb85 	bl	8001e78 <HAL_ETH_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ETH_Init+0x74>
		Error_Handler();
 8000774:	f000 fb34 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2002b70c 	.word	0x2002b70c
 8000780:	40028000 	.word	0x40028000

08000784 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_SPI1_Init+0x6c>)
 800078a:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <MX_SPI1_Init+0x70>)
 800078c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x6c>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x6c>)
 8000796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x6c>)
 800079e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007a2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_SPI1_Init+0x6c>)
 80007dc:	f003 fc0a 	bl	8003ff4 <HAL_SPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI1_Init+0x66>
		Error_Handler();
 80007e6:	f000 fafb 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2002b648 	.word	0x2002b648
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b09a      	sub	sp, #104	; 0x68
 80007fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800080c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	222c      	movs	r2, #44	; 0x2c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 faa8 	bl	8006d88 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000838:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_TIM1_Init+0x178>)
 800083a:	4a4e      	ldr	r2, [pc, #312]	; (8000974 <MX_TIM1_Init+0x17c>)
 800083c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800083e:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <MX_TIM1_Init+0x178>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <MX_TIM1_Init+0x178>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 800084a:	4b49      	ldr	r3, [pc, #292]	; (8000970 <MX_TIM1_Init+0x178>)
 800084c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000850:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_TIM1_Init+0x178>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000858:	4b45      	ldr	r3, [pc, #276]	; (8000970 <MX_TIM1_Init+0x178>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b44      	ldr	r3, [pc, #272]	; (8000970 <MX_TIM1_Init+0x178>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000864:	4842      	ldr	r0, [pc, #264]	; (8000970 <MX_TIM1_Init+0x178>)
 8000866:	f004 f964 	bl	8004b32 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000870:	f000 fab6 	bl	8000de0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800087a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800087e:	4619      	mov	r1, r3
 8000880:	483b      	ldr	r0, [pc, #236]	; (8000970 <MX_TIM1_Init+0x178>)
 8000882:	f004 fcbf 	bl	8005204 <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x98>
		Error_Handler();
 800088c:	f000 faa8 	bl	8000de0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000890:	4837      	ldr	r0, [pc, #220]	; (8000970 <MX_TIM1_Init+0x178>)
 8000892:	f004 f979 	bl	8004b88 <HAL_TIM_PWM_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800089c:	f000 faa0 	bl	8000de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a0:	2320      	movs	r3, #32
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b0:	4619      	mov	r1, r3
 80008b2:	482f      	ldr	r0, [pc, #188]	; (8000970 <MX_TIM1_Init+0x178>)
 80008b4:	f005 fa10 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80008be:	f000 fa8f 	bl	8000de0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008c2:	2370      	movs	r3, #112	; 0x70
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 80008c6:	f240 336a 	movw	r3, #874	; 0x36a
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80008cc:	2302      	movs	r3, #2
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80008d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80008e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_TIM1_Init+0x178>)
 80008ec:	f004 fb72 	bl	8004fd4 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80008f6:	f000 fa73 	bl	8000de0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 80008fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000908:	2204      	movs	r2, #4
 800090a:	4619      	mov	r1, r3
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_TIM1_Init+0x178>)
 800090e:	f004 fb61 	bl	8004fd4 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x124>
			!= HAL_OK) {
		Error_Handler();
 8000918:	f000 fa62 	bl	8000de0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800093e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM1_Init+0x178>)
 8000952:	f005 fa4f 	bl	8005df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x168>
			!= HAL_OK) {
		Error_Handler();
 800095c:	f000 fa40 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM1_Init+0x178>)
 8000962:	f000 fbf9 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3768      	adds	r7, #104	; 0x68
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2002b608 	.word	0x2002b608
 8000974:	40010000 	.word	0x40010000

08000978 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b09e      	sub	sp, #120	; 0x78
 800097c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800097e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800098c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800099c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80009a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80009bc:	463b      	mov	r3, r7
 80009be:	222c      	movs	r2, #44	; 0x2c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 f9e0 	bl	8006d88 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80009c8:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009ca:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <MX_TIM8_Init+0x194>)
 80009cc:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80009ce:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 80009da:	4b4b      	ldr	r3, [pc, #300]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009dc:	226b      	movs	r2, #107	; 0x6b
 80009de:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 80009e6:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009e8:	2218      	movs	r2, #24
 80009ea:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80009f2:	4845      	ldr	r0, [pc, #276]	; (8000b08 <MX_TIM8_Init+0x190>)
 80009f4:	f004 f89d 	bl	8004b32 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM8_Init+0x8a>
		Error_Handler();
 80009fe:	f000 f9ef 	bl	8000de0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000a08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	483e      	ldr	r0, [pc, #248]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000a10:	f004 fbf8 	bl	8005204 <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM8_Init+0xa6>
		Error_Handler();
 8000a1a:	f000 f9e1 	bl	8000de0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000a1e:	483a      	ldr	r0, [pc, #232]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000a20:	f004 f8b2 	bl	8004b88 <HAL_TIM_PWM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM8_Init+0xb6>
		Error_Handler();
 8000a2a:	f000 f9d9 	bl	8000de0 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8000a2e:	2108      	movs	r1, #8
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000a32:	f004 f969 	bl	8004d08 <HAL_TIM_OnePulse_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8000a3c:	f000 f9d0 	bl	8000de0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a40:	2306      	movs	r3, #6
 8000a42:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8000a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482e      	ldr	r0, [pc, #184]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000a50:	f004 fc92 	bl	8005378 <HAL_TIM_SlaveConfigSynchro>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM8_Init+0xe6>
		Error_Handler();
 8000a5a:	f000 f9c1 	bl	8000de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000a6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4825      	ldr	r0, [pc, #148]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000a72:	f005 f931 	bl	8005cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM8_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000a7c:	f000 f9b0 	bl	8000de0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a80:	2370      	movs	r3, #112	; 0x70
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8000a84:	2336      	movs	r3, #54	; 0x36
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000aa6:	f004 fa95 	bl	8004fd4 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM8_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000ab0:	f000 f996 	bl	8000de0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ada:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000aea:	f005 f983 	bl	8005df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM8_Init+0x180>
			!= HAL_OK) {
		Error_Handler();
 8000af4:	f000 f974 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM8_Init+0x190>)
 8000afa:	f000 fb2d 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000afe:	bf00      	nop
 8000b00:	3778      	adds	r7, #120	; 0x78
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000030 	.word	0x20000030
 8000b0c:	40010400 	.word	0x40010400

08000b10 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_USART3_UART_Init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART3_UART_Init+0x58>)
 8000b54:	f005 f9ea 	bl	8005f2c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000b5e:	f000 f93f 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000070 	.word	0x20000070
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b7a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2206      	movs	r2, #6
 8000b80:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	f001 ffa9 	bl	8002b0a <HAL_PCD_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000bbe:	f000 f90f 	bl	8000de0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000f0 	.word	0x200000f0

08000bcc <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000bd0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000bd4:	f7ff fcb0 	bl	8000538 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2038      	movs	r0, #56	; 0x38
 8000bde:	f000 fd9e 	bl	800171e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be2:	2038      	movs	r0, #56	; 0x38
 8000be4:	f000 fdb7 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b56      	ldr	r3, [pc, #344]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a55      	ldr	r2, [pc, #340]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b53      	ldr	r3, [pc, #332]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a43      	ldr	r2, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a3d      	ldr	r2, [pc, #244]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <MX_GPIO_Init+0x170>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	482c      	ldr	r0, [pc, #176]	; (8000d60 <MX_GPIO_Init+0x174>)
 8000cb0:	f001 fef8 	bl	8002aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <MX_GPIO_Init+0x178>)
 8000cbc:	f001 fef2 	bl	8002aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4828      	ldr	r0, [pc, #160]	; (8000d68 <MX_GPIO_Init+0x17c>)
 8000cc6:	f001 feed 	bl	8002aa4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0x180>)
 8000cd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4824      	ldr	r0, [pc, #144]	; (8000d70 <MX_GPIO_Init+0x184>)
 8000ce0:	f001 fd36 	bl	8002750 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4819      	ldr	r0, [pc, #100]	; (8000d60 <MX_GPIO_Init+0x174>)
 8000cfc:	f001 fd28 	bl	8002750 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000d00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <MX_GPIO_Init+0x178>)
 8000d1a:	f001 fd19 	bl	8002750 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0x17c>)
 8000d36:	f001 fd0b 	bl	8002750 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x17c>)
 8000d4e:	f001 fcff 	bl	8002750 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	40020800 	.word	0x40020800

08000d74 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	// observe interval of SPI receiving
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <HAL_SPI_RxCpltCallback+0x44>)
 8000d80:	f001 fea9 	bl	8002ad6 <HAL_GPIO_TogglePin>
	// Run the measurement again
	filledBuffers++;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_SPI_RxCpltCallback+0x48>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_SPI_RxCpltCallback+0x48>)
 8000d8e:	701a      	strb	r2, [r3, #0]
	if (filledBuffers == 1) {
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_SPI_RxCpltCallback+0x48>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10a      	bne.n	8000dae <HAL_SPI_RxCpltCallback+0x3a>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2, rxCount);
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_SPI_RxCpltCallback+0x4c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <HAL_SPI_RxCpltCallback+0x50>)
 8000da2:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <HAL_SPI_RxCpltCallback+0x54>)
 8000da4:	f003 f9b8 	bl	8004118 <HAL_SPI_Receive_DMA>
		filledBuffers = 0;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_SPI_RxCpltCallback+0x48>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
	 rxCount++;
	 sprintf(msg, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	 }*/
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	2000002c 	.word	0x2000002c
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	200004f4 	.word	0x200004f4
 8000dc8:	2002b648 	.word	0x2002b648

08000dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x44>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x44>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x44>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x44>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x44>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_ETH_MspInit+0x158>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 8096 	bne.w	8000f88 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	623b      	str	r3, [r7, #32]
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	4b41      	ldr	r3, [pc, #260]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a40      	ldr	r2, [pc, #256]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a34      	ldr	r2, [pc, #208]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_ETH_MspInit+0x15c>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f04:	2332      	movs	r3, #50	; 0x32
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_ETH_MspInit+0x160>)
 8000f20:	f001 fc16 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f24:	2386      	movs	r3, #134	; 0x86
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f34:	230b      	movs	r3, #11
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4817      	ldr	r0, [pc, #92]	; (8000f9c <HAL_ETH_MspInit+0x164>)
 8000f40:	f001 fc06 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f56:	230b      	movs	r3, #11
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <HAL_ETH_MspInit+0x168>)
 8000f62:	f001 fbf5 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_ETH_MspInit+0x16c>)
 8000f84:	f001 fbe4 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3738      	adds	r7, #56	; 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40028000 	.word	0x40028000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40021800 	.word	0x40021800

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <HAL_SPI_MspInit+0x114>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d174      	bne.n	80010b4 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_SPI_MspInit+0x118>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001012:	f248 0320 	movw	r3, #32800	; 0x8020
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001024:	2305      	movs	r3, #5
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4825      	ldr	r0, [pc, #148]	; (80010c4 <HAL_SPI_MspInit+0x11c>)
 8001030:	f001 fb8e 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001044:	2305      	movs	r3, #5
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <HAL_SPI_MspInit+0x120>)
 8001050:	f001 fb7e 	bl	8002750 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_SPI_MspInit+0x128>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_SPI_MspInit+0x124>)
 800105c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001060:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_SPI_MspInit+0x124>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_SPI_MspInit+0x124>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_SPI_MspInit+0x124>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_SPI_MspInit+0x124>)
 800109a:	f000 fb77 	bl	800178c <HAL_DMA_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 80010a4:	f7ff fe9c 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_SPI_MspInit+0x124>)
 80010ac:	659a      	str	r2, [r3, #88]	; 0x58
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_SPI_MspInit+0x124>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40013000 	.word	0x40013000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	2002b6ac 	.word	0x2002b6ac
 80010d0:	40026410 	.word	0x40026410

080010d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_TIM_Base_MspInit+0x78>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d114      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201b      	movs	r0, #27
 8001104:	f000 fb0b 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001108:	201b      	movs	r0, #27
 800110a:	f000 fb24 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800110e:	e018      	b.n	8001142 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_TIM_Base_MspInit+0x80>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x7c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	202e      	movs	r0, #46	; 0x2e
 8001138:	f000 faf1 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800113c:	202e      	movs	r0, #46	; 0x2e
 800113e:	f000 fb0a 	bl	8001756 <HAL_NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40023800 	.word	0x40023800
 8001154:	40010400 	.word	0x40010400

08001158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_TIM_MspPostInit+0xa8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11d      	bne.n	80011b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001192:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <HAL_TIM_MspPostInit+0xb0>)
 80011b0:	f001 face 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80011b4:	e020      	b.n	80011f8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d11b      	bne.n	80011f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	; 0x30
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_TIM_MspPostInit+0xac>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d8:	2340      	movs	r3, #64	; 0x40
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80011e8:	2303      	movs	r3, #3
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_TIM_MspPostInit+0xb8>)
 80011f4:	f001 faac 	bl	8002750 <HAL_GPIO_Init>
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40010000 	.word	0x40010000
 8001204:	40023800 	.word	0x40023800
 8001208:	40021000 	.word	0x40021000
 800120c:	40010400 	.word	0x40010400
 8001210:	40020800 	.word	0x40020800

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_UART_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d128      	bne.n	8001288 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_UART_MspInit+0x80>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_UART_MspInit+0x80>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_UART_MspInit+0x80>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001278:	2307      	movs	r3, #7
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_UART_MspInit+0x84>)
 8001284:	f001 fa64 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004800 	.word	0x40004800
 8001294:	40023800 	.word	0x40023800
 8001298:	40020c00 	.word	0x40020c00

0800129c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012bc:	d141      	bne.n	8001342 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_PCD_MspInit+0xb0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_PCD_MspInit+0xb0>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_PCD_MspInit+0xb0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012e8:	230a      	movs	r3, #10
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <HAL_PCD_MspInit+0xb4>)
 80012f4:	f001 fa2c 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <HAL_PCD_MspInit+0xb4>)
 800130e:	f001 fa1f 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_PCD_MspInit+0xb0>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_PCD_MspInit+0xb0>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6353      	str	r3, [r2, #52]	; 0x34
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_PCD_MspInit+0xb0>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_PCD_MspInit+0xb0>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_PCD_MspInit+0xb0>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_PCD_MspInit+0xb0>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f89c 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_CC_IRQHandler+0x10>)
 80013b6:	f003 fced 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2002b608 	.word	0x2002b608

080013c4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM8_CC_IRQHandler+0x10>)
 80013ca:	f003 fce3 	bl	8004d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000030 	.word	0x20000030

080013d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA2_Stream0_IRQHandler+0x10>)
 80013de:	f000 fae3 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2002b6ac 	.word	0x2002b6ac

080013ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <SystemInit+0x28>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <SystemInit+0x28>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SystemInit+0x28>)
 8001402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001406:	609a      	str	r2, [r3, #8]
#endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800141c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800141e:	e003      	b.n	8001428 <LoopCopyDataInit>

08001420 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001422:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001424:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001426:	3104      	adds	r1, #4

08001428 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800142c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800142e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001430:	d3f6      	bcc.n	8001420 <CopyDataInit>
  ldr  r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001434:	e002      	b.n	800143c <LoopFillZerobss>

08001436 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001436:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001438:	f842 3b04 	str.w	r3, [r2], #4

0800143c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001440:	d3f9      	bcc.n	8001436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff ffd3 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f005 fc7b 	bl	8006d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff f88d 	bl	8000568 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001454:	08006de0 	.word	0x08006de0
  ldr  r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800145c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001460:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001464:	2002b758 	.word	0x2002b758

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f94a 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f805 	bl	8001484 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fcb9 	bl	8000df0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x54>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_InitTick+0x58>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f1 	udiv	r3, r3, r1
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f965 	bl	8001772 <HAL_SYSTICK_Config>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00e      	b.n	80014d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d80a      	bhi.n	80014ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f92d 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_InitTick+0x5c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e000      	b.n	80014d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000004 	.word	0x20000004
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	20000008 	.word	0x20000008

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	2002b754 	.word	0x2002b754

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2002b754 	.word	0x2002b754

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff ffee 	bl	800150c <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_Delay+0x40>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffde 	bl	800150c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000000c 	.word	0x2000000c

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	4313      	orrs	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0000 	.word	0x05fa0000

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff feb8 	bl	800150c <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e099      	b.n	80018dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c8:	e00f      	b.n	80017ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ca:	f7ff fe9f 	bl	800150c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d908      	bls.n	80017ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e078      	b.n	80018dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e8      	bne.n	80017ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_DMA_Init+0x158>)
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001816:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2b04      	cmp	r3, #4
 8001842:	d107      	bne.n	8001854 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4313      	orrs	r3, r2
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f023 0307 	bic.w	r3, r3, #7
 800186a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b04      	cmp	r3, #4
 800187c:	d117      	bne.n	80018ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fa77 	bl	8001d84 <DMA_CheckFifoParam>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018aa:	2301      	movs	r3, #1
 80018ac:	e016      	b.n	80018dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fa2e 	bl	8001d18 <DMA_CalcBaseAndBitshift>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	223f      	movs	r2, #63	; 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	e010803f 	.word	0xe010803f

080018e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_DMA_Start_IT+0x26>
 800190a:	2302      	movs	r3, #2
 800190c:	e048      	b.n	80019a0 <HAL_DMA_Start_IT+0xb8>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d137      	bne.n	8001992 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f9c0 	bl	8001cbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	223f      	movs	r2, #63	; 0x3f
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0216 	orr.w	r2, r2, #22
 8001956:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001966:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0208 	orr.w	r2, r2, #8
 800197e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e005      	b.n	800199e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_DMA_IRQHandler+0x258>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a92      	ldr	r2, [pc, #584]	; (8001c04 <HAL_DMA_IRQHandler+0x25c>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2208      	movs	r2, #8
 80019d4:	409a      	lsls	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2208      	movs	r2, #8
 8001a02:	409a      	lsls	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0202 	orr.w	r2, r3, #2
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2204      	movs	r2, #4
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00b      	beq.n	8001a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a78:	f043 0204 	orr.w	r2, r3, #4
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2210      	movs	r2, #16
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d043      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03c      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d024      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
 8001ad6:	e01f      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0208 	bic.w	r2, r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 808e 	beq.w	8001c46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8086 	beq.w	8001c46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	2220      	movs	r2, #32
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d136      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0216 	bic.w	r2, r2, #22
 8001b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_DMA_IRQHandler+0x1da>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	223f      	movs	r2, #63	; 0x3f
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07d      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
        }
        return;
 8001bbe:	e078      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01c      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d108      	bne.n	8001bee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d030      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
 8001bec:	e02b      	b.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d027      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e022      	b.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
 8001c00:	20000004 	.word	0x20000004
 8001c04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0210 	bic.w	r2, r2, #16
 8001c24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d032      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3301      	adds	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d307      	bcc.n	8001c8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f2      	bne.n	8001c72 <HAL_DMA_IRQHandler+0x2ca>
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
 8001cb0:	e000      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cb2:	bf00      	nop
    }
  }
}
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d108      	bne.n	8001cfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cfa:	e007      	b.n	8001d0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3b10      	subs	r3, #16
 8001d28:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <DMA_CalcBaseAndBitshift+0x60>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <DMA_CalcBaseAndBitshift+0x64>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d908      	bls.n	8001d58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <DMA_CalcBaseAndBitshift+0x68>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	1d1a      	adds	r2, r3, #4
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	659a      	str	r2, [r3, #88]	; 0x58
 8001d56:	e006      	b.n	8001d66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <DMA_CalcBaseAndBitshift+0x68>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	aaaaaaab 	.word	0xaaaaaaab
 8001d7c:	08006dc8 	.word	0x08006dc8
 8001d80:	fffffc00 	.word	0xfffffc00

08001d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d11f      	bne.n	8001dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d855      	bhi.n	8001e50 <DMA_CheckFifoParam+0xcc>
 8001da4:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <DMA_CheckFifoParam+0x28>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001dcf 	.word	0x08001dcf
 8001db4:	08001dbd 	.word	0x08001dbd
 8001db8:	08001e51 	.word	0x08001e51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d045      	beq.n	8001e54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dcc:	e042      	b.n	8001e54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dd6:	d13f      	bne.n	8001e58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ddc:	e03c      	b.n	8001e58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de6:	d121      	bne.n	8001e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d836      	bhi.n	8001e5c <DMA_CheckFifoParam+0xd8>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <DMA_CheckFifoParam+0x70>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e0b 	.word	0x08001e0b
 8001dfc:	08001e05 	.word	0x08001e05
 8001e00:	08001e1d 	.word	0x08001e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      break;
 8001e08:	e02f      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d024      	beq.n	8001e60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1a:	e021      	b.n	8001e60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e24:	d11e      	bne.n	8001e64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e2a:	e01b      	b.n	8001e64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d902      	bls.n	8001e38 <DMA_CheckFifoParam+0xb4>
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d003      	beq.n	8001e3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e36:	e018      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e3c:	e015      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00e      	beq.n	8001e68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e4e:	e00b      	b.n	8001e68 <DMA_CheckFifoParam+0xe4>
      break;
 8001e50:	bf00      	nop
 8001e52:	e00a      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e54:	bf00      	nop
 8001e56:	e008      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e58:	bf00      	nop
 8001e5a:	e006      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e5c:	bf00      	nop
 8001e5e:	e004      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e60:	bf00      	nop
 8001e62:	e002      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;   
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <DMA_CheckFifoParam+0xe6>
      break;
 8001e68:	bf00      	nop
    }
  } 
  
  return status; 
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e183      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe ffc0 	bl	8000e38 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7ff fb03 	bl	800150c <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f08:	e011      	b.n	8001f2e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f0a:	f7ff faff 	bl	800150c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f18:	d909      	bls.n	8001f2e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e13b      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f001 fbf6 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8001f54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_ETH_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_Init+0xf8>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_Init+0x112>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d804      	bhi.n	8001f8a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d903      	bls.n	8001f9a <HAL_ETH_Init+0x122>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_Init+0x13c>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_ETH_Init+0x2d4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f956 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9b3 	bl	800234c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d9      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ff2:	20ff      	movs	r0, #255	; 0xff
 8001ff4:	f7ff fa96 	bl	8001524 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a7 	beq.w	8002150 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002002:	f7ff fa83 	bl	800150c <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	461a      	mov	r2, r3
 800200e:	2101      	movs	r1, #1
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8cd 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002016:	f7ff fa79 	bl	800150c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d90f      	bls.n	8002048 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202c:	6939      	ldr	r1, [r7, #16]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f98c 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0ae      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0da      	beq.n	8002008 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002056:	2100      	movs	r1, #0
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f911 	bl	8002280 <HAL_ETH_WritePHYRegister>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002068:	6939      	ldr	r1, [r7, #16]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f96e 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002078:	2301      	movs	r3, #1
 800207a:	e094      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800207c:	f7ff fa46 	bl	800150c <HAL_GetTick>
 8002080:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	461a      	mov	r2, r3
 8002088:	2101      	movs	r1, #1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f890 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002090:	f7ff fa3c 	bl	800150c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d90f      	bls.n	80020c2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020a6:	6939      	ldr	r1, [r7, #16]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f94f 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e071      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0da      	beq.n	8002082 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	461a      	mov	r2, r3
 80020d2:	211f      	movs	r1, #31
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f86b 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e4:	6939      	ldr	r1, [r7, #16]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f930 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f4:	2301      	movs	r3, #1
 80020f6:	e056      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	e002      	b.n	8002112 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	e037      	b.n	8002194 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e032      	b.n	8002194 <HAL_ETH_Init+0x31c>
 800212e:	bf00      	nop
 8002130:	03938700 	.word	0x03938700
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	01312cff 	.word	0x01312cff
 8002140:	02160ebf 	.word	0x02160ebf
 8002144:	039386ff 	.word	0x039386ff
 8002148:	05f5e0ff 	.word	0x05f5e0ff
 800214c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_ETH_WritePHYRegister>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8e6 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00c      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800218c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002190:	f7ff f9c8 	bl	8001524 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8d8 	bl	800234c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	460b      	mov	r3, r1
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b82      	cmp	r3, #130	; 0x82
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e050      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2282      	movs	r2, #130	; 0x82
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 031c 	and.w	r3, r3, #28
 80021ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8a1b      	ldrh	r3, [r3, #16]
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7ff f973 	bl	800150c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002228:	e015      	b.n	8002256 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800222a:	f7ff f96f 	bl	800150c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d309      	bcc.n	800224e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e014      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e4      	bne.n	800222a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b42      	cmp	r3, #66	; 0x42
 80022a0:	d101      	bne.n	80022a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e04e      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022fc:	f7ff f906 	bl	800150c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002302:	e015      	b.n	8002330 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002304:	f7ff f902 	bl	800150c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d309      	bcc.n	8002328 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00d      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0b0      	sub	sp, #192	; 0xc0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002368:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800237a:	2300      	movs	r3, #0
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
 8002398:	e001      	b.n	800239e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	4bab      	ldr	r3, [pc, #684]	; (80026d4 <ETH_MACDMAConfig+0x388>)
 8002426:	4013      	ands	r3, r2
 8002428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002430:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002434:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002438:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800243e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002442:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002446:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800244c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800244e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002450:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002454:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002458:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800245c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002460:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002462:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002474:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7ff f84f 	bl	8001524 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002494:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002498:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800249a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800249e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff f82a 	bl	8001524 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002500:	4013      	ands	r3, r2
 8002502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800250c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002510:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002516:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800251c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800251e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002522:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002528:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800252a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe ffeb 	bl	8001524 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002556:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002558:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800255c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe ffd6 	bl	8001524 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002580:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <ETH_MACDMAConfig+0x38c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025ec:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025f0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025f2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025f4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025f6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025f8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025fa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025fc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025fe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002600:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002602:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002606:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800260a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800260c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f241 0318 	movw	r3, #4120	; 0x1018
 800261e:	4413      	add	r3, r2
 8002620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f241 0318 	movw	r3, #4120	; 0x1018
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002636:	2001      	movs	r0, #1
 8002638:	f7fe ff74 	bl	8001524 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	4413      	add	r3, r2
 8002646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800264c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002650:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002654:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002658:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800265c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002662:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002666:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe ff4d 	bl	8001524 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002696:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <ETH_MACDMAConfig+0x390>)
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80b 	bl	80026e0 <ETH_MACAddressConfig>
}
 80026ca:	bf00      	nop
 80026cc:	37c0      	adds	r7, #192	; 0xc0
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	ff20810f 	.word	0xff20810f
 80026d8:	f8de3f23 	.word	0xf8de3f23
 80026dc:	00010040 	.word	0x00010040

080026e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3305      	adds	r3, #5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3204      	adds	r2, #4
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <ETH_MACAddressConfig+0x68>)
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3303      	adds	r3, #3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3302      	adds	r3, #2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ETH_MACAddressConfig+0x6c>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e175      	b.n	8002a5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8164 	bne.w	8002a56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d00b      	beq.n	80027ae <HAL_GPIO_Init+0x5e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a2:	2b11      	cmp	r3, #17
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b12      	cmp	r3, #18
 80027ac:	d130      	bne.n	8002810 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 0201 	and.w	r2, r3, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x100>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b12      	cmp	r3, #18
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80be 	beq.w	8002a56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a64      	ldr	r2, [pc, #400]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f2:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d037      	beq.n	800298e <HAL_GPIO_Init+0x23e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_GPIO_Init+0x23a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02b      	beq.n	8002986 <HAL_GPIO_Init+0x236>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x232>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x22e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x33c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x22a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x340>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x344>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x348>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x34c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x21a>
 8002966:	2309      	movs	r3, #9
 8002968:	e012      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296a:	230a      	movs	r3, #10
 800296c:	e010      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296e:	2308      	movs	r3, #8
 8002970:	e00e      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002972:	2307      	movs	r3, #7
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002976:	2306      	movs	r3, #6
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f ae86 	bls.w	8002770 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022400 	.word	0x40022400
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af8:	887a      	ldrh	r2, [r7, #2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0c:	b08f      	sub	sp, #60	; 0x3c
 8002b0e:	af0a      	add	r7, sp, #40	; 0x28
 8002b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e116      	b.n	8002d4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fbb0 	bl	800129c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fe98 	bl	8006890 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	687e      	ldr	r6, [r7, #4]
 8002b68:	466d      	mov	r5, sp
 8002b6a:	f106 0410 	add.w	r4, r6, #16
 8002b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b7e:	1d33      	adds	r3, r6, #4
 8002b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b82:	6838      	ldr	r0, [r7, #0]
 8002b84:	f003 fe2c 	bl	80067e0 <USB_CoreInit>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0d7      	b.n	8002d4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fe86 	bl	80068b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e04a      	b.n	8002c42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	333d      	adds	r3, #61	; 0x3d
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	333c      	adds	r3, #60	; 0x3c
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	b298      	uxth	r0, r3
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3342      	adds	r3, #66	; 0x42
 8002be8:	4602      	mov	r2, r0
 8002bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333f      	adds	r3, #63	; 0x3f
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3344      	adds	r3, #68	; 0x44
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3348      	adds	r3, #72	; 0x48
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3350      	adds	r3, #80	; 0x50
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3af      	bcc.n	8002bac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e044      	b.n	8002cdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3b5      	bcc.n	8002c52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	687e      	ldr	r6, [r7, #4]
 8002cee:	466d      	mov	r5, sp
 8002cf0:	f106 0410 	add.w	r4, r6, #16
 8002cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d04:	1d33      	adds	r3, r6, #4
 8002d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	f003 fdfd 	bl	8006908 <USB_DevInit>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e014      	b.n	8002d4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f80b 	bl	8002d54 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 ffaf 	bl	8006ca6 <USB_DevDisconnect>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	10000003 	.word	0x10000003

08002d9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000

08002dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dea:	f7fe fb8f 	bl	800150c <HAL_GetTick>
 8002dee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df0:	e009      	b.n	8002e06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df2:	f7fe fb8b 	bl	800150c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e00:	d901      	bls.n	8002e06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e022      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e12:	d1ee      	bne.n	8002df2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7fe fb74 	bl	800150c <HAL_GetTick>
 8002e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e26:	e009      	b.n	8002e3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e28:	f7fe fb70 	bl	800150c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e36:	d901      	bls.n	8002e3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e007      	b.n	8002e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e48:	d1ee      	bne.n	8002e28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e29b      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b96      	ldr	r3, [pc, #600]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8c:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62>
 8002e98:	4b90      	ldr	r3, [pc, #576]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x130>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e275      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x7a>
 8002ec8:	4b84      	ldr	r3, [pc, #528]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a83      	ldr	r2, [pc, #524]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x9c>
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7b      	ldr	r2, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a72      	ldr	r2, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd8>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b6c      	ldr	r3, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6b      	ldr	r2, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fae6 	bl	800150c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fae2 	bl	800150c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e229      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fad2 	bl	800150c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe face 	bl	800150c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e215      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x110>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d069      	beq.n	800306e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x190>
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1e9      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	493d      	ldr	r1, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e040      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d023      	beq.n	800303c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a38      	ldr	r2, [pc, #224]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fa84 	bl	800150c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe fa80 	bl	800150c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1c7      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4929      	ldr	r1, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe fa60 	bl	800150c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7fe fa5c 	bl	800150c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1a3      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d038      	beq.n	80030ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d019      	beq.n	80030b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fa3d 	bl	800150c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe fa39 	bl	800150c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e180      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x23a>
 80030b4:	e01a      	b.n	80030ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_OscConfig+0x280>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe fa23 	bl	800150c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fa1f 	bl	800150c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d903      	bls.n	80030e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e166      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
 80030dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a4 	beq.w	8003242 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b89      	ldr	r3, [pc, #548]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a88      	ldr	r2, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b86      	ldr	r3, [pc, #536]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003122:	4b83      	ldr	r3, [pc, #524]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800312e:	4b80      	ldr	r3, [pc, #512]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7f      	ldr	r2, [pc, #508]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7fe f9e7 	bl	800150c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fe f9e3 	bl	800150c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e12a      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x31a>
 8003168:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a6f      	ldr	r2, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x33c>
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a6a      	ldr	r2, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x35e>
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a5b      	ldr	r2, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe f997 	bl	800150c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe f993 	bl	800150c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0d8      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x386>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fe f981 	bl	800150c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe f97d 	bl	800150c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0c2      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a3c      	ldr	r2, [pc, #240]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80ae 	beq.w	80033a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324c:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d06d      	beq.n	8003334 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d14b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe f94e 	bl	800150c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe f94a 	bl	800150c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e091      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe f91c 	bl	800150c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe f918 	bl	800150c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e05f      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x47c>
 80032f6:	e057      	b.n	80033a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f902 	bl	800150c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe f8fe 	bl	800150c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e045      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_OscConfig+0x4d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x4b0>
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x54c>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x558>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d030      	beq.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d129      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d122      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d119      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d10f      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d0      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b67      	ldr	r3, [pc, #412]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 020f 	bic.w	r2, r3, #15
 80033e6:	4965      	ldr	r1, [pc, #404]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b63      	ldr	r3, [pc, #396]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b8      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003422:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a52      	ldr	r2, [pc, #328]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800343a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	494d      	ldr	r1, [pc, #308]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d040      	beq.n	80034dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07f      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e073      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06b      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4936      	ldr	r1, [pc, #216]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fe f82e 	bl	800150c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fe f82a 	bl	800150c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e053      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d210      	bcs.n	800350c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	4922      	ldr	r1, [pc, #136]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e032      	b.n	8003572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4916      	ldr	r1, [pc, #88]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	490e      	ldr	r1, [pc, #56]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354a:	f000 f821 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800354e:	4601      	mov	r1, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_RCC_ClockConfig+0x1cc>)
 800355c:	5cd3      	ldrb	r3, [r2, r3]
 800355e:	fa21 f303 	lsr.w	r3, r1, r3
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1d0>)
 8003564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_ClockConfig+0x1d4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd ff8a 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023c00 	.word	0x40023c00
 8003580:	40023800 	.word	0x40023800
 8003584:	08006db0 	.word	0x08006db0
 8003588:	20000004 	.word	0x20000004
 800358c:	20000008 	.word	0x20000008

08003590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	2300      	movs	r3, #0
 80035a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d007      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x32>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d008      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x38>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 80b4 	bne.w	8003724 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035be:	60bb      	str	r3, [r7, #8]
      break;
 80035c0:	e0b3      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c2:	4b5e      	ldr	r3, [pc, #376]	; (800373c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035c4:	60bb      	str	r3, [r7, #8]
      break;
 80035c6:	e0b0      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c8:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035d2:	4b58      	ldr	r3, [pc, #352]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d04a      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b55      	ldr	r3, [pc, #340]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	f04f 0400 	mov.w	r4, #0
 80035e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	ea03 0501 	and.w	r5, r3, r1
 80035f4:	ea04 0602 	and.w	r6, r4, r2
 80035f8:	4629      	mov	r1, r5
 80035fa:	4632      	mov	r2, r6
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	0154      	lsls	r4, r2, #5
 8003606:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800360a:	014b      	lsls	r3, r1, #5
 800360c:	4619      	mov	r1, r3
 800360e:	4622      	mov	r2, r4
 8003610:	1b49      	subs	r1, r1, r5
 8003612:	eb62 0206 	sbc.w	r2, r2, r6
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f04f 0400 	mov.w	r4, #0
 800361e:	0194      	lsls	r4, r2, #6
 8003620:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003624:	018b      	lsls	r3, r1, #6
 8003626:	1a5b      	subs	r3, r3, r1
 8003628:	eb64 0402 	sbc.w	r4, r4, r2
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	00e2      	lsls	r2, r4, #3
 8003636:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800363a:	00d9      	lsls	r1, r3, #3
 800363c:	460b      	mov	r3, r1
 800363e:	4614      	mov	r4, r2
 8003640:	195b      	adds	r3, r3, r5
 8003642:	eb44 0406 	adc.w	r4, r4, r6
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	0262      	lsls	r2, r4, #9
 8003650:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003654:	0259      	lsls	r1, r3, #9
 8003656:	460b      	mov	r3, r1
 8003658:	4614      	mov	r4, r2
 800365a:	4618      	mov	r0, r3
 800365c:	4621      	mov	r1, r4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	f7fc fde6 	bl	8000238 <__aeabi_uldivmod>
 800366c:	4603      	mov	r3, r0
 800366e:	460c      	mov	r4, r1
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e049      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003674:	4b2f      	ldr	r3, [pc, #188]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	f04f 0400 	mov.w	r4, #0
 800367e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	ea03 0501 	and.w	r5, r3, r1
 800368a:	ea04 0602 	and.w	r6, r4, r2
 800368e:	4629      	mov	r1, r5
 8003690:	4632      	mov	r2, r6
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f04f 0400 	mov.w	r4, #0
 800369a:	0154      	lsls	r4, r2, #5
 800369c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036a0:	014b      	lsls	r3, r1, #5
 80036a2:	4619      	mov	r1, r3
 80036a4:	4622      	mov	r2, r4
 80036a6:	1b49      	subs	r1, r1, r5
 80036a8:	eb62 0206 	sbc.w	r2, r2, r6
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0194      	lsls	r4, r2, #6
 80036b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ba:	018b      	lsls	r3, r1, #6
 80036bc:	1a5b      	subs	r3, r3, r1
 80036be:	eb64 0402 	sbc.w	r4, r4, r2
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	00e2      	lsls	r2, r4, #3
 80036cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036d0:	00d9      	lsls	r1, r3, #3
 80036d2:	460b      	mov	r3, r1
 80036d4:	4614      	mov	r4, r2
 80036d6:	195b      	adds	r3, r3, r5
 80036d8:	eb44 0406 	adc.w	r4, r4, r6
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	02a2      	lsls	r2, r4, #10
 80036e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036ea:	0299      	lsls	r1, r3, #10
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	4621      	mov	r1, r4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f04f 0400 	mov.w	r4, #0
 80036fa:	461a      	mov	r2, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	f7fc fd9b 	bl	8000238 <__aeabi_uldivmod>
 8003702:	4603      	mov	r3, r0
 8003704:	460c      	mov	r4, r1
 8003706:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	60bb      	str	r3, [r7, #8]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003726:	60bb      	str	r3, [r7, #8]
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	68bb      	ldr	r3, [r7, #8]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	00f42400 	.word	0x00f42400
 800373c:	007a1200 	.word	0x007a1200

08003740 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_GetHCLKFreq+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800375c:	f7ff fff0 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003760:	4601      	mov	r1, r0
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0a9b      	lsrs	r3, r3, #10
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4a03      	ldr	r2, [pc, #12]	; (800377c <HAL_RCC_GetPCLK1Freq+0x24>)
 800376e:	5cd3      	ldrb	r3, [r2, r3]
 8003770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40023800 	.word	0x40023800
 800377c:	08006dc0 	.word	0x08006dc0

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003784:	f7ff ffdc 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003788:	4601      	mov	r1, r0
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0b5b      	lsrs	r3, r3, #13
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	fa21 f303 	lsr.w	r3, r1, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40023800 	.word	0x40023800
 80037a4:	08006dc0 	.word	0x08006dc0

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037d0:	4b69      	ldr	r3, [pc, #420]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a68      	ldr	r2, [pc, #416]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037da:	6093      	str	r3, [r2, #8]
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	4964      	ldr	r1, [pc, #400]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d017      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	4959      	ldr	r1, [pc, #356]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003820:	d101      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003822:	2301      	movs	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800382e:	2301      	movs	r3, #1
 8003830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800383e:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	494a      	ldr	r1, [pc, #296]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385c:	d101      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800386a:	2301      	movs	r3, #1
 800386c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 808b 	beq.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	4a39      	ldr	r2, [pc, #228]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	6413      	str	r3, [r2, #64]	; 0x40
 8003898:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038a4:	4b35      	ldr	r3, [pc, #212]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a34      	ldr	r2, [pc, #208]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fe2c 	bl	800150c <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b8:	f7fd fe28 	bl	800150c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	; 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e38d      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038d6:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d035      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d02e      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d114      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fdf0 	bl	800150c <HAL_GetTick>
 800392c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fdec 	bl	800150c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e34f      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0ee      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395e:	d111      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800396e:	400b      	ands	r3, r1
 8003970:	4901      	ldr	r1, [pc, #4]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
 8003976:	e00b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003978:	40023800 	.word	0x40023800
 800397c:	40007000 	.word	0x40007000
 8003980:	0ffffcff 	.word	0x0ffffcff
 8003984:	4bb3      	ldr	r3, [pc, #716]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4ab2      	ldr	r2, [pc, #712]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800398e:	6093      	str	r3, [r2, #8]
 8003990:	4bb0      	ldr	r3, [pc, #704]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	49ad      	ldr	r1, [pc, #692]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d010      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ae:	4ba9      	ldr	r3, [pc, #676]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	4aa7      	ldr	r2, [pc, #668]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039be:	4ba5      	ldr	r3, [pc, #660]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	49a2      	ldr	r1, [pc, #648]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039dc:	4b9d      	ldr	r3, [pc, #628]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ea:	499a      	ldr	r1, [pc, #616]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039fe:	4b95      	ldr	r3, [pc, #596]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a0c:	4991      	ldr	r1, [pc, #580]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a20:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	4989      	ldr	r1, [pc, #548]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a42:	4b84      	ldr	r3, [pc, #528]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4980      	ldr	r1, [pc, #512]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a64:	4b7b      	ldr	r3, [pc, #492]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4978      	ldr	r1, [pc, #480]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a86:	4b73      	ldr	r3, [pc, #460]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f023 020c 	bic.w	r2, r3, #12
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	496f      	ldr	r1, [pc, #444]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	4967      	ldr	r1, [pc, #412]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aca:	4b62      	ldr	r3, [pc, #392]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	495e      	ldr	r1, [pc, #376]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	4956      	ldr	r1, [pc, #344]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	494d      	ldr	r1, [pc, #308]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b30:	4b48      	ldr	r3, [pc, #288]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	4945      	ldr	r1, [pc, #276]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b52:	4b40      	ldr	r3, [pc, #256]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	493c      	ldr	r1, [pc, #240]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b74:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b82:	4934      	ldr	r1, [pc, #208]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d011      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba4:	492b      	ldr	r1, [pc, #172]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be4:	491b      	ldr	r1, [pc, #108]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c08:	4912      	ldr	r1, [pc, #72]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2c:	4909      	ldr	r1, [pc, #36]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	4985      	ldr	r1, [pc, #532]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c6c:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7c:	497c      	ldr	r1, [pc, #496]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d005      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c92:	f040 80d6 	bne.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fc33 	bl	800150c <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003caa:	f7fd fc2f 	bl	800150c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e194      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cbc:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d021      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11d      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cdc:	4b64      	ldr	r3, [pc, #400]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cea:	4b61      	ldr	r3, [pc, #388]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf0:	0e1b      	lsrs	r3, r3, #24
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	019a      	lsls	r2, r3, #6
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	071b      	lsls	r3, r3, #28
 8003d10:	4957      	ldr	r1, [pc, #348]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d02e      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d42:	d129      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d44:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d58:	0f1b      	lsrs	r3, r3, #28
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	019a      	lsls	r2, r3, #6
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	071b      	lsls	r3, r3, #28
 8003d78:	493d      	ldr	r1, [pc, #244]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d86:	f023 021f 	bic.w	r2, r3, #31
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	4937      	ldr	r1, [pc, #220]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003da4:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	0e1b      	lsrs	r3, r3, #24
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	4925      	ldr	r1, [pc, #148]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d011      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	019a      	lsls	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	071b      	lsls	r3, r3, #28
 8003e08:	4919      	ldr	r1, [pc, #100]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fb76 	bl	800150c <HAL_GetTick>
 8003e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e24:	f7fd fb72 	bl	800150c <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0d7      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 80cd 	bne.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e56:	f7fd fb59 	bl	800150c <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e5e:	f7fd fb55 	bl	800150c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d903      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0ba      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e74:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e80:	d0ed      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02e      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d12a      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eb8:	4b4d      	ldr	r3, [pc, #308]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	0f1b      	lsrs	r3, r3, #28
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	019a      	lsls	r2, r3, #6
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	061b      	lsls	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	4944      	ldr	r1, [pc, #272]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ee6:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	493d      	ldr	r1, [pc, #244]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d022      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f14:	d11d      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	0e1b      	lsrs	r3, r3, #24
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f24:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	0f1b      	lsrs	r3, r3, #28
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	4929      	ldr	r1, [pc, #164]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	019a      	lsls	r2, r3, #6
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	4917      	ldr	r1, [pc, #92]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	4911      	ldr	r1, [pc, #68]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbc:	f7fd faa6 	bl	800150c <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fc4:	f7fd faa2 	bl	800150c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e007      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe2:	d1ef      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e084      	b.n	8004110 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fc ffc1 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004046:	d902      	bls.n	800404e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e002      	b.n	8004054 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800404e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800405c:	d007      	beq.n	800406e <HAL_SPI_Init+0x7a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004066:	d002      	beq.n	800406e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800407e:	d903      	bls.n	8004088 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
 8004086:	e002      	b.n	800408e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	ea42 0103 	orr.w	r1, r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0204 	and.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	ea42 0103 	orr.w	r1, r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <HAL_SPI_Receive_DMA+0x3c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413a:	d10b      	bne.n	8004154 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2204      	movs	r2, #4
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f900 	bl	8004350 <HAL_SPI_TransmitReceive_DMA>
 8004150:	4603      	mov	r3, r0
 8004152:	e0f3      	b.n	800433c <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_SPI_Receive_DMA+0x4a>
 800415e:	2302      	movs	r3, #2
 8004160:	e0ec      	b.n	800433c <HAL_SPI_Receive_DMA+0x224>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d002      	beq.n	800417c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004176:	2302      	movs	r3, #2
 8004178:	75fb      	strb	r3, [r7, #23]
    goto error;
 800417a:	e0da      	b.n	8004332 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_SPI_Receive_DMA+0x70>
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800418c:	e0d1      	b.n	8004332 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2204      	movs	r2, #4
 8004192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d2:	d107      	bne.n	80041e4 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041fc:	d908      	bls.n	8004210 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e042      	b.n	8004296 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800421e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	d134      	bne.n	8004296 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800423a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004242:	b29b      	uxth	r3, r3
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d111      	bne.n	8004270 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800425a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004262:	b29b      	uxth	r3, r3
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800426e:	e012      	b.n	8004296 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800427e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004286:	b29b      	uxth	r3, r3
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	3301      	adds	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <HAL_SPI_Receive_DMA+0x22c>)
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	4a29      	ldr	r2, [pc, #164]	; (8004348 <HAL_SPI_Receive_DMA+0x230>)
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_SPI_Receive_DMA+0x234>)
 80042ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	2200      	movs	r2, #0
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	4619      	mov	r1, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f7fd fb0a 	bl	80018e8 <HAL_DMA_Start_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80042f2:	e01e      	b.n	8004332 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d007      	beq.n	8004312 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	080047d1 	.word	0x080047d1
 8004348:	080046b9 	.word	0x080046b9
 800434c:	08004809 	.word	0x08004809

08004350 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_SPI_TransmitReceive_DMA+0x20>
 800436c:	2302      	movs	r3, #2
 800436e:	e16c      	b.n	800464a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800437e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004386:	7dbb      	ldrb	r3, [r7, #22]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d00d      	beq.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d106      	bne.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800439c:	7dbb      	ldrb	r3, [r7, #22]
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043a6:	e14b      	b.n	8004640 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 80043b4:	887b      	ldrh	r3, [r7, #2]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043be:	e13f      	b.n	8004640 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d003      	beq.n	80043d4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2205      	movs	r2, #5
 80043d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800441c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004426:	d908      	bls.n	800443a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	e06f      	b.n	800451a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004448:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004454:	d126      	bne.n	80044a4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004470:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004480:	e010      	b.n	80044a4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004490:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	b29b      	uxth	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	d134      	bne.n	800451a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044be:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d111      	bne.n	80044f4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80044f2:	e012      	b.n	800451a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004502:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800450a:	b29b      	uxth	r3, r3
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b04      	cmp	r3, #4
 8004524:	d108      	bne.n	8004538 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	4a4a      	ldr	r2, [pc, #296]	; (8004654 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	4a49      	ldr	r2, [pc, #292]	; (8004658 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c
 8004536:	e007      	b.n	8004548 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	4a47      	ldr	r2, [pc, #284]	; (800465c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	4a46      	ldr	r2, [pc, #280]	; (8004660 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	4a45      	ldr	r2, [pc, #276]	; (8004664 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800454e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	4619      	mov	r1, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	461a      	mov	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004570:	b29b      	uxth	r3, r3
 8004572:	f7fd f9b9 	bl	80018e8 <HAL_DMA_Start_IT>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00c      	beq.n	8004596 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004594:	e054      	b.n	8004640 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	2200      	movs	r2, #0
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	2200      	movs	r2, #0
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	2200      	movs	r2, #0
 80045bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	2200      	movs	r2, #0
 80045c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4619      	mov	r1, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f7fd f983 	bl	80018e8 <HAL_DMA_Start_IT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004600:	e01e      	b.n	8004640 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d007      	beq.n	8004620 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0220 	orr.w	r2, r2, #32
 800462e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0202 	orr.w	r2, r2, #2
 800463e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	080047d1 	.word	0x080047d1
 8004658:	080046b9 	.word	0x080046b9
 800465c:	080047ed 	.word	0x080047ed
 8004660:	0800473f 	.word	0x0800473f
 8004664:	08004809 	.word	0x08004809

08004668 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c6:	f7fc ff21 	bl	800150c <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	d02a      	beq.n	8004732 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0220 	bic.w	r2, r2, #32
 80046ea:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0203 	bic.w	r2, r2, #3
 80046fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	2164      	movs	r1, #100	; 0x64
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f978 	bl	80049f6 <SPI_EndRxTransaction>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff ffba 	bl	80046a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004730:	e002      	b.n	8004738 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7fc fb1e 	bl	8000d74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800474c:	f7fc fede 	bl	800150c <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d030      	beq.n	80047c4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0220 	bic.w	r2, r2, #32
 8004770:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	2164      	movs	r1, #100	; 0x64
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f995 	bl	8004aa6 <SPI_EndRxTxTransaction>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0203 	bic.w	r2, r2, #3
 800479c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff ff71 	bl	80046a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80047c2:	e002      	b.n	80047ca <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff ff4f 	bl	8004668 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff4c 	bl	800467c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff ff48 	bl	8004690 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0203 	bic.w	r2, r2, #3
 8004824:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f043 0210 	orr.w	r2, r3, #16
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff32 	bl	80046a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004858:	e04c      	b.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d048      	beq.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004862:	f7fc fe53 	bl	800150c <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d902      	bls.n	8004878 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d13d      	bne.n	80048f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004886:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004890:	d111      	bne.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489a:	d004      	beq.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a4:	d107      	bne.n	80048b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d10f      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e00f      	b.n	8004914 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	d1a3      	bne.n	800485a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800492a:	e057      	b.n	80049dc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004932:	d106      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d048      	beq.n	80049dc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800494a:	f7fc fddf 	bl	800150c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d902      	bls.n	8004960 <SPI_WaitFifoStateUntilTimeout+0x44>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d13d      	bne.n	80049dc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800496e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004978:	d111      	bne.n	800499e <SPI_WaitFifoStateUntilTimeout+0x82>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004982:	d004      	beq.n	800498e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498c:	d107      	bne.n	800499e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d10f      	bne.n	80049c8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e008      	b.n	80049ee <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d19f      	bne.n	800492c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af02      	add	r7, sp, #8
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d111      	bne.n	8004a30 <SPI_EndRxTransaction+0x3a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a14:	d004      	beq.n	8004a20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d107      	bne.n	8004a30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2180      	movs	r1, #128	; 0x80
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff ff04 	bl	8004848 <SPI_WaitFlagStateUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e023      	b.n	8004a9e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5e:	d11d      	bne.n	8004a9c <SPI_EndRxTransaction+0xa6>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d004      	beq.n	8004a74 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d113      	bne.n	8004a9c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff ff4b 	bl	800491c <SPI_WaitFifoStateUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a90:	f043 0220 	orr.w	r2, r3, #32
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e000      	b.n	8004a9e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af02      	add	r7, sp, #8
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff2c 	bl	800491c <SPI_WaitFifoStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e027      	b.n	8004b2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff feaf 	bl	8004848 <SPI_WaitFlagStateUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e014      	b.n	8004b2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ff05 	bl	800491c <SPI_WaitFifoStateUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e000      	b.n	8004b2a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e01d      	b.n	8004b80 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc fabb 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fc6b 	bl	800544c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f815 	bl	8004bde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fc40 	bl	800544c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d841      	bhi.n	8004c88 <HAL_TIM_PWM_Start_IT+0x94>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <HAL_TIM_PWM_Start_IT+0x18>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c89 	.word	0x08004c89
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c53 	.word	0x08004c53
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c65 	.word	0x08004c65
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c77 	.word	0x08004c77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0202 	orr.w	r2, r2, #2
 8004c4e:	60da      	str	r2, [r3, #12]
      break;
 8004c50:	e01b      	b.n	8004c8a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0204 	orr.w	r2, r2, #4
 8004c60:	60da      	str	r2, [r3, #12]
      break;
 8004c62:	e012      	b.n	8004c8a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0208 	orr.w	r2, r2, #8
 8004c72:	60da      	str	r2, [r3, #12]
      break;
 8004c74:	e009      	b.n	8004c8a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0210 	orr.w	r2, r2, #16
 8004c84:	60da      	str	r2, [r3, #12]
      break;
 8004c86:	e000      	b.n	8004c8a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004c88:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fffa 	bl	8005c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <HAL_TIM_PWM_Start_IT+0x108>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_PWM_Start_IT+0xb8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <HAL_TIM_PWM_Start_IT+0x10c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIM_PWM_Start_IT+0xbc>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_TIM_PWM_Start_IT+0xbe>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <HAL_TIM_PWM_Start_IT+0x110>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_TIM_PWM_Start_IT+0xfc>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d007      	beq.n	8004cf0 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40010400 	.word	0x40010400
 8004d04:	00010007 	.word	0x00010007

08004d08 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e02d      	b.n	8004d78 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f825 	bl	8004d80 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f000 fb7f 	bl	800544c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0208 	bic.w	r2, r2, #8
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0202 	mvn.w	r2, #2
 8004dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fb1a 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fb0c 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fb1d 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0204 	mvn.w	r2, #4
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 faf0 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fae2 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 faf3 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0308 	and.w	r3, r3, #8
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0208 	mvn.w	r2, #8
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fac6 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fab8 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fac9 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa9c 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa8e 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa9f 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10e      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0201 	mvn.w	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fb ff5a 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d10e      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d107      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 ffe0 	bl	8005f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 ffd3 	bl	8005f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa4d 	bl	8005438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d10e      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0220 	mvn.w	r2, #32
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 ff93 	bl	8005ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e105      	b.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x226>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b14      	cmp	r3, #20
 8005002:	f200 80f0 	bhi.w	80051e6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005061 	.word	0x08005061
 8005010:	080051e7 	.word	0x080051e7
 8005014:	080051e7 	.word	0x080051e7
 8005018:	080051e7 	.word	0x080051e7
 800501c:	080050a1 	.word	0x080050a1
 8005020:	080051e7 	.word	0x080051e7
 8005024:	080051e7 	.word	0x080051e7
 8005028:	080051e7 	.word	0x080051e7
 800502c:	080050e3 	.word	0x080050e3
 8005030:	080051e7 	.word	0x080051e7
 8005034:	080051e7 	.word	0x080051e7
 8005038:	080051e7 	.word	0x080051e7
 800503c:	08005123 	.word	0x08005123
 8005040:	080051e7 	.word	0x080051e7
 8005044:	080051e7 	.word	0x080051e7
 8005048:	080051e7 	.word	0x080051e7
 800504c:	08005165 	.word	0x08005165
 8005050:	080051e7 	.word	0x080051e7
 8005054:	080051e7 	.word	0x080051e7
 8005058:	080051e7 	.word	0x080051e7
 800505c:	080051a5 	.word	0x080051a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa90 	bl	800558c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0208 	orr.w	r2, r2, #8
 800507a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6999      	ldr	r1, [r3, #24]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	619a      	str	r2, [r3, #24]
      break;
 800509e:	e0a3      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fae2 	bl	8005670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	619a      	str	r2, [r3, #24]
      break;
 80050e0:	e082      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fb39 	bl	8005760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0208 	orr.w	r2, r2, #8
 80050fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0204 	bic.w	r2, r2, #4
 800510c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69d9      	ldr	r1, [r3, #28]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	61da      	str	r2, [r3, #28]
      break;
 8005120:	e062      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fb8f 	bl	800584c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	021a      	lsls	r2, r3, #8
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	61da      	str	r2, [r3, #28]
      break;
 8005162:	e041      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fbc6 	bl	80058fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051a2:	e021      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fbf8 	bl	80059a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e4:	e000      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80051e6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIM_ConfigClockSource+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e0a6      	b.n	800536a <HAL_TIM_ConfigClockSource+0x166>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4b4f      	ldr	r3, [pc, #316]	; (8005374 <HAL_TIM_ConfigClockSource+0x170>)
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d067      	beq.n	8005324 <HAL_TIM_ConfigClockSource+0x120>
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d80b      	bhi.n	8005270 <HAL_TIM_ConfigClockSource+0x6c>
 8005258:	2b10      	cmp	r3, #16
 800525a:	d073      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0x140>
 800525c:	2b10      	cmp	r3, #16
 800525e:	d802      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x62>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d06f      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005264:	e078      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005266:	2b20      	cmp	r3, #32
 8005268:	d06c      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0x140>
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d06a      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800526e:	e073      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005270:	2b70      	cmp	r3, #112	; 0x70
 8005272:	d00d      	beq.n	8005290 <HAL_TIM_ConfigClockSource+0x8c>
 8005274:	2b70      	cmp	r3, #112	; 0x70
 8005276:	d804      	bhi.n	8005282 <HAL_TIM_ConfigClockSource+0x7e>
 8005278:	2b50      	cmp	r3, #80	; 0x50
 800527a:	d033      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0xe0>
 800527c:	2b60      	cmp	r3, #96	; 0x60
 800527e:	d041      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005280:	e06a      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d066      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x152>
 8005288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528c:	d017      	beq.n	80052be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800528e:	e063      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f000 fcd4 	bl	8005c4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]
      break;
 80052bc:	e04c      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f000 fcbd 	bl	8005c4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e0:	609a      	str	r2, [r3, #8]
      break;
 80052e2:	e039      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6859      	ldr	r1, [r3, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	461a      	mov	r2, r3
 80052f2:	f000 fc31 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2150      	movs	r1, #80	; 0x50
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fc8a 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 8005302:	e029      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	461a      	mov	r2, r3
 8005312:	f000 fc50 	bl	8005bb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2160      	movs	r1, #96	; 0x60
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fc7a 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 8005322:	e019      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	461a      	mov	r2, r3
 8005332:	f000 fc11 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2140      	movs	r1, #64	; 0x40
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fc6a 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 8005342:	e009      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 fc61 	bl	8005c16 <TIM_ITRx_SetConfig>
      break;
 8005354:	e000      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	fffeff88 	.word	0xfffeff88

08005378 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIM_SlaveConfigSynchro+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e031      	b.n	80053f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb50 	bl	8005a48 <TIM_SlaveTimer_SetConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d009      	beq.n	80053c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e018      	b.n	80053f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a40      	ldr	r2, [pc, #256]	; (8005560 <TIM_Base_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546a:	d00f      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3d      	ldr	r2, [pc, #244]	; (8005564 <TIM_Base_SetConfig+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3c      	ldr	r2, [pc, #240]	; (8005568 <TIM_Base_SetConfig+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3b      	ldr	r2, [pc, #236]	; (800556c <TIM_Base_SetConfig+0x120>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3a      	ldr	r2, [pc, #232]	; (8005570 <TIM_Base_SetConfig+0x124>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <TIM_Base_SetConfig+0x114>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d027      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <TIM_Base_SetConfig+0x118>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d023      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <TIM_Base_SetConfig+0x11c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <TIM_Base_SetConfig+0x120>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <TIM_Base_SetConfig+0x124>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d017      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a28      	ldr	r2, [pc, #160]	; (8005574 <TIM_Base_SetConfig+0x128>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a27      	ldr	r2, [pc, #156]	; (8005578 <TIM_Base_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <TIM_Base_SetConfig+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <TIM_Base_SetConfig+0x134>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a24      	ldr	r2, [pc, #144]	; (8005584 <TIM_Base_SetConfig+0x138>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a23      	ldr	r2, [pc, #140]	; (8005588 <TIM_Base_SetConfig+0x13c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d108      	bne.n	8005510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <TIM_Base_SetConfig+0x114>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0xf8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <TIM_Base_SetConfig+0x124>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	615a      	str	r2, [r3, #20]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40001800 	.word	0x40001800
 8005584:	40001c00 	.word	0x40001c00
 8005588:	40002000 	.word	0x40002000

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <TIM_OC1_SetConfig+0xd8>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 0302 	bic.w	r3, r3, #2
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC1_SetConfig+0xdc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC1_SetConfig+0x64>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_OC1_SetConfig+0xe0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0308 	bic.w	r3, r3, #8
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC1_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC1_SetConfig+0x8e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <TIM_OC1_SetConfig+0xe0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d111      	bne.n	800563e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	fffeff8f 	.word	0xfffeff8f
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b2e      	ldr	r3, [pc, #184]	; (8005754 <TIM_OC2_SetConfig+0xe4>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a23      	ldr	r2, [pc, #140]	; (8005758 <TIM_OC2_SetConfig+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC2_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a22      	ldr	r2, [pc, #136]	; (800575c <TIM_OC2_SetConfig+0xec>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10d      	bne.n	80056f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <TIM_OC2_SetConfig+0xe8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC2_SetConfig+0x94>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC2_SetConfig+0xec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d113      	bne.n	800572c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800570a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	feff8fff 	.word	0xfeff8fff
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <TIM_OC3_SetConfig+0xe0>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a22      	ldr	r2, [pc, #136]	; (8005844 <TIM_OC3_SetConfig+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC3_SetConfig+0x66>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a21      	ldr	r2, [pc, #132]	; (8005848 <TIM_OC3_SetConfig+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10d      	bne.n	80057e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a17      	ldr	r2, [pc, #92]	; (8005844 <TIM_OC3_SetConfig+0xe4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_OC3_SetConfig+0x92>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC3_SetConfig+0xe8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d113      	bne.n	800581a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	fffeff8f 	.word	0xfffeff8f
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <TIM_OC4_SetConfig+0xa4>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <TIM_OC4_SetConfig+0xa8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC4_SetConfig+0x68>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <TIM_OC4_SetConfig+0xac>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d109      	bne.n	80058c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	feff8fff 	.word	0xfeff8fff
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <TIM_OC5_SetConfig+0x98>)
 8005928:	4013      	ands	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800593c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <TIM_OC5_SetConfig+0x9c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC5_SetConfig+0x5e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a11      	ldr	r2, [pc, #68]	; (800599c <TIM_OC5_SetConfig+0xa0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d109      	bne.n	800596e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	fffeff8f 	.word	0xfffeff8f
 8005998:	40010000 	.word	0x40010000
 800599c:	40010400 	.word	0x40010400

080059a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <TIM_OC6_SetConfig+0x9c>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <TIM_OC6_SetConfig+0xa0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC6_SetConfig+0x60>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <TIM_OC6_SetConfig+0xa4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d109      	bne.n	8005a14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	feff8fff 	.word	0xfeff8fff
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <TIM_SlaveTimer_SetConfig+0x10c>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b30      	cmp	r3, #48	; 0x30
 8005a8c:	d05c      	beq.n	8005b48 <TIM_SlaveTimer_SetConfig+0x100>
 8005a8e:	2b30      	cmp	r3, #48	; 0x30
 8005a90:	d806      	bhi.n	8005aa0 <TIM_SlaveTimer_SetConfig+0x58>
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d058      	beq.n	8005b48 <TIM_SlaveTimer_SetConfig+0x100>
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d056      	beq.n	8005b48 <TIM_SlaveTimer_SetConfig+0x100>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d054      	beq.n	8005b48 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005a9e:	e054      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005aa0:	2b50      	cmp	r3, #80	; 0x50
 8005aa2:	d03d      	beq.n	8005b20 <TIM_SlaveTimer_SetConfig+0xd8>
 8005aa4:	2b50      	cmp	r3, #80	; 0x50
 8005aa6:	d802      	bhi.n	8005aae <TIM_SlaveTimer_SetConfig+0x66>
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d010      	beq.n	8005ace <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005aac:	e04d      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005aae:	2b60      	cmp	r3, #96	; 0x60
 8005ab0:	d040      	beq.n	8005b34 <TIM_SlaveTimer_SetConfig+0xec>
 8005ab2:	2b70      	cmp	r3, #112	; 0x70
 8005ab4:	d000      	beq.n	8005ab8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005ab6:	e048      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f000 f8c0 	bl	8005c4c <TIM_ETR_SetConfig>
      break;
 8005acc:	e03d      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d101      	bne.n	8005ada <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e038      	b.n	8005b4c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b00:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	621a      	str	r2, [r3, #32]
      break;
 8005b1e:	e014      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 f813 	bl	8005b58 <TIM_TI1_ConfigInputStage>
      break;
 8005b32:	e00a      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	461a      	mov	r2, r3
 8005b42:	f000 f838 	bl	8005bb6 <TIM_TI2_ConfigInputStage>
      break;
 8005b46:	e000      	b.n	8005b4a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005b48:	bf00      	nop
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	fffefff8 	.word	0xfffefff8

08005b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 030a 	bic.w	r3, r3, #10
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f023 0210 	bic.w	r2, r3, #16
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	031b      	lsls	r3, r3, #12
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f043 0307 	orr.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e06d      	b.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d108      	bne.n	8005d36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d022      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d01d      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10c      	bne.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40001800 	.word	0x40001800

08005df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e065      	b.n	8005edc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d115      	bne.n	8005eca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	051b      	lsls	r3, r3, #20
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e040      	b.n	8005fc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fb f960 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2224      	movs	r2, #36	; 0x24
 8005f58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0201 	bic.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f82c 	bl	8005fc8 <UART_SetConfig>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e022      	b.n	8005fc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 faca 	bl	800651c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb51 	bl	8006660 <UART_CheckIdleState>
 8005fbe:	4603      	mov	r3, r0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4bb1      	ldr	r3, [pc, #708]	; (80062bc <UART_SetConfig+0x2f4>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	6939      	ldr	r1, [r7, #16]
 8006000:	430b      	orrs	r3, r1
 8006002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	430a      	orrs	r2, r1
 800603c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a9f      	ldr	r2, [pc, #636]	; (80062c0 <UART_SetConfig+0x2f8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d121      	bne.n	800608c <UART_SetConfig+0xc4>
 8006048:	4b9e      	ldr	r3, [pc, #632]	; (80062c4 <UART_SetConfig+0x2fc>)
 800604a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d816      	bhi.n	8006084 <UART_SetConfig+0xbc>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x94>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	0800606d 	.word	0x0800606d
 8006060:	08006079 	.word	0x08006079
 8006064:	08006073 	.word	0x08006073
 8006068:	0800607f 	.word	0x0800607f
 800606c:	2301      	movs	r3, #1
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e151      	b.n	8006316 <UART_SetConfig+0x34e>
 8006072:	2302      	movs	r3, #2
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e14e      	b.n	8006316 <UART_SetConfig+0x34e>
 8006078:	2304      	movs	r3, #4
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e14b      	b.n	8006316 <UART_SetConfig+0x34e>
 800607e:	2308      	movs	r3, #8
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e148      	b.n	8006316 <UART_SetConfig+0x34e>
 8006084:	2310      	movs	r3, #16
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	bf00      	nop
 800608a:	e144      	b.n	8006316 <UART_SetConfig+0x34e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a8d      	ldr	r2, [pc, #564]	; (80062c8 <UART_SetConfig+0x300>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d134      	bne.n	8006100 <UART_SetConfig+0x138>
 8006096:	4b8b      	ldr	r3, [pc, #556]	; (80062c4 <UART_SetConfig+0x2fc>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d829      	bhi.n	80060f8 <UART_SetConfig+0x130>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0xe4>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e1 	.word	0x080060e1
 80060b0:	080060f9 	.word	0x080060f9
 80060b4:	080060f9 	.word	0x080060f9
 80060b8:	080060f9 	.word	0x080060f9
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	080060f9 	.word	0x080060f9
 80060cc:	080060e7 	.word	0x080060e7
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	080060f9 	.word	0x080060f9
 80060dc:	080060f3 	.word	0x080060f3
 80060e0:	2300      	movs	r3, #0
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e117      	b.n	8006316 <UART_SetConfig+0x34e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e114      	b.n	8006316 <UART_SetConfig+0x34e>
 80060ec:	2304      	movs	r3, #4
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e111      	b.n	8006316 <UART_SetConfig+0x34e>
 80060f2:	2308      	movs	r3, #8
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e10e      	b.n	8006316 <UART_SetConfig+0x34e>
 80060f8:	2310      	movs	r3, #16
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	bf00      	nop
 80060fe:	e10a      	b.n	8006316 <UART_SetConfig+0x34e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a71      	ldr	r2, [pc, #452]	; (80062cc <UART_SetConfig+0x304>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d120      	bne.n	800614c <UART_SetConfig+0x184>
 800610a:	4b6e      	ldr	r3, [pc, #440]	; (80062c4 <UART_SetConfig+0x2fc>)
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006110:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006114:	2b10      	cmp	r3, #16
 8006116:	d00f      	beq.n	8006138 <UART_SetConfig+0x170>
 8006118:	2b10      	cmp	r3, #16
 800611a:	d802      	bhi.n	8006122 <UART_SetConfig+0x15a>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <UART_SetConfig+0x164>
 8006120:	e010      	b.n	8006144 <UART_SetConfig+0x17c>
 8006122:	2b20      	cmp	r3, #32
 8006124:	d005      	beq.n	8006132 <UART_SetConfig+0x16a>
 8006126:	2b30      	cmp	r3, #48	; 0x30
 8006128:	d009      	beq.n	800613e <UART_SetConfig+0x176>
 800612a:	e00b      	b.n	8006144 <UART_SetConfig+0x17c>
 800612c:	2300      	movs	r3, #0
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e0f1      	b.n	8006316 <UART_SetConfig+0x34e>
 8006132:	2302      	movs	r3, #2
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e0ee      	b.n	8006316 <UART_SetConfig+0x34e>
 8006138:	2304      	movs	r3, #4
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e0eb      	b.n	8006316 <UART_SetConfig+0x34e>
 800613e:	2308      	movs	r3, #8
 8006140:	77fb      	strb	r3, [r7, #31]
 8006142:	e0e8      	b.n	8006316 <UART_SetConfig+0x34e>
 8006144:	2310      	movs	r3, #16
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	bf00      	nop
 800614a:	e0e4      	b.n	8006316 <UART_SetConfig+0x34e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5f      	ldr	r2, [pc, #380]	; (80062d0 <UART_SetConfig+0x308>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d120      	bne.n	8006198 <UART_SetConfig+0x1d0>
 8006156:	4b5b      	ldr	r3, [pc, #364]	; (80062c4 <UART_SetConfig+0x2fc>)
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d00f      	beq.n	8006184 <UART_SetConfig+0x1bc>
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d802      	bhi.n	800616e <UART_SetConfig+0x1a6>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <UART_SetConfig+0x1b0>
 800616c:	e010      	b.n	8006190 <UART_SetConfig+0x1c8>
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d005      	beq.n	800617e <UART_SetConfig+0x1b6>
 8006172:	2bc0      	cmp	r3, #192	; 0xc0
 8006174:	d009      	beq.n	800618a <UART_SetConfig+0x1c2>
 8006176:	e00b      	b.n	8006190 <UART_SetConfig+0x1c8>
 8006178:	2300      	movs	r3, #0
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e0cb      	b.n	8006316 <UART_SetConfig+0x34e>
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e0c8      	b.n	8006316 <UART_SetConfig+0x34e>
 8006184:	2304      	movs	r3, #4
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e0c5      	b.n	8006316 <UART_SetConfig+0x34e>
 800618a:	2308      	movs	r3, #8
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e0c2      	b.n	8006316 <UART_SetConfig+0x34e>
 8006190:	2310      	movs	r3, #16
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	bf00      	nop
 8006196:	e0be      	b.n	8006316 <UART_SetConfig+0x34e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <UART_SetConfig+0x30c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d124      	bne.n	80061ec <UART_SetConfig+0x224>
 80061a2:	4b48      	ldr	r3, [pc, #288]	; (80062c4 <UART_SetConfig+0x2fc>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b0:	d012      	beq.n	80061d8 <UART_SetConfig+0x210>
 80061b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b6:	d802      	bhi.n	80061be <UART_SetConfig+0x1f6>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <UART_SetConfig+0x204>
 80061bc:	e012      	b.n	80061e4 <UART_SetConfig+0x21c>
 80061be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c2:	d006      	beq.n	80061d2 <UART_SetConfig+0x20a>
 80061c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c8:	d009      	beq.n	80061de <UART_SetConfig+0x216>
 80061ca:	e00b      	b.n	80061e4 <UART_SetConfig+0x21c>
 80061cc:	2300      	movs	r3, #0
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e0a1      	b.n	8006316 <UART_SetConfig+0x34e>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e09e      	b.n	8006316 <UART_SetConfig+0x34e>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e09b      	b.n	8006316 <UART_SetConfig+0x34e>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e098      	b.n	8006316 <UART_SetConfig+0x34e>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	bf00      	nop
 80061ea:	e094      	b.n	8006316 <UART_SetConfig+0x34e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a39      	ldr	r2, [pc, #228]	; (80062d8 <UART_SetConfig+0x310>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d124      	bne.n	8006240 <UART_SetConfig+0x278>
 80061f6:	4b33      	ldr	r3, [pc, #204]	; (80062c4 <UART_SetConfig+0x2fc>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006204:	d012      	beq.n	800622c <UART_SetConfig+0x264>
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d802      	bhi.n	8006212 <UART_SetConfig+0x24a>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <UART_SetConfig+0x258>
 8006210:	e012      	b.n	8006238 <UART_SetConfig+0x270>
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006216:	d006      	beq.n	8006226 <UART_SetConfig+0x25e>
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621c:	d009      	beq.n	8006232 <UART_SetConfig+0x26a>
 800621e:	e00b      	b.n	8006238 <UART_SetConfig+0x270>
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e077      	b.n	8006316 <UART_SetConfig+0x34e>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e074      	b.n	8006316 <UART_SetConfig+0x34e>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e071      	b.n	8006316 <UART_SetConfig+0x34e>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e06e      	b.n	8006316 <UART_SetConfig+0x34e>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	bf00      	nop
 800623e:	e06a      	b.n	8006316 <UART_SetConfig+0x34e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a25      	ldr	r2, [pc, #148]	; (80062dc <UART_SetConfig+0x314>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d124      	bne.n	8006294 <UART_SetConfig+0x2cc>
 800624a:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <UART_SetConfig+0x2fc>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	d012      	beq.n	8006280 <UART_SetConfig+0x2b8>
 800625a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625e:	d802      	bhi.n	8006266 <UART_SetConfig+0x29e>
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <UART_SetConfig+0x2ac>
 8006264:	e012      	b.n	800628c <UART_SetConfig+0x2c4>
 8006266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626a:	d006      	beq.n	800627a <UART_SetConfig+0x2b2>
 800626c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006270:	d009      	beq.n	8006286 <UART_SetConfig+0x2be>
 8006272:	e00b      	b.n	800628c <UART_SetConfig+0x2c4>
 8006274:	2300      	movs	r3, #0
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e04d      	b.n	8006316 <UART_SetConfig+0x34e>
 800627a:	2302      	movs	r3, #2
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e04a      	b.n	8006316 <UART_SetConfig+0x34e>
 8006280:	2304      	movs	r3, #4
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e047      	b.n	8006316 <UART_SetConfig+0x34e>
 8006286:	2308      	movs	r3, #8
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e044      	b.n	8006316 <UART_SetConfig+0x34e>
 800628c:	2310      	movs	r3, #16
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	bf00      	nop
 8006292:	e040      	b.n	8006316 <UART_SetConfig+0x34e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a11      	ldr	r2, [pc, #68]	; (80062e0 <UART_SetConfig+0x318>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d139      	bne.n	8006312 <UART_SetConfig+0x34a>
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <UART_SetConfig+0x2fc>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ac:	d027      	beq.n	80062fe <UART_SetConfig+0x336>
 80062ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b2:	d817      	bhi.n	80062e4 <UART_SetConfig+0x31c>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01c      	beq.n	80062f2 <UART_SetConfig+0x32a>
 80062b8:	e027      	b.n	800630a <UART_SetConfig+0x342>
 80062ba:	bf00      	nop
 80062bc:	efff69f3 	.word	0xefff69f3
 80062c0:	40011000 	.word	0x40011000
 80062c4:	40023800 	.word	0x40023800
 80062c8:	40004400 	.word	0x40004400
 80062cc:	40004800 	.word	0x40004800
 80062d0:	40004c00 	.word	0x40004c00
 80062d4:	40005000 	.word	0x40005000
 80062d8:	40011400 	.word	0x40011400
 80062dc:	40007800 	.word	0x40007800
 80062e0:	40007c00 	.word	0x40007c00
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	d006      	beq.n	80062f8 <UART_SetConfig+0x330>
 80062ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062ee:	d009      	beq.n	8006304 <UART_SetConfig+0x33c>
 80062f0:	e00b      	b.n	800630a <UART_SetConfig+0x342>
 80062f2:	2300      	movs	r3, #0
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e00e      	b.n	8006316 <UART_SetConfig+0x34e>
 80062f8:	2302      	movs	r3, #2
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e00b      	b.n	8006316 <UART_SetConfig+0x34e>
 80062fe:	2304      	movs	r3, #4
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e008      	b.n	8006316 <UART_SetConfig+0x34e>
 8006304:	2308      	movs	r3, #8
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e005      	b.n	8006316 <UART_SetConfig+0x34e>
 800630a:	2310      	movs	r3, #16
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	bf00      	nop
 8006310:	e001      	b.n	8006316 <UART_SetConfig+0x34e>
 8006312:	2310      	movs	r3, #16
 8006314:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631e:	d17f      	bne.n	8006420 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006320:	7ffb      	ldrb	r3, [r7, #31]
 8006322:	2b08      	cmp	r3, #8
 8006324:	d85c      	bhi.n	80063e0 <UART_SetConfig+0x418>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x364>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006351 	.word	0x08006351
 8006330:	08006371 	.word	0x08006371
 8006334:	08006391 	.word	0x08006391
 8006338:	080063e1 	.word	0x080063e1
 800633c:	080063a9 	.word	0x080063a9
 8006340:	080063e1 	.word	0x080063e1
 8006344:	080063e1 	.word	0x080063e1
 8006348:	080063e1 	.word	0x080063e1
 800634c:	080063c9 	.word	0x080063c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd fa02 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 8006354:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	005a      	lsls	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	b29b      	uxth	r3, r3
 800636c:	61bb      	str	r3, [r7, #24]
        break;
 800636e:	e03a      	b.n	80063e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006370:	f7fd fa06 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8006374:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	005a      	lsls	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	441a      	add	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	b29b      	uxth	r3, r3
 800638c:	61bb      	str	r3, [r7, #24]
        break;
 800638e:	e02a      	b.n	80063e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	085a      	lsrs	r2, r3, #1
 8006396:	4b5f      	ldr	r3, [pc, #380]	; (8006514 <UART_SetConfig+0x54c>)
 8006398:	4413      	add	r3, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6852      	ldr	r2, [r2, #4]
 800639e:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	61bb      	str	r3, [r7, #24]
        break;
 80063a6:	e01e      	b.n	80063e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a8:	f7fd f8f2 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80063ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	005a      	lsls	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	61bb      	str	r3, [r7, #24]
        break;
 80063c6:	e00e      	b.n	80063e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	b29b      	uxth	r3, r3
 80063dc:	61bb      	str	r3, [r7, #24]
        break;
 80063de:	e002      	b.n	80063e6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
        break;
 80063e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	d916      	bls.n	800641a <UART_SetConfig+0x452>
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f2:	d212      	bcs.n	800641a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f023 030f 	bic.w	r3, r3, #15
 80063fc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	b29a      	uxth	r2, r3
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	4313      	orrs	r3, r2
 800640e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	897a      	ldrh	r2, [r7, #10]
 8006416:	60da      	str	r2, [r3, #12]
 8006418:	e070      	b.n	80064fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
 800641e:	e06d      	b.n	80064fc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	2b08      	cmp	r3, #8
 8006424:	d859      	bhi.n	80064da <UART_SetConfig+0x512>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x464>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006451 	.word	0x08006451
 8006430:	0800646f 	.word	0x0800646f
 8006434:	0800648d 	.word	0x0800648d
 8006438:	080064db 	.word	0x080064db
 800643c:	080064a5 	.word	0x080064a5
 8006440:	080064db 	.word	0x080064db
 8006444:	080064db 	.word	0x080064db
 8006448:	080064db 	.word	0x080064db
 800644c:	080064c3 	.word	0x080064c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7fd f982 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 8006454:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	085a      	lsrs	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	441a      	add	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	61bb      	str	r3, [r7, #24]
        break;
 800646c:	e038      	b.n	80064e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646e:	f7fd f987 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8006472:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	085a      	lsrs	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	b29b      	uxth	r3, r3
 8006488:	61bb      	str	r3, [r7, #24]
        break;
 800648a:	e029      	b.n	80064e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	085a      	lsrs	r2, r3, #1
 8006492:	4b21      	ldr	r3, [pc, #132]	; (8006518 <UART_SetConfig+0x550>)
 8006494:	4413      	add	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6852      	ldr	r2, [r2, #4]
 800649a:	fbb3 f3f2 	udiv	r3, r3, r2
 800649e:	b29b      	uxth	r3, r3
 80064a0:	61bb      	str	r3, [r7, #24]
        break;
 80064a2:	e01d      	b.n	80064e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a4:	f7fd f874 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 80064a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	085a      	lsrs	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	441a      	add	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	b29b      	uxth	r3, r3
 80064be:	61bb      	str	r3, [r7, #24]
        break;
 80064c0:	e00e      	b.n	80064e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	61bb      	str	r3, [r7, #24]
        break;
 80064d8:	e002      	b.n	80064e0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]
        break;
 80064de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	d908      	bls.n	80064f8 <UART_SetConfig+0x530>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ec:	d204      	bcs.n	80064f8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e001      	b.n	80064fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	01e84800 	.word	0x01e84800
 8006518:	00f42400 	.word	0x00f42400

0800651c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01a      	beq.n	8006632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800661a:	d10a      	bne.n	8006632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800666e:	f7fa ff4d 	bl	800150c <HAL_GetTick>
 8006672:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b08      	cmp	r3, #8
 8006680:	d10e      	bne.n	80066a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006682:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f82a 	bl	80066ea <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e020      	b.n	80066e2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d10e      	bne.n	80066cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f814 	bl	80066ea <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e00a      	b.n	80066e2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fa:	e05d      	b.n	80067b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d059      	beq.n	80067b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006704:	f7fa ff02 	bl	800150c <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	429a      	cmp	r2, r3
 8006712:	d302      	bcc.n	800671a <UART_WaitOnFlagUntilTimeout+0x30>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11b      	bne.n	8006752 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006728:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0201 	bic.w	r2, r2, #1
 8006738:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e042      	b.n	80067d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d02b      	beq.n	80067b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676e:	d123      	bne.n	80067b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006778:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006788:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e00f      	b.n	80067d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	bf0c      	ite	eq
 80067c8:	2301      	moveq	r3, #1
 80067ca:	2300      	movne	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d092      	beq.n	80066fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067e0:	b084      	sub	sp, #16
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	f107 001c 	add.w	r0, r7, #28
 80067ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d120      	bne.n	800683a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	4b20      	ldr	r3, [pc, #128]	; (800688c <USB_CoreInit+0xac>)
 800680a:	4013      	ands	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800681c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d105      	bne.n	800682e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa52 	bl	8006cd8 <USB_CoreReset>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	e010      	b.n	800685c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa46 	bl	8006cd8 <USB_CoreReset>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10b      	bne.n	800687a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f043 0206 	orr.w	r2, r3, #6
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006886:	b004      	add	sp, #16
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	ffbdffbf 	.word	0xffbdffbf

08006890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f023 0201 	bic.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d106      	bne.n	80068de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]
 80068dc:	e00b      	b.n	80068f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
 80068f0:	e001      	b.n	80068f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e003      	b.n	80068fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068f6:	2032      	movs	r0, #50	; 0x32
 80068f8:	f7fa fe14 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006908:	b084      	sub	sp, #16
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e009      	b.n	800693c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3340      	adds	r3, #64	; 0x40
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	2200      	movs	r2, #0
 8006934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3301      	adds	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0e      	cmp	r3, #14
 8006940:	d9f2      	bls.n	8006928 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d11c      	bne.n	8006982 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006956:	f043 0302 	orr.w	r3, r3, #2
 800695a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e005      	b.n	800698e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006994:	461a      	mov	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	4619      	mov	r1, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a8:	461a      	mov	r2, r3
 80069aa:	680b      	ldr	r3, [r1, #0]
 80069ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10c      	bne.n	80069ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069ba:	2100      	movs	r1, #0
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f959 	bl	8006c74 <USB_SetDevSpeed>
 80069c2:	e018      	b.n	80069f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069c4:	2101      	movs	r1, #1
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f954 	bl	8006c74 <USB_SetDevSpeed>
 80069cc:	e013      	b.n	80069f6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d10c      	bne.n	80069ee <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069da:	2100      	movs	r1, #0
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f949 	bl	8006c74 <USB_SetDevSpeed>
 80069e2:	e008      	b.n	80069f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069e4:	2101      	movs	r1, #1
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f944 	bl	8006c74 <USB_SetDevSpeed>
 80069ec:	e003      	b.n	80069f6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069ee:	2103      	movs	r1, #3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f93f 	bl	8006c74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f6:	2110      	movs	r1, #16
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f8f3 	bl	8006be4 <USB_FlushTxFifo>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f911 	bl	8006c30 <USB_FlushRxFifo>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2300      	movs	r3, #0
 8006a22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	461a      	mov	r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	e043      	b.n	8006aca <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a58:	d118      	bne.n	8006a8c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e013      	b.n	8006a9e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	461a      	mov	r2, r3
 8006a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e008      	b.n	8006a9e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	461a      	mov	r2, r3
 8006abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3b7      	bcc.n	8006a42 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	e043      	b.n	8006b60 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aee:	d118      	bne.n	8006b22 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	461a      	mov	r2, r3
 8006b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e013      	b.n	8006b34 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	e008      	b.n	8006b34 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2300      	movs	r3, #0
 8006b32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	461a      	mov	r2, r3
 8006b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d3b7      	bcc.n	8006ad8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d105      	bne.n	8006b9c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f043 0210 	orr.w	r2, r3, #16
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	4b0e      	ldr	r3, [pc, #56]	; (8006bdc <USB_DevInit+0x2d4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f043 0208 	orr.w	r2, r3, #8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <USB_DevInit+0x2d8>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd8:	b004      	add	sp, #16
 8006bda:	4770      	bx	lr
 8006bdc:	803c3800 	.word	0x803c3800
 8006be0:	40000004 	.word	0x40000004

08006be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	f043 0220 	orr.w	r2, r3, #32
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <USB_FlushTxFifo+0x48>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d901      	bls.n	8006c10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e006      	b.n	8006c1e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d0f0      	beq.n	8006bfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	00030d40 	.word	0x00030d40

08006c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2210      	movs	r2, #16
 8006c40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <USB_FlushRxFifo+0x40>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d901      	bls.n	8006c54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e006      	b.n	8006c62 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d0f0      	beq.n	8006c42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	00030d40 	.word	0x00030d40

08006c74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c94:	4313      	orrs	r3, r2
 8006c96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	f7fa fc2c 	bl	8001524 <HAL_Delay>

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <USB_CoreReset+0x64>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d901      	bls.n	8006cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e01b      	b.n	8006d2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	daf2      	bge.n	8006ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f043 0201 	orr.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <USB_CoreReset+0x64>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d0f0      	beq.n	8006d0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	00030d40 	.word	0x00030d40

08006d40 <__libc_init_array>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	4e0d      	ldr	r6, [pc, #52]	; (8006d78 <__libc_init_array+0x38>)
 8006d44:	4c0d      	ldr	r4, [pc, #52]	; (8006d7c <__libc_init_array+0x3c>)
 8006d46:	1ba4      	subs	r4, r4, r6
 8006d48:	10a4      	asrs	r4, r4, #2
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	42a5      	cmp	r5, r4
 8006d4e:	d109      	bne.n	8006d64 <__libc_init_array+0x24>
 8006d50:	4e0b      	ldr	r6, [pc, #44]	; (8006d80 <__libc_init_array+0x40>)
 8006d52:	4c0c      	ldr	r4, [pc, #48]	; (8006d84 <__libc_init_array+0x44>)
 8006d54:	f000 f820 	bl	8006d98 <_init>
 8006d58:	1ba4      	subs	r4, r4, r6
 8006d5a:	10a4      	asrs	r4, r4, #2
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	42a5      	cmp	r5, r4
 8006d60:	d105      	bne.n	8006d6e <__libc_init_array+0x2e>
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d68:	4798      	blx	r3
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7ee      	b.n	8006d4c <__libc_init_array+0xc>
 8006d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d72:	4798      	blx	r3
 8006d74:	3501      	adds	r5, #1
 8006d76:	e7f2      	b.n	8006d5e <__libc_init_array+0x1e>
 8006d78:	08006dd8 	.word	0x08006dd8
 8006d7c:	08006dd8 	.word	0x08006dd8
 8006d80:	08006dd8 	.word	0x08006dd8
 8006d84:	08006ddc 	.word	0x08006ddc

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <_init>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr

08006da4 <_fini>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr
