
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006514  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006770  08006770  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006778  08006778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000070  080067f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  080067f0  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016386  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b26  00000000  00000000  00036424  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  00038f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0003a358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a3b8  00000000  00000000  0003b608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f76e  00000000  00000000  000659c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00108784  00000000  00000000  0007512e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d8b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005868  00000000  00000000  0017d930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080066fc 	.word	0x080066fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080066fc 	.word	0x080066fc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fdd1 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f814 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f9c8 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 f9a8 	bl	8000954 <MX_DMA_Init>
  MX_ETH_Init();
 8000604:	f000 f8a6 	bl	8000754 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f946 	bl	8000898 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060c:	f000 f974 	bl	80008f8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000610:	f000 f8e0 	bl	80007d4 <MX_SPI1_Init>
  MX_TIM14_Init();
 8000614:	f000 f91c 	bl	8000850 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000618:	4801      	ldr	r0, [pc, #4]	; (8000620 <main+0x30>)
 800061a:	f004 fa6b 	bl	8004af4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800061e:	e7fe      	b.n	800061e <main+0x2e>
 8000620:	200005ec 	.word	0x200005ec

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0b8      	sub	sp, #224	; 0xe0
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fc54 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2290      	movs	r2, #144	; 0x90
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f005 fc45 	bl	8005ee0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000656:	f002 fa41 	bl	8002adc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <SystemClock_Config+0x124>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a3a      	ldr	r2, [pc, #232]	; (8000748 <SystemClock_Config+0x124>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b38      	ldr	r3, [pc, #224]	; (8000748 <SystemClock_Config+0x124>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	4b36      	ldr	r3, [pc, #216]	; (800074c <SystemClock_Config+0x128>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a35      	ldr	r2, [pc, #212]	; (800074c <SystemClock_Config+0x128>)
 8000678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <SystemClock_Config+0x128>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006ac:	23d8      	movs	r3, #216	; 0xd8
 80006ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006b8:	2309      	movs	r3, #9
 80006ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fa6a 	bl	8002b9c <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ce:	f000 fa7d 	bl	8000bcc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d2:	f002 fa13 	bl	8002afc <HAL_PWREx_EnableOverDrive>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006dc:	f000 fa76 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000702:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000706:	2107      	movs	r1, #7
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fcf5 	bl	80030f8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000714:	f000 fa5a 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <SystemClock_Config+0x12c>)
 800071a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800071c:	2300      	movs	r3, #0
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800072a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fed9 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800073c:	f000 fa46 	bl	8000bcc <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	37e0      	adds	r7, #224	; 0xe0
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000
 8000750:	00200110 	.word	0x00200110

08000754 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ETH_Init+0x78>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_ETH_Init+0x7c>)
 800075c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_ETH_Init+0x78>)
 8000760:	2201      	movs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ETH_Init+0x78>)
 8000766:	2200      	movs	r2, #0
 8000768:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_ETH_Init+0x78>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_ETH_Init+0x78>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_ETH_Init+0x78>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	3302      	adds	r3, #2
 8000782:	22e1      	movs	r2, #225	; 0xe1
 8000784:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ETH_Init+0x78>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	3303      	adds	r3, #3
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_ETH_Init+0x78>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	3304      	adds	r3, #4
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_ETH_Init+0x78>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	3305      	adds	r3, #5
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_ETH_Init+0x78>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_ETH_Init+0x78>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_ETH_Init+0x78>)
 80007b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007b6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_ETH_Init+0x78>)
 80007ba:	f001 fa17 	bl	8001bec <HAL_ETH_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007c4:	f000 fa02 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000062c 	.word	0x2000062c
 80007d0:	40028000 	.word	0x40028000

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_SPI1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI1_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI1_Init+0x74>)
 80007e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x74>)
 80007f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x74>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x74>)
 800080c:	2220      	movs	r2, #32
 800080e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x74>)
 8000824:	2207      	movs	r2, #7
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_SPI1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_SPI1_Init+0x74>)
 8000836:	f003 fa7d 	bl	8003d34 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f9c4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000528 	.word	0x20000528
 800084c:	40013000 	.word	0x40013000

08000850 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_TIM14_Init+0x40>)
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_TIM14_Init+0x44>)
 8000858:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_TIM14_Init+0x40>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_TIM14_Init+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4899-1;
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_TIM14_Init+0x40>)
 8000868:	f241 3222 	movw	r2, #4898	; 0x1322
 800086c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_TIM14_Init+0x40>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_TIM14_Init+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_TIM14_Init+0x40>)
 800087c:	f004 f90e 	bl	8004a9c <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000886:	f000 f9a1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200005ec 	.word	0x200005ec
 8000894:	40002000 	.word	0x40002000

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART3_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART3_UART_Init+0x58>)
 80008dc:	f004 fb3a 	bl	8004f54 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f971 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000009c 	.word	0x2000009c
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000902:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2206      	movs	r2, #6
 8000908:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2202      	movs	r2, #2
 800090e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2201      	movs	r2, #1
 8000920:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2201      	movs	r2, #1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	f001 ff85 	bl	800284a <HAL_PCD_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f941 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000011c 	.word	0x2000011c

08000954 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_DMA_Init+0x38>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_DMA_Init+0x38>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_DMA_Init+0x38>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2038      	movs	r0, #56	; 0x38
 8000978:	f000 fd69 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800097c:	2038      	movs	r0, #56	; 0x38
 800097e:	f000 fd82 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4f      	ldr	r2, [pc, #316]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a49      	ldr	r2, [pc, #292]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a43      	ldr	r2, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_GPIO_Init+0x158>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x158>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2110      	movs	r1, #16
 8000a3a:	482c      	ldr	r0, [pc, #176]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a3c:	f001 feec 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a46:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x160>)
 8000a48:	f001 fee6 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000a52:	f001 fee1 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_GPIO_Init+0x168>)
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <MX_GPIO_Init+0x16c>)
 8000a6c:	f001 fd2a 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a70:	2310      	movs	r3, #16
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_GPIO_Init+0x15c>)
 8000a88:	f001 fd1c 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_GPIO_Init+0x160>)
 8000aa6:	f001 fd0d 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000ac2:	f001 fcff 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x164>)
 8000ada:	f001 fcf3 	bl	80024c4 <HAL_GPIO_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	; 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	10110000 	.word	0x10110000
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_SPI_RxCpltCallback+0x74>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d12c      	bne.n	8000b6a <HAL_SPI_RxCpltCallback+0x6a>
		char msg[16];
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	4818      	ldr	r0, [pc, #96]	; (8000b78 <HAL_SPI_RxCpltCallback+0x78>)
 8000b16:	f001 fe7f 	bl	8002818 <HAL_GPIO_WritePin>
		adc = (uint16_t) 256 * buffer_rx[1] + (uint16_t) buffer_rx[2];
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_SPI_RxCpltCallback+0x7c>)
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_SPI_RxCpltCallback+0x7c>)
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_SPI_RxCpltCallback+0x80>)
 8000b30:	801a      	strh	r2, [r3, #0]
		rxCount++;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_SPI_RxCpltCallback+0x84>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_SPI_RxCpltCallback+0x84>)
 8000b3a:	6013      	str	r3, [r2, #0]
		sprintf(msg,"%hu\n",adc);
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_SPI_RxCpltCallback+0x80>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4910      	ldr	r1, [pc, #64]	; (8000b88 <HAL_SPI_RxCpltCallback+0x88>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f9d1 	bl	8005ef0 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY );
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fb74 	bl	8000240 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f107 0108 	add.w	r1, r7, #8
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_SPI_RxCpltCallback+0x8c>)
 8000b66:	f004 fa43 	bl	8004ff0 <HAL_UART_Transmit>

	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000528 	.word	0x20000528
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	20000520 	.word	0x20000520
 8000b80:	20000524 	.word	0x20000524
 8000b84:	2000008c 	.word	0x2000008c
 8000b88:	08006714 	.word	0x08006714
 8000b8c:	2000009c 	.word	0x2000009c

08000b90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d109      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ba6:	f001 fe37 	bl	8002818 <HAL_GPIO_WritePin>

		HAL_SPI_Receive_DMA(&hspi1,(uint8_t*) buffer_rx,3);
 8000baa:	2203      	movs	r2, #3
 8000bac:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bb0:	f003 f952 	bl	8003e58 <HAL_SPI_Receive_DMA>

	}
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200005ec 	.word	0x200005ec
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	20000520 	.word	0x20000520
 8000bc8:	20000528 	.word	0x20000528

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a4e      	ldr	r2, [pc, #312]	; (8000d7c <HAL_ETH_MspInit+0x158>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	f040 8096 	bne.w	8000d74 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c48:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a4c      	ldr	r2, [pc, #304]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5c:	623b      	str	r3, [r7, #32]
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a46      	ldr	r2, [pc, #280]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a3a      	ldr	r2, [pc, #232]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a2e      	ldr	r2, [pc, #184]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a28      	ldr	r2, [pc, #160]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf0:	2332      	movs	r3, #50	; 0x32
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ETH_MspInit+0x160>)
 8000d0c:	f001 fbda 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d10:	2386      	movs	r3, #134	; 0x86
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d20:	230b      	movs	r3, #11
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4817      	ldr	r0, [pc, #92]	; (8000d88 <HAL_ETH_MspInit+0x164>)
 8000d2c:	f001 fbca 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	; (8000d8c <HAL_ETH_MspInit+0x168>)
 8000d4e:	f001 fbb9 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_ETH_MspInit+0x16c>)
 8000d70:	f001 fba8 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3738      	adds	r7, #56	; 0x38
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40028000 	.word	0x40028000
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40021800 	.word	0x40021800

08000d94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <HAL_SPI_MspInit+0xe8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d15d      	bne.n	8000e72 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db6:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a2b      	ldr	r2, [pc, #172]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_SPI_MspInit+0xec>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000de6:	2360      	movs	r3, #96	; 0x60
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_SPI_MspInit+0xf0>)
 8000e02:	f001 fb5f 	bl	80024c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_SPI_MspInit+0xf8>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e0e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e12:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e26:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e48:	f000 fb38 	bl	80014bc <HAL_DMA_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000e52:	f7ff febb 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_SPI_MspInit+0xf4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2023      	movs	r0, #35	; 0x23
 8000e68:	f000 faf1 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e6c:	2023      	movs	r0, #35	; 0x23
 8000e6e:	f000 fb0a 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	2000058c 	.word	0x2000058c
 8000e8c:	40026410 	.word	0x40026410

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_TIM_Base_MspInit+0x44>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d113      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	202d      	movs	r0, #45	; 0x2d
 8000ec0:	f000 fac5 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ec4:	202d      	movs	r0, #45	; 0x2d
 8000ec6:	f000 fade 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40002000 	.word	0x40002000
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_UART_MspInit+0x7c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d128      	bne.n	8000f50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_MspInit+0x80>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f40:	2307      	movs	r3, #7
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_UART_MspInit+0x84>)
 8000f4c:	f001 faba 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f84:	d141      	bne.n	800100a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f9e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4817      	ldr	r0, [pc, #92]	; (8001018 <HAL_PCD_MspInit+0xb4>)
 8000fbc:	f001 fa82 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <HAL_PCD_MspInit+0xb4>)
 8000fd6:	f001 fa75 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_PCD_MspInit+0xb0>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000

0800101c <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001070:	f000 f8d0 	bl	8001214 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <SPI1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */
	uint16_t dbyte;
	dbyte = SPI1->DR;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SPI1_IRQHandler+0x1c>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	80fb      	strh	r3, [r7, #6]
	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <SPI1_IRQHandler+0x20>)
 8001086:	f003 f98f 	bl	80043a8 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40013000 	.word	0x40013000
 8001098:	20000528 	.word	0x20000528

0800109c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
 * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
 */
void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

	/* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
	HAL_TIM_IRQHandler(&htim14);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010a2:	f003 fd51 	bl	8004b48 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

	/* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200005ec 	.word	0x200005ec

080010b0 <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <DMA2_Stream0_IRQHandler+0x10>)
 80010b6:	f000 fb31 	bl	800171c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000058c 	.word	0x2000058c

080010c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x50>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x16>
		heap_end = &end;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <_sbrk+0x50>)
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <_sbrk+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <_sbrk+0x50>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <_sbrk+0x50>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	466a      	mov	r2, sp
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d907      	bls.n	80010fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010ee:	f004 fecd 	bl	8005e8c <__errno>
 80010f2:	4602      	mov	r2, r0
 80010f4:	230c      	movs	r3, #12
 80010f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	e006      	b.n	800110c <_sbrk+0x48>
	}

	heap_end += incr;
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <_sbrk+0x50>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <_sbrk+0x50>)
 8001108:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000090 	.word	0x20000090
 8001118:	20000680 	.word	0x20000680

0800111c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <SystemInit+0x28>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <SystemInit+0x28>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0x28>)
 8001132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001136:	609a      	str	r2, [r3, #8]
#endif
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800114c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
  ldr  r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001168:	f842 3b04 	str.w	r3, [r2], #4

0800116c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff ffd3 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f004 fe8f 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fa39 	bl	80005f0 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001184:	08006780 	.word	0x08006780
  ldr  r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800118c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001190:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001194:	2000067c 	.word	0x2000067c

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>

0800119a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f94a 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f805 	bl	80011b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fd17 	bl	8000bdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f965 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f92d 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	20000674 	.word	0x20000674

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000674 	.word	0x20000674

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_Delay+0x40>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0000 	.word	0x05fa0000

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff feb8 	bl	800123c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e099      	b.n	800160c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	e00f      	b.n	800151a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fa:	f7ff fe9f 	bl	800123c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b05      	cmp	r3, #5
 8001506:	d908      	bls.n	800151a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e078      	b.n	800160c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e8      	bne.n	80014fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_DMA_Init+0x158>)
 8001534:	4013      	ands	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2b04      	cmp	r3, #4
 8001572:	d107      	bne.n	8001584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4313      	orrs	r3, r2
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f023 0307 	bic.w	r3, r3, #7
 800159a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d117      	bne.n	80015de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa99 	bl	8001af8 <DMA_CheckFifoParam>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015da:	2301      	movs	r3, #1
 80015dc:	e016      	b.n	800160c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fa50 	bl	8001a8c <DMA_CalcBaseAndBitshift>
 80015ec:	4603      	mov	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	e010803f 	.word	0xe010803f

08001618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_DMA_Start_IT+0x26>
 800163a:	2302      	movs	r3, #2
 800163c:	e048      	b.n	80016d0 <HAL_DMA_Start_IT+0xb8>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d137      	bne.n	80016c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2202      	movs	r2, #2
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f9e2 	bl	8001a30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0216 	orr.w	r2, r2, #22
 8001686:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e005      	b.n	80016ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
 80016cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d004      	beq.n	80016f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00c      	b.n	8001710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001728:	4b92      	ldr	r3, [pc, #584]	; (8001974 <HAL_DMA_IRQHandler+0x258>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_DMA_IRQHandler+0x25c>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0a9b      	lsrs	r3, r3, #10
 8001734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2208      	movs	r2, #8
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d01a      	beq.n	8001788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0204 	bic.w	r2, r2, #4
 800176e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2208      	movs	r2, #8
 8001776:	409a      	lsls	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2201      	movs	r2, #1
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d012      	beq.n	80017be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2201      	movs	r2, #1
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f043 0202 	orr.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	2204      	movs	r2, #4
 80017e2:	409a      	lsls	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0204 	orr.w	r2, r3, #4
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2210      	movs	r2, #16
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d043      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03c      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2210      	movs	r2, #16
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d018      	beq.n	800185e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d024      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
 800184a:	e01f      	b.n	800188c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01b      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
 800185c:	e016      	b.n	800188c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0208 	bic.w	r2, r2, #8
 800187a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	2220      	movs	r2, #32
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 808e 	beq.w	80019ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8086 	beq.w	80019ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2220      	movs	r2, #32
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d136      	bne.n	8001934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0216 	bic.w	r2, r2, #22
 80018d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x1da>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0208 	bic.w	r2, r2, #8
 8001904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	223f      	movs	r2, #63	; 0x3f
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001926:	2b00      	cmp	r3, #0
 8001928:	d07d      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
        }
        return;
 8001932:	e078      	b.n	8001a26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01c      	beq.n	800197c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d108      	bne.n	8001962 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	2b00      	cmp	r3, #0
 8001956:	d030      	beq.n	80019ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e02b      	b.n	80019ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d027      	beq.n	80019ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
 8001972:	e022      	b.n	80019ba <HAL_DMA_IRQHandler+0x29e>
 8001974:	20000000 	.word	0x20000000
 8001978:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0210 	bic.w	r2, r2, #16
 8001998:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d032      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d022      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2205      	movs	r2, #5
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d307      	bcc.n	8001a02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f2      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x2ca>
 8001a00:	e000      	b.n	8001a04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a26:	bf00      	nop
    }
  }
}
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop

08001a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b40      	cmp	r3, #64	; 0x40
 8001a5c:	d108      	bne.n	8001a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a6e:	e007      	b.n	8001a80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3b10      	subs	r3, #16
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <DMA_CalcBaseAndBitshift+0x60>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d908      	bls.n	8001acc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	1d1a      	adds	r2, r3, #4
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8001aca:	e006      	b.n	8001ada <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	aaaaaaab 	.word	0xaaaaaaab
 8001af0:	08006734 	.word	0x08006734
 8001af4:	fffffc00 	.word	0xfffffc00

08001af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11f      	bne.n	8001b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d855      	bhi.n	8001bc4 <DMA_CheckFifoParam+0xcc>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <DMA_CheckFifoParam+0x28>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b43 	.word	0x08001b43
 8001b28:	08001b31 	.word	0x08001b31
 8001b2c:	08001bc5 	.word	0x08001bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d045      	beq.n	8001bc8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b40:	e042      	b.n	8001bc8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b4a:	d13f      	bne.n	8001bcc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b50:	e03c      	b.n	8001bcc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5a:	d121      	bne.n	8001ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d836      	bhi.n	8001bd0 <DMA_CheckFifoParam+0xd8>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x70>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b7f 	.word	0x08001b7f
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001b91 	.word	0x08001b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e02f      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d024      	beq.n	8001bd4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b8e:	e021      	b.n	8001bd4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b98:	d11e      	bne.n	8001bd8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b9e:	e01b      	b.n	8001bd8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d902      	bls.n	8001bac <DMA_CheckFifoParam+0xb4>
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d003      	beq.n	8001bb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001baa:	e018      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb0:	e015      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00e      	beq.n	8001bdc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc2:	e00b      	b.n	8001bdc <DMA_CheckFifoParam+0xe4>
      break;
 8001bc4:	bf00      	nop
 8001bc6:	e00a      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bc8:	bf00      	nop
 8001bca:	e008      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bcc:	bf00      	nop
 8001bce:	e006      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bd0:	bf00      	nop
 8001bd2:	e004      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bd4:	bf00      	nop
 8001bd6:	e002      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;   
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <DMA_CheckFifoParam+0xe6>
      break;
 8001bdc:	bf00      	nop
    }
  } 
  
  return status; 
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001bfc:	4ba9      	ldr	r3, [pc, #676]	; (8001ea4 <HAL_ETH_Init+0x2b8>)
 8001bfe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e183      	b.n	8001f1a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fffc 	bl	8000c24 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ea8 <HAL_ETH_Init+0x2bc>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	4a9d      	ldr	r2, [pc, #628]	; (8001ea8 <HAL_ETH_Init+0x2bc>)
 8001c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c36:	6453      	str	r3, [r2, #68]	; 0x44
 8001c38:	4b9b      	ldr	r3, [pc, #620]	; (8001ea8 <HAL_ETH_Init+0x2bc>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <HAL_ETH_Init+0x2c0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a98      	ldr	r2, [pc, #608]	; (8001eac <HAL_ETH_Init+0x2c0>)
 8001c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c4e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c50:	4b96      	ldr	r3, [pc, #600]	; (8001eac <HAL_ETH_Init+0x2c0>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4994      	ldr	r1, [pc, #592]	; (8001eac <HAL_ETH_Init+0x2c0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c76:	f7ff fae1 	bl	800123c <HAL_GetTick>
 8001c7a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c7c:	e011      	b.n	8001ca2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c7e:	f7ff fadd 	bl	800123c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c8c:	d909      	bls.n	8001ca2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e13b      	b.n	8001f1a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e4      	bne.n	8001c7e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f023 031c 	bic.w	r3, r3, #28
 8001cc2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cc4:	f001 fbdc 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 8001cc8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4a78      	ldr	r2, [pc, #480]	; (8001eb0 <HAL_ETH_Init+0x2c4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d908      	bls.n	8001ce4 <HAL_ETH_Init+0xf8>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4a77      	ldr	r2, [pc, #476]	; (8001eb4 <HAL_ETH_Init+0x2c8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d804      	bhi.n	8001ce4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	e027      	b.n	8001d34 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4a73      	ldr	r2, [pc, #460]	; (8001eb4 <HAL_ETH_Init+0x2c8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d908      	bls.n	8001cfe <HAL_ETH_Init+0x112>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <HAL_ETH_Init+0x2cc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d804      	bhi.n	8001cfe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f043 030c 	orr.w	r3, r3, #12
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	e01a      	b.n	8001d34 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4a6d      	ldr	r2, [pc, #436]	; (8001eb8 <HAL_ETH_Init+0x2cc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d903      	bls.n	8001d0e <HAL_ETH_Init+0x122>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4a6c      	ldr	r2, [pc, #432]	; (8001ebc <HAL_ETH_Init+0x2d0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d911      	bls.n	8001d32 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_ETH_Init+0x2d0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d908      	bls.n	8001d28 <HAL_ETH_Init+0x13c>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_ETH_Init+0x2d4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d804      	bhi.n	8001d28 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e005      	b.n	8001d34 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e000      	b.n	8001d34 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d32:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d40:	2100      	movs	r1, #0
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f956 	bl	8001ff4 <HAL_ETH_WritePHYRegister>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f9b3 	bl	80020c0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0d9      	b.n	8001f1a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d66:	20ff      	movs	r0, #255	; 0xff
 8001d68:	f7ff fa74 	bl	8001254 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a7 	beq.w	8001ec4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d76:	f7ff fa61 	bl	800123c <HAL_GetTick>
 8001d7a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	461a      	mov	r2, r3
 8001d82:	2101      	movs	r1, #1
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8cd 	bl	8001f24 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d8a:	f7ff fa57 	bl	800123c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d90f      	bls.n	8001dbc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001da0:	6939      	ldr	r1, [r7, #16]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f98c 	bl	80020c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0ae      	b.n	8001f1a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0da      	beq.n	8001d7c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001dc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dca:	2100      	movs	r1, #0
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f911 	bl	8001ff4 <HAL_ETH_WritePHYRegister>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f96e 	bl	80020c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001dec:	2301      	movs	r3, #1
 8001dee:	e094      	b.n	8001f1a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa24 	bl	800123c <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f890 	bl	8001f24 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001e04:	f7ff fa1a 	bl	800123c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d90f      	bls.n	8001e36 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f94f 	bl	80020c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e071      	b.n	8001f1a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0da      	beq.n	8001df6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	461a      	mov	r2, r3
 8001e46:	211f      	movs	r1, #31
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f86b 	bl	8001f24 <HAL_ETH_ReadPHYRegister>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f930 	bl	80020c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e056      	b.n	8001f1a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e002      	b.n	8001e86 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e037      	b.n	8001f08 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	e032      	b.n	8001f08 <HAL_ETH_Init+0x31c>
 8001ea2:	bf00      	nop
 8001ea4:	03938700 	.word	0x03938700
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	01312cff 	.word	0x01312cff
 8001eb4:	02160ebf 	.word	0x02160ebf
 8001eb8:	039386ff 	.word	0x039386ff
 8001ebc:	05f5e0ff 	.word	0x05f5e0ff
 8001ec0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f889 	bl	8001ff4 <HAL_ETH_WritePHYRegister>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8e6 	bl	80020c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00c      	b.n	8001f1a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f00:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001f04:	f7ff f9a6 	bl	8001254 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8d8 	bl	80020c0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop

08001f24 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b82      	cmp	r3, #130	; 0x82
 8001f44:	d101      	bne.n	8001f4a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	e050      	b.n	8001fec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2282      	movs	r2, #130	; 0x82
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 031c 	and.w	r3, r3, #28
 8001f60:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8a1b      	ldrh	r3, [r3, #16]
 8001f66:	02db      	lsls	r3, r3, #11
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f70:	897b      	ldrh	r3, [r7, #10]
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 0302 	bic.w	r3, r3, #2
 8001f84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f96:	f7ff f951 	bl	800123c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f9c:	e015      	b.n	8001fca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f9e:	f7ff f94d 	bl	800123c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fac:	d309      	bcc.n	8001fc2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e014      	b.n	8001fec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e4      	bne.n	8001f9e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b42      	cmp	r3, #66	; 0x42
 8002014:	d101      	bne.n	800201a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	e04e      	b.n	80020b8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2242      	movs	r2, #66	; 0x42
 800201e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 031c 	and.w	r3, r3, #28
 8002030:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8a1b      	ldrh	r3, [r3, #16]
 8002036:	02db      	lsls	r3, r3, #11
 8002038:	b29b      	uxth	r3, r3
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002070:	f7ff f8e4 	bl	800123c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002076:	e015      	b.n	80020a4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002078:	f7ff f8e0 	bl	800123c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d309      	bcc.n	800209c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e00d      	b.n	80020b8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1e4      	bne.n	8002078 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0b0      	sub	sp, #192	; 0xc0
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020dc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210a:	663b      	str	r3, [r7, #96]	; 0x60
 800210c:	e001      	b.n	8002112 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002116:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800211c:	2300      	movs	r3, #0
 800211e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800212c:	2340      	movs	r3, #64	; 0x40
 800212e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002194:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002198:	4bab      	ldr	r3, [pc, #684]	; (8002448 <ETH_MACDMAConfig+0x388>)
 800219a:	4013      	ands	r3, r2
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021a4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021a8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021ac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021b2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021b6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021ba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021c0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021c4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021c8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021cc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021d0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff f82d 	bl	8001254 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002202:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002204:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002208:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800220a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800220c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002212:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002218:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800221a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800221e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002224:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002228:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002230:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002232:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff f808 	bl	8001254 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002256:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002260:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800226c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002270:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002274:	4013      	ands	r3, r2
 8002276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800227a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002284:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800228a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800228c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002290:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002296:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800229c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800229e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe ffc9 	bl	8001254 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7fe ffb4 	bl	8001254 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002308:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800231a:	2304      	movs	r3, #4
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800231e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800232a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800233a:	2300      	movs	r3, #0
 800233c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800233e:	2300      	movs	r3, #0
 8002340:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f241 0318 	movw	r3, #4120	; 0x1018
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <ETH_MACDMAConfig+0x38c>)
 8002358:	4013      	ands	r3, r2
 800235a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800235e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002360:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002362:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002364:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002366:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002368:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800236a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800236c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800236e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002370:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002372:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002374:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002376:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800237a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800237e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002380:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002392:	4413      	add	r3, r2
 8002394:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002398:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe ff52 	bl	8001254 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80023b8:	4413      	add	r3, r2
 80023ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023be:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023c4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023c8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023cc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023d0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023d6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023da:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe ff2b 	bl	8001254 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002406:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800240a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10d      	bne.n	8002430 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f241 031c 	movw	r3, #4124	; 0x101c
 800241c:	4413      	add	r3, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6811      	ldr	r1, [r2, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <ETH_MACDMAConfig+0x390>)
 8002426:	431a      	orrs	r2, r3
 8002428:	f241 031c 	movw	r3, #4124	; 0x101c
 800242c:	440b      	add	r3, r1
 800242e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	461a      	mov	r2, r3
 8002436:	2100      	movs	r1, #0
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f80b 	bl	8002454 <ETH_MACAddressConfig>
}
 800243e:	bf00      	nop
 8002440:	37c0      	adds	r7, #192	; 0xc0
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	ff20810f 	.word	0xff20810f
 800244c:	f8de3f23 	.word	0xf8de3f23
 8002450:	00010040 	.word	0x00010040

08002454 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3305      	adds	r3, #5
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	3204      	adds	r2, #4
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <ETH_MACAddressConfig+0x68>)
 8002476:	4413      	add	r3, r2
 8002478:	461a      	mov	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3303      	adds	r3, #3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	061a      	lsls	r2, r3, #24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3302      	adds	r3, #2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	4313      	orrs	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <ETH_MACAddressConfig+0x6c>)
 80024a6:	4413      	add	r3, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6013      	str	r3, [r2, #0]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40028040 	.word	0x40028040
 80024c0:	40028044 	.word	0x40028044

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00b      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002516:	2b11      	cmp	r3, #17
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b12      	cmp	r3, #18
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x100>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b12      	cmp	r3, #18
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_GPIO_Init+0x320>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a64      	ldr	r2, [pc, #400]	; (80027e4 <HAL_GPIO_Init+0x320>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_GPIO_Init+0x320>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a57      	ldr	r2, [pc, #348]	; (80027ec <HAL_GPIO_Init+0x328>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a55      	ldr	r2, [pc, #340]	; (80027f4 <HAL_GPIO_Init+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x334>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a53      	ldr	r2, [pc, #332]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x348>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_GPIO_Init+0x350>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002746:	4a33      	ldr	r2, [pc, #204]	; (8002814 <HAL_GPIO_Init+0x350>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <HAL_GPIO_Init+0x350>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_GPIO_Init+0x350>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_GPIO_Init+0x350>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_GPIO_Init+0x350>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <HAL_GPIO_Init+0x350>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_GPIO_Init+0x350>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	3724      	adds	r7, #36	; 0x24
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40013800 	.word	0x40013800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020c00 	.word	0x40020c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40021400 	.word	0x40021400
 8002804:	40021800 	.word	0x40021800
 8002808:	40021c00 	.word	0x40021c00
 800280c:	40022000 	.word	0x40022000
 8002810:	40022400 	.word	0x40022400
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284c:	b08f      	sub	sp, #60	; 0x3c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e116      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fb74 	bl	8000f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 f89e 	bl	80059dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	687e      	ldr	r6, [r7, #4]
 80028a8:	466d      	mov	r5, sp
 80028aa:	f106 0410 	add.w	r4, r6, #16
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80028be:	1d33      	adds	r3, r6, #4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f003 f832 	bl	800592c <USB_CoreInit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0d7      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f88c 	bl	80059fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e04a      	b.n	8002982 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b298      	uxth	r0, r3
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3342      	adds	r3, #66	; 0x42
 8002928:	4602      	mov	r2, r0
 800292a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3344      	adds	r3, #68	; 0x44
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3350      	adds	r3, #80	; 0x50
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3af      	bcc.n	80028ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e044      	b.n	8002a1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b5      	bcc.n	8002992 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	687e      	ldr	r6, [r7, #4]
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a44:	1d33      	adds	r3, r6, #4
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f003 f803 	bl	8005a54 <USB_DevInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e014      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f80b 	bl	8002a94 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 f9b5 	bl	8005df2 <USB_DevDisconnect>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	10000003 	.word	0x10000003

08002adc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2a:	f7fe fb87 	bl	800123c <HAL_GetTick>
 8002b2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b30:	e009      	b.n	8002b46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b32:	f7fe fb83 	bl	800123c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b40:	d901      	bls.n	8002b46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e022      	b.n	8002b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b52:	d1ee      	bne.n	8002b32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7fe fb6c 	bl	800123c <HAL_GetTick>
 8002b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b66:	e009      	b.n	8002b7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b68:	f7fe fb68 	bl	800123c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b76:	d901      	bls.n	8002b7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e007      	b.n	8002b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b88:	d1ee      	bne.n	8002b68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e29b      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc0:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bcc:	4b93      	ldr	r3, [pc, #588]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bd8:	4b90      	ldr	r3, [pc, #576]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x130>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e275      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x7a>
 8002c08:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a83      	ldr	r2, [pc, #524]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x9c>
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7e      	ldr	r2, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7b      	ldr	r2, [pc, #492]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c42:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a75      	ldr	r2, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6b      	ldr	r2, [pc, #428]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fade 	bl	800123c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fada 	bl	800123c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e229      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe faca 	bl	800123c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fac6 	bl	800123c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e215      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x110>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d069      	beq.n	8002dae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1e9      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	493d      	ldr	r1, [pc, #244]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e040      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fa7c 	bl	800123c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fa78 	bl	800123c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1c7      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4929      	ldr	r1, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
 8002d7a:	e018      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fa58 	bl	800123c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fa54 	bl	800123c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1a3      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d038      	beq.n	8002e2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe fa35 	bl	800123c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fa31 	bl	800123c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e180      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x23a>
 8002df4:	e01a      	b.n	8002e2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe fa1b 	bl	800123c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fa17 	bl	800123c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d903      	bls.n	8002e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e166      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
 8002e1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a4 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a88      	ldr	r2, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b86      	ldr	r3, [pc, #536]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e6e:	4b80      	ldr	r3, [pc, #512]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7f      	ldr	r2, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f9df 	bl	800123c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe f9db 	bl	800123c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e12a      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x31a>
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a6f      	ldr	r2, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x33c>
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x35e>
 8002ee0:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a5b      	ldr	r2, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f98f 	bl	800123c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe f98b 	bl	800123c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0d8      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x386>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe f979 	bl	800123c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe f975 	bl	800123c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0c2      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80ae 	beq.w	80030e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d06d      	beq.n	8003074 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d14b      	bne.n	8003038 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe f946 	bl	800123c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe f942 	bl	800123c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e091      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	3b01      	subs	r3, #1
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	491b      	ldr	r1, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f914 	bl	800123c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe f910 	bl	800123c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e05f      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x47c>
 8003036:	e057      	b.n	80030e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800303e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f8fa 	bl	800123c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe f8f6 	bl	800123c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e045      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x4b0>
 800306a:	e03d      	b.n	80030e8 <HAL_RCC_OscConfig+0x54c>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HAL_RCC_OscConfig+0x558>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d030      	beq.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d129      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d122      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d119      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d10f      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7fe f826 	bl	800123c <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fe f822 	bl	800123c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4922      	ldr	r1, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4601      	mov	r1, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1cc>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	fa21 f303 	lsr.w	r3, r1, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1d0>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1d4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd ff82 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	0800671c 	.word	0x0800671c
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d007      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x32>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d008      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x38>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 80b4 	bne.w	8003464 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032fe:	60bb      	str	r3, [r7, #8]
      break;
 8003300:	e0b3      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003302:	4b5e      	ldr	r3, [pc, #376]	; (800347c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003304:	60bb      	str	r3, [r7, #8]
      break;
 8003306:	e0b0      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003308:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003310:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003312:	4b58      	ldr	r3, [pc, #352]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d04a      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	ea03 0501 	and.w	r5, r3, r1
 8003334:	ea04 0602 	and.w	r6, r4, r2
 8003338:	4629      	mov	r1, r5
 800333a:	4632      	mov	r2, r6
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	0154      	lsls	r4, r2, #5
 8003346:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800334a:	014b      	lsls	r3, r1, #5
 800334c:	4619      	mov	r1, r3
 800334e:	4622      	mov	r2, r4
 8003350:	1b49      	subs	r1, r1, r5
 8003352:	eb62 0206 	sbc.w	r2, r2, r6
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	0194      	lsls	r4, r2, #6
 8003360:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003364:	018b      	lsls	r3, r1, #6
 8003366:	1a5b      	subs	r3, r3, r1
 8003368:	eb64 0402 	sbc.w	r4, r4, r2
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	00e2      	lsls	r2, r4, #3
 8003376:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800337a:	00d9      	lsls	r1, r3, #3
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	195b      	adds	r3, r3, r5
 8003382:	eb44 0406 	adc.w	r4, r4, r6
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	0262      	lsls	r2, r4, #9
 8003390:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003394:	0259      	lsls	r1, r3, #9
 8003396:	460b      	mov	r3, r1
 8003398:	4614      	mov	r4, r2
 800339a:	4618      	mov	r0, r3
 800339c:	4621      	mov	r1, r4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	f7fc ffa2 	bl	80002f0 <__aeabi_uldivmod>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e049      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b4:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	f04f 0400 	mov.w	r4, #0
 80033be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	ea03 0501 	and.w	r5, r3, r1
 80033ca:	ea04 0602 	and.w	r6, r4, r2
 80033ce:	4629      	mov	r1, r5
 80033d0:	4632      	mov	r2, r6
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0154      	lsls	r4, r2, #5
 80033dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e0:	014b      	lsls	r3, r1, #5
 80033e2:	4619      	mov	r1, r3
 80033e4:	4622      	mov	r2, r4
 80033e6:	1b49      	subs	r1, r1, r5
 80033e8:	eb62 0206 	sbc.w	r2, r2, r6
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f04f 0400 	mov.w	r4, #0
 80033f4:	0194      	lsls	r4, r2, #6
 80033f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033fa:	018b      	lsls	r3, r1, #6
 80033fc:	1a5b      	subs	r3, r3, r1
 80033fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003410:	00d9      	lsls	r1, r3, #3
 8003412:	460b      	mov	r3, r1
 8003414:	4614      	mov	r4, r2
 8003416:	195b      	adds	r3, r3, r5
 8003418:	eb44 0406 	adc.w	r4, r4, r6
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	02a2      	lsls	r2, r4, #10
 8003426:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800342a:	0299      	lsls	r1, r3, #10
 800342c:	460b      	mov	r3, r1
 800342e:	4614      	mov	r4, r2
 8003430:	4618      	mov	r0, r3
 8003432:	4621      	mov	r1, r4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	461a      	mov	r2, r3
 800343c:	4623      	mov	r3, r4
 800343e:	f7fc ff57 	bl	80002f0 <__aeabi_uldivmod>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	60bb      	str	r3, [r7, #8]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003466:	60bb      	str	r3, [r7, #8]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	68bb      	ldr	r3, [r7, #8]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800349c:	f7ff fff0 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a0:	4601      	mov	r1, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0a9b      	lsrs	r3, r3, #10
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	0800672c 	.word	0x0800672c

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c4:	f7ff ffdc 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034c8:	4601      	mov	r1, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0b5b      	lsrs	r3, r3, #13
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	0800672c 	.word	0x0800672c

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003510:	4b69      	ldr	r3, [pc, #420]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a68      	ldr	r2, [pc, #416]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003516:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800351a:	6093      	str	r3, [r2, #8]
 800351c:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	4964      	ldr	r1, [pc, #400]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	4959      	ldr	r1, [pc, #356]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d017      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800357e:	4b4e      	ldr	r3, [pc, #312]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003584:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	494a      	ldr	r1, [pc, #296]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 808b 	beq.w	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a39      	ldr	r2, [pc, #228]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6413      	str	r3, [r2, #64]	; 0x40
 80035d8:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035e4:	4b35      	ldr	r3, [pc, #212]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f0:	f7fd fe24 	bl	800123c <HAL_GetTick>
 80035f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f8:	f7fd fe20 	bl	800123c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e38d      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800360a:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d035      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d02e      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003654:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d114      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fde8 	bl	800123c <HAL_GetTick>
 800366c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd fde4 	bl	800123c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e34f      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ee      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800369e:	d111      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	4901      	ldr	r1, [pc, #4]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40007000 	.word	0x40007000
 80036c0:	0ffffcff 	.word	0x0ffffcff
 80036c4:	4bb3      	ldr	r3, [pc, #716]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4ab2      	ldr	r2, [pc, #712]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ce:	6093      	str	r3, [r2, #8]
 80036d0:	4bb0      	ldr	r3, [pc, #704]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	49ad      	ldr	r1, [pc, #692]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d010      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036ee:	4ba9      	ldr	r3, [pc, #676]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f4:	4aa7      	ldr	r2, [pc, #668]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036fe:	4ba5      	ldr	r3, [pc, #660]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003700:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	49a2      	ldr	r1, [pc, #648]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371c:	4b9d      	ldr	r3, [pc, #628]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372a:	499a      	ldr	r1, [pc, #616]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373e:	4b95      	ldr	r3, [pc, #596]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800374c:	4991      	ldr	r1, [pc, #580]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003760:	4b8c      	ldr	r3, [pc, #560]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	4989      	ldr	r1, [pc, #548]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003782:	4b84      	ldr	r3, [pc, #528]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4980      	ldr	r1, [pc, #512]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a4:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4978      	ldr	r1, [pc, #480]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f023 020c 	bic.w	r2, r3, #12
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d4:	496f      	ldr	r1, [pc, #444]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	4967      	ldr	r1, [pc, #412]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800380a:	4b62      	ldr	r3, [pc, #392]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003818:	495e      	ldr	r1, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	4956      	ldr	r1, [pc, #344]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800384e:	4b51      	ldr	r3, [pc, #324]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	494d      	ldr	r1, [pc, #308]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003870:	4b48      	ldr	r3, [pc, #288]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	4945      	ldr	r1, [pc, #276]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	493c      	ldr	r1, [pc, #240]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b4:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c2:	4934      	ldr	r1, [pc, #208]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038d6:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e4:	492b      	ldr	r1, [pc, #172]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003948:	4912      	ldr	r1, [pc, #72]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396c:	4909      	ldr	r1, [pc, #36]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003986:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	e002      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	4985      	ldr	r1, [pc, #532]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039ac:	4b80      	ldr	r3, [pc, #512]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039bc:	497c      	ldr	r1, [pc, #496]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d2:	f040 80d6 	bne.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e2:	f7fd fc2b 	bl	800123c <HAL_GetTick>
 80039e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ea:	f7fd fc27 	bl	800123c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b64      	cmp	r3, #100	; 0x64
 80039f6:	d901      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e194      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039fc:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11d      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a1c:	4b64      	ldr	r3, [pc, #400]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	019a      	lsls	r2, r3, #6
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	071b      	lsls	r3, r3, #28
 8003a50:	4957      	ldr	r1, [pc, #348]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02e      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a82:	d129      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a84:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a98:	0f1b      	lsrs	r3, r3, #28
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	019a      	lsls	r2, r3, #6
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	071b      	lsls	r3, r3, #28
 8003ab8:	493d      	ldr	r1, [pc, #244]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac6:	f023 021f 	bic.w	r2, r3, #31
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01d      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aea:	0e1b      	lsrs	r3, r3, #24
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af2:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af8:	0f1b      	lsrs	r3, r3, #28
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	019a      	lsls	r2, r3, #6
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	071b      	lsls	r3, r3, #28
 8003b18:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d011      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	019a      	lsls	r2, r3, #6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	4919      	ldr	r1, [pc, #100]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fb6e 	bl	800123c <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b64:	f7fd fb6a 	bl	800123c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e0d7      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 80cd 	bne.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b96:	f7fd fb51 	bl	800123c <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b9e:	f7fd fb4d 	bl	800123c <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	; 0x64
 8003baa:	d903      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0ba      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003bb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bb4:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc0:	d0ed      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d02e      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d12a      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf8:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	0f1b      	lsrs	r3, r3, #28
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	019a      	lsls	r2, r3, #6
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	071b      	lsls	r3, r3, #28
 8003c1e:	4944      	ldr	r1, [pc, #272]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	493d      	ldr	r1, [pc, #244]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d022      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d11d      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c56:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	0f1b      	lsrs	r3, r3, #28
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	019a      	lsls	r2, r3, #6
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	071b      	lsls	r3, r3, #28
 8003c8a:	4929      	ldr	r1, [pc, #164]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	0e1b      	lsrs	r3, r3, #24
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	019a      	lsls	r2, r3, #6
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	4917      	ldr	r1, [pc, #92]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4911      	ldr	r1, [pc, #68]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fa9e 	bl	800123c <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d04:	f7fd fa9a 	bl	800123c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e007      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d22:	d1ef      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e084      	b.n	8003e50 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd f817 	bl	8000d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d86:	d902      	bls.n	8003d8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e002      	b.n	8003d94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d9c:	d007      	beq.n	8003dae <HAL_SPI_Init+0x7a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da6:	d002      	beq.n	8003dae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dbe:	d903      	bls.n	8003dc8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc6:	e002      	b.n	8003dce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0204 	and.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	ea42 0103 	orr.w	r1, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d110      	bne.n	8003e94 <HAL_SPI_Receive_DMA+0x3c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d10b      	bne.n	8003e94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f900 	bl	8004090 <HAL_SPI_TransmitReceive_DMA>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e0f3      	b.n	800407c <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_SPI_Receive_DMA+0x4a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0ec      	b.n	800407c <HAL_SPI_Receive_DMA+0x224>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eba:	e0da      	b.n	8004072 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Receive_DMA+0x70>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ecc:	e0d1      	b.n	8004072 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d107      	bne.n	8003f24 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f32:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f3c:	d908      	bls.n	8003f50 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	e042      	b.n	8003fd6 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f5e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6a:	d134      	bne.n	8003fd6 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fae:	e012      	b.n	8003fd6 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <HAL_SPI_Receive_DMA+0x22c>)
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <HAL_SPI_Receive_DMA+0x230>)
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_SPI_Receive_DMA+0x234>)
 8003fec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	4619      	mov	r1, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800400e:	b29b      	uxth	r3, r3
 8004010:	f7fd fb02 	bl	8001618 <HAL_DMA_Start_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00c      	beq.n	8004034 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	f043 0210 	orr.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004032:	e01e      	b.n	8004072 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d007      	beq.n	8004052 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0220 	orr.w	r2, r2, #32
 8004060:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	08004711 	.word	0x08004711
 8004088:	080045f9 	.word	0x080045f9
 800408c:	08004749 	.word	0x08004749

08004090 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e16c      	b.n	800438a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040be:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80040c6:	7dbb      	ldrb	r3, [r7, #22]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d00d      	beq.n	80040e8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d2:	d106      	bne.n	80040e2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80040dc:	7dbb      	ldrb	r3, [r7, #22]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040e6:	e14b      	b.n	8004380 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040fe:	e13f      	b.n	8004380 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b04      	cmp	r3, #4
 800410a:	d003      	beq.n	8004114 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2205      	movs	r2, #5
 8004110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	887a      	ldrh	r2, [r7, #2]
 800412a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	887a      	ldrh	r2, [r7, #2]
 8004136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800415c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004166:	d908      	bls.n	800417a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	e06f      	b.n	800425a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004188:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004194:	d126      	bne.n	80041e4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041b0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c0:	e010      	b.n	80041e4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	d134      	bne.n	800425a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004206:	b29b      	uxth	r3, r3
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d111      	bne.n	8004234 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004226:	b29b      	uxth	r3, r3
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004232:	e012      	b.n	800425a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004242:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424a:	b29b      	uxth	r3, r3
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	b29b      	uxth	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b04      	cmp	r3, #4
 8004264:	d108      	bne.n	8004278 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	4a4a      	ldr	r2, [pc, #296]	; (8004394 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	4a49      	ldr	r2, [pc, #292]	; (8004398 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c
 8004276:	e007      	b.n	8004288 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a47      	ldr	r2, [pc, #284]	; (800439c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	4a46      	ldr	r2, [pc, #280]	; (80043a0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	4a45      	ldr	r2, [pc, #276]	; (80043a4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800428e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	2200      	movs	r2, #0
 8004296:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	4619      	mov	r1, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	461a      	mov	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f7fd f9b1 	bl	8001618 <HAL_DMA_Start_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	f043 0210 	orr.w	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80042d4:	e054      	b.n	8004380 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	2200      	movs	r2, #0
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2200      	movs	r2, #0
 80042fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	2200      	movs	r2, #0
 8004304:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	4619      	mov	r1, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	f7fd f97b 	bl	8001618 <HAL_DMA_Start_IT>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	f043 0210 	orr.w	r2, r3, #16
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004340:	e01e      	b.n	8004380 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d007      	beq.n	8004360 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0220 	orr.w	r2, r2, #32
 800436e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0202 	orr.w	r2, r2, #2
 800437e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	08004711 	.word	0x08004711
 8004398:	080045f9 	.word	0x080045f9
 800439c:	0800472d 	.word	0x0800472d
 80043a0:	0800467f 	.word	0x0800467f
 80043a4:	08004749 	.word	0x08004749

080043a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	099b      	lsrs	r3, r3, #6
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    return;
 80043ea:	e0d8      	b.n	800459e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_SPI_IRQHandler+0x66>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	09db      	lsrs	r3, r3, #7
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
    return;
 800440c:	e0c7      	b.n	800459e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <HAL_SPI_IRQHandler+0x8c>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_SPI_IRQHandler+0x8c>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80b5 	beq.w	800459e <HAL_SPI_IRQHandler+0x1f6>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80ae 	beq.w	800459e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d023      	beq.n	8004496 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d011      	beq.n	800447e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	e00b      	b.n	8004496 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]
        return;
 8004494:	e083      	b.n	800459e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d014      	beq.n	80044cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	f043 0208 	orr.w	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d050      	beq.n	800459c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004508:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_SPI_IRQHandler+0x17e>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d034      	beq.n	8004590 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0203 	bic.w	r2, r2, #3
 8004534:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	2b00      	cmp	r3, #0
 800453c:	d011      	beq.n	8004562 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_SPI_IRQHandler+0x1fc>)
 8004544:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd f8c4 	bl	80016d8 <HAL_DMA_Abort_IT>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <HAL_SPI_IRQHandler+0x1fc>)
 8004570:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd f8ae 	bl	80016d8 <HAL_DMA_Abort_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800458e:	e003      	b.n	8004598 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f827 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004596:	e000      	b.n	800459a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004598:	bf00      	nop
    return;
 800459a:	bf00      	nop
 800459c:	bf00      	nop
  }
}
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	08004789 	.word	0x08004789

080045a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004606:	f7fc fe19 	bl	800123c <HAL_GetTick>
 800460a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461a:	d02a      	beq.n	8004672 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0220 	bic.w	r2, r2, #32
 800462a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0203 	bic.w	r2, r2, #3
 800463a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	2164      	movs	r1, #100	; 0x64
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f98d 	bl	8004960 <SPI_EndRxTransaction>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff ffba 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004670:	e002      	b.n	8004678 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7fc fa44 	bl	8000b00 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800468c:	f7fc fdd6 	bl	800123c <HAL_GetTick>
 8004690:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d030      	beq.n	8004704 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0220 	bic.w	r2, r2, #32
 80046b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	2164      	movs	r1, #100	; 0x64
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f9aa 	bl	8004a10 <SPI_EndRxTxTransaction>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0203 	bic.w	r2, r2, #3
 80046dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ff71 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004702:	e002      	b.n	800470a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff ff4f 	bl	80045a8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff ff4c 	bl	80045bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff ff48 	bl	80045d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0203 	bic.w	r2, r2, #3
 8004764:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f043 0210 	orr.w	r2, r3, #16
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff ff32 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff ff1d 	bl	80045e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c2:	e04c      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d048      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047cc:	f7fc fd36 	bl	800123c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d902      	bls.n	80047e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d13d      	bne.n	800485e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d111      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d004      	beq.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480e:	d107      	bne.n	8004820 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d10f      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d1a3      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004894:	e057      	b.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800489c:	d106      	bne.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x26>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d048      	beq.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80048b4:	f7fc fcc2 	bl	800123c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <SPI_WaitFifoStateUntilTimeout+0x44>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13d      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d111      	bne.n	8004908 <SPI_WaitFifoStateUntilTimeout+0x82>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ec:	d004      	beq.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d107      	bne.n	8004908 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d10f      	bne.n	8004932 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e008      	b.n	8004958 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d19f      	bne.n	8004896 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004974:	d111      	bne.n	800499a <SPI_EndRxTransaction+0x3a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497e:	d004      	beq.n	800498a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d107      	bne.n	800499a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	; 0x80
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff04 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e023      	b.n	8004a08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c8:	d11d      	bne.n	8004a06 <SPI_EndRxTransaction+0xa6>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d2:	d004      	beq.n	80049de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d113      	bne.n	8004a06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff ff4b 	bl	8004886 <SPI_WaitFifoStateUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e000      	b.n	8004a08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ff2c 	bl	8004886 <SPI_WaitFifoStateUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e027      	b.n	8004a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2180      	movs	r1, #128	; 0x80
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff feaf 	bl	80047b2 <SPI_WaitFlagStateUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e014      	b.n	8004a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff ff05 	bl	8004886 <SPI_WaitFifoStateUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e000      	b.n	8004a94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e01d      	b.n	8004aea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f9e4 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 f97c 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_TIM_Base_Start_IT+0x50>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d00b      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x42>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	00010007 	.word	0x00010007

08004b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0202 	mvn.w	r2, #2
 8004b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f905 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8f7 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f908 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0204 	mvn.w	r2, #4
 8004bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8db 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8cd 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f8de 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0208 	mvn.w	r2, #8
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2204      	movs	r2, #4
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8b1 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8a3 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8b4 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0210 	mvn.w	r2, #16
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2208      	movs	r2, #8
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f887 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f879 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f88a 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0201 	mvn.w	r2, #1
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fb ff62 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b80      	cmp	r3, #128	; 0x80
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f91a 	bl	8004f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d06:	d10e      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f90d 	bl	8004f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f838 	bl	8004dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0220 	mvn.w	r2, #32
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8cd 	bl	8004f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d027      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_Base_SetConfig+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	40001c00 	.word	0x40001c00
 8004f14:	40002000 	.word	0x40002000

08004f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e040      	b.n	8004fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb ffb0 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8be 	bl	8005114 <UART_SetConfig>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e022      	b.n	8004fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fb5c 	bl	8005668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fbe3 	bl	80057ac <UART_CheckIdleState>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	2b20      	cmp	r3, #32
 8005006:	d17f      	bne.n	8005108 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Transmit+0x24>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e078      	b.n	800510a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Transmit+0x36>
 8005022:	2302      	movs	r3, #2
 8005024:	e071      	b.n	800510a <HAL_UART_Transmit+0x11a>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800503a:	f7fc f8ff 	bl	800123c <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x7c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800507c:	e02c      	b.n	80050d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fbd4 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e038      	b.n	800510a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	3302      	adds	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e007      	b.n	80050c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1cc      	bne.n	800507e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fba1 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e005      	b.n	800510a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4bb1      	ldr	r3, [pc, #708]	; (8005408 <UART_SetConfig+0x2f4>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	430b      	orrs	r3, r1
 800514e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a9f      	ldr	r2, [pc, #636]	; (800540c <UART_SetConfig+0x2f8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d121      	bne.n	80051d8 <UART_SetConfig+0xc4>
 8005194:	4b9e      	ldr	r3, [pc, #632]	; (8005410 <UART_SetConfig+0x2fc>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d816      	bhi.n	80051d0 <UART_SetConfig+0xbc>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x94>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051bf 	.word	0x080051bf
 80051b4:	080051cb 	.word	0x080051cb
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e151      	b.n	8005462 <UART_SetConfig+0x34e>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e14e      	b.n	8005462 <UART_SetConfig+0x34e>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e14b      	b.n	8005462 <UART_SetConfig+0x34e>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e148      	b.n	8005462 <UART_SetConfig+0x34e>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	bf00      	nop
 80051d6:	e144      	b.n	8005462 <UART_SetConfig+0x34e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a8d      	ldr	r2, [pc, #564]	; (8005414 <UART_SetConfig+0x300>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d134      	bne.n	800524c <UART_SetConfig+0x138>
 80051e2:	4b8b      	ldr	r3, [pc, #556]	; (8005410 <UART_SetConfig+0x2fc>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d829      	bhi.n	8005244 <UART_SetConfig+0x130>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0xe4>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005245 	.word	0x08005245
 8005204:	08005245 	.word	0x08005245
 8005208:	08005239 	.word	0x08005239
 800520c:	08005245 	.word	0x08005245
 8005210:	08005245 	.word	0x08005245
 8005214:	08005245 	.word	0x08005245
 8005218:	08005233 	.word	0x08005233
 800521c:	08005245 	.word	0x08005245
 8005220:	08005245 	.word	0x08005245
 8005224:	08005245 	.word	0x08005245
 8005228:	0800523f 	.word	0x0800523f
 800522c:	2300      	movs	r3, #0
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e117      	b.n	8005462 <UART_SetConfig+0x34e>
 8005232:	2302      	movs	r3, #2
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	e114      	b.n	8005462 <UART_SetConfig+0x34e>
 8005238:	2304      	movs	r3, #4
 800523a:	77fb      	strb	r3, [r7, #31]
 800523c:	e111      	b.n	8005462 <UART_SetConfig+0x34e>
 800523e:	2308      	movs	r3, #8
 8005240:	77fb      	strb	r3, [r7, #31]
 8005242:	e10e      	b.n	8005462 <UART_SetConfig+0x34e>
 8005244:	2310      	movs	r3, #16
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	bf00      	nop
 800524a:	e10a      	b.n	8005462 <UART_SetConfig+0x34e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a71      	ldr	r2, [pc, #452]	; (8005418 <UART_SetConfig+0x304>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d120      	bne.n	8005298 <UART_SetConfig+0x184>
 8005256:	4b6e      	ldr	r3, [pc, #440]	; (8005410 <UART_SetConfig+0x2fc>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005260:	2b10      	cmp	r3, #16
 8005262:	d00f      	beq.n	8005284 <UART_SetConfig+0x170>
 8005264:	2b10      	cmp	r3, #16
 8005266:	d802      	bhi.n	800526e <UART_SetConfig+0x15a>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <UART_SetConfig+0x164>
 800526c:	e010      	b.n	8005290 <UART_SetConfig+0x17c>
 800526e:	2b20      	cmp	r3, #32
 8005270:	d005      	beq.n	800527e <UART_SetConfig+0x16a>
 8005272:	2b30      	cmp	r3, #48	; 0x30
 8005274:	d009      	beq.n	800528a <UART_SetConfig+0x176>
 8005276:	e00b      	b.n	8005290 <UART_SetConfig+0x17c>
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e0f1      	b.n	8005462 <UART_SetConfig+0x34e>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e0ee      	b.n	8005462 <UART_SetConfig+0x34e>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e0eb      	b.n	8005462 <UART_SetConfig+0x34e>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e0e8      	b.n	8005462 <UART_SetConfig+0x34e>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	bf00      	nop
 8005296:	e0e4      	b.n	8005462 <UART_SetConfig+0x34e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5f      	ldr	r2, [pc, #380]	; (800541c <UART_SetConfig+0x308>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d120      	bne.n	80052e4 <UART_SetConfig+0x1d0>
 80052a2:	4b5b      	ldr	r3, [pc, #364]	; (8005410 <UART_SetConfig+0x2fc>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d00f      	beq.n	80052d0 <UART_SetConfig+0x1bc>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d802      	bhi.n	80052ba <UART_SetConfig+0x1a6>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <UART_SetConfig+0x1b0>
 80052b8:	e010      	b.n	80052dc <UART_SetConfig+0x1c8>
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d005      	beq.n	80052ca <UART_SetConfig+0x1b6>
 80052be:	2bc0      	cmp	r3, #192	; 0xc0
 80052c0:	d009      	beq.n	80052d6 <UART_SetConfig+0x1c2>
 80052c2:	e00b      	b.n	80052dc <UART_SetConfig+0x1c8>
 80052c4:	2300      	movs	r3, #0
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e0cb      	b.n	8005462 <UART_SetConfig+0x34e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e0c8      	b.n	8005462 <UART_SetConfig+0x34e>
 80052d0:	2304      	movs	r3, #4
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e0c5      	b.n	8005462 <UART_SetConfig+0x34e>
 80052d6:	2308      	movs	r3, #8
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e0c2      	b.n	8005462 <UART_SetConfig+0x34e>
 80052dc:	2310      	movs	r3, #16
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	bf00      	nop
 80052e2:	e0be      	b.n	8005462 <UART_SetConfig+0x34e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a4d      	ldr	r2, [pc, #308]	; (8005420 <UART_SetConfig+0x30c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d124      	bne.n	8005338 <UART_SetConfig+0x224>
 80052ee:	4b48      	ldr	r3, [pc, #288]	; (8005410 <UART_SetConfig+0x2fc>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d012      	beq.n	8005324 <UART_SetConfig+0x210>
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d802      	bhi.n	800530a <UART_SetConfig+0x1f6>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <UART_SetConfig+0x204>
 8005308:	e012      	b.n	8005330 <UART_SetConfig+0x21c>
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	d006      	beq.n	800531e <UART_SetConfig+0x20a>
 8005310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005314:	d009      	beq.n	800532a <UART_SetConfig+0x216>
 8005316:	e00b      	b.n	8005330 <UART_SetConfig+0x21c>
 8005318:	2300      	movs	r3, #0
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e0a1      	b.n	8005462 <UART_SetConfig+0x34e>
 800531e:	2302      	movs	r3, #2
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e09e      	b.n	8005462 <UART_SetConfig+0x34e>
 8005324:	2304      	movs	r3, #4
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e09b      	b.n	8005462 <UART_SetConfig+0x34e>
 800532a:	2308      	movs	r3, #8
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e098      	b.n	8005462 <UART_SetConfig+0x34e>
 8005330:	2310      	movs	r3, #16
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	bf00      	nop
 8005336:	e094      	b.n	8005462 <UART_SetConfig+0x34e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a39      	ldr	r2, [pc, #228]	; (8005424 <UART_SetConfig+0x310>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d124      	bne.n	800538c <UART_SetConfig+0x278>
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <UART_SetConfig+0x2fc>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800534c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005350:	d012      	beq.n	8005378 <UART_SetConfig+0x264>
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d802      	bhi.n	800535e <UART_SetConfig+0x24a>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <UART_SetConfig+0x258>
 800535c:	e012      	b.n	8005384 <UART_SetConfig+0x270>
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d006      	beq.n	8005372 <UART_SetConfig+0x25e>
 8005364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005368:	d009      	beq.n	800537e <UART_SetConfig+0x26a>
 800536a:	e00b      	b.n	8005384 <UART_SetConfig+0x270>
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e077      	b.n	8005462 <UART_SetConfig+0x34e>
 8005372:	2302      	movs	r3, #2
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e074      	b.n	8005462 <UART_SetConfig+0x34e>
 8005378:	2304      	movs	r3, #4
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e071      	b.n	8005462 <UART_SetConfig+0x34e>
 800537e:	2308      	movs	r3, #8
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e06e      	b.n	8005462 <UART_SetConfig+0x34e>
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	bf00      	nop
 800538a:	e06a      	b.n	8005462 <UART_SetConfig+0x34e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a25      	ldr	r2, [pc, #148]	; (8005428 <UART_SetConfig+0x314>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d124      	bne.n	80053e0 <UART_SetConfig+0x2cc>
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <UART_SetConfig+0x2fc>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d012      	beq.n	80053cc <UART_SetConfig+0x2b8>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	d802      	bhi.n	80053b2 <UART_SetConfig+0x29e>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <UART_SetConfig+0x2ac>
 80053b0:	e012      	b.n	80053d8 <UART_SetConfig+0x2c4>
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d006      	beq.n	80053c6 <UART_SetConfig+0x2b2>
 80053b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053bc:	d009      	beq.n	80053d2 <UART_SetConfig+0x2be>
 80053be:	e00b      	b.n	80053d8 <UART_SetConfig+0x2c4>
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e04d      	b.n	8005462 <UART_SetConfig+0x34e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e04a      	b.n	8005462 <UART_SetConfig+0x34e>
 80053cc:	2304      	movs	r3, #4
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e047      	b.n	8005462 <UART_SetConfig+0x34e>
 80053d2:	2308      	movs	r3, #8
 80053d4:	77fb      	strb	r3, [r7, #31]
 80053d6:	e044      	b.n	8005462 <UART_SetConfig+0x34e>
 80053d8:	2310      	movs	r3, #16
 80053da:	77fb      	strb	r3, [r7, #31]
 80053dc:	bf00      	nop
 80053de:	e040      	b.n	8005462 <UART_SetConfig+0x34e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <UART_SetConfig+0x318>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d139      	bne.n	800545e <UART_SetConfig+0x34a>
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <UART_SetConfig+0x2fc>)
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80053f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f8:	d027      	beq.n	800544a <UART_SetConfig+0x336>
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fe:	d817      	bhi.n	8005430 <UART_SetConfig+0x31c>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01c      	beq.n	800543e <UART_SetConfig+0x32a>
 8005404:	e027      	b.n	8005456 <UART_SetConfig+0x342>
 8005406:	bf00      	nop
 8005408:	efff69f3 	.word	0xefff69f3
 800540c:	40011000 	.word	0x40011000
 8005410:	40023800 	.word	0x40023800
 8005414:	40004400 	.word	0x40004400
 8005418:	40004800 	.word	0x40004800
 800541c:	40004c00 	.word	0x40004c00
 8005420:	40005000 	.word	0x40005000
 8005424:	40011400 	.word	0x40011400
 8005428:	40007800 	.word	0x40007800
 800542c:	40007c00 	.word	0x40007c00
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005434:	d006      	beq.n	8005444 <UART_SetConfig+0x330>
 8005436:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800543a:	d009      	beq.n	8005450 <UART_SetConfig+0x33c>
 800543c:	e00b      	b.n	8005456 <UART_SetConfig+0x342>
 800543e:	2300      	movs	r3, #0
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e00e      	b.n	8005462 <UART_SetConfig+0x34e>
 8005444:	2302      	movs	r3, #2
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e00b      	b.n	8005462 <UART_SetConfig+0x34e>
 800544a:	2304      	movs	r3, #4
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e008      	b.n	8005462 <UART_SetConfig+0x34e>
 8005450:	2308      	movs	r3, #8
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e005      	b.n	8005462 <UART_SetConfig+0x34e>
 8005456:	2310      	movs	r3, #16
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	bf00      	nop
 800545c:	e001      	b.n	8005462 <UART_SetConfig+0x34e>
 800545e:	2310      	movs	r3, #16
 8005460:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d17f      	bne.n	800556c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	2b08      	cmp	r3, #8
 8005470:	d85c      	bhi.n	800552c <UART_SetConfig+0x418>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x364>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054dd 	.word	0x080054dd
 8005484:	0800552d 	.word	0x0800552d
 8005488:	080054f5 	.word	0x080054f5
 800548c:	0800552d 	.word	0x0800552d
 8005490:	0800552d 	.word	0x0800552d
 8005494:	0800552d 	.word	0x0800552d
 8005498:	08005515 	.word	0x08005515
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fd fffc 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80054a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	005a      	lsls	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	61bb      	str	r3, [r7, #24]
        break;
 80054ba:	e03a      	b.n	8005532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054bc:	f7fe f800 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 80054c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	005a      	lsls	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	61bb      	str	r3, [r7, #24]
        break;
 80054da:	e02a      	b.n	8005532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	085a      	lsrs	r2, r3, #1
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <UART_SetConfig+0x54c>)
 80054e4:	4413      	add	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6852      	ldr	r2, [r2, #4]
 80054ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	61bb      	str	r3, [r7, #24]
        break;
 80054f2:	e01e      	b.n	8005532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f4:	f7fd feec 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80054f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	005a      	lsls	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	61bb      	str	r3, [r7, #24]
        break;
 8005512:	e00e      	b.n	8005532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	61bb      	str	r3, [r7, #24]
        break;
 800552a:	e002      	b.n	8005532 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
        break;
 8005530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d916      	bls.n	8005566 <UART_SetConfig+0x452>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d212      	bcs.n	8005566 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f023 030f 	bic.w	r3, r3, #15
 8005548:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	b29a      	uxth	r2, r3
 8005556:	897b      	ldrh	r3, [r7, #10]
 8005558:	4313      	orrs	r3, r2
 800555a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	897a      	ldrh	r2, [r7, #10]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	e070      	b.n	8005648 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
 800556a:	e06d      	b.n	8005648 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800556c:	7ffb      	ldrb	r3, [r7, #31]
 800556e:	2b08      	cmp	r3, #8
 8005570:	d859      	bhi.n	8005626 <UART_SetConfig+0x512>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x464>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	0800559d 	.word	0x0800559d
 800557c:	080055bb 	.word	0x080055bb
 8005580:	080055d9 	.word	0x080055d9
 8005584:	08005627 	.word	0x08005627
 8005588:	080055f1 	.word	0x080055f1
 800558c:	08005627 	.word	0x08005627
 8005590:	08005627 	.word	0x08005627
 8005594:	08005627 	.word	0x08005627
 8005598:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800559c:	f7fd ff7c 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80055a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	085a      	lsrs	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	61bb      	str	r3, [r7, #24]
        break;
 80055b8:	e038      	b.n	800562c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ba:	f7fd ff81 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 80055be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	085a      	lsrs	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	61bb      	str	r3, [r7, #24]
        break;
 80055d6:	e029      	b.n	800562c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	085a      	lsrs	r2, r3, #1
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <UART_SetConfig+0x550>)
 80055e0:	4413      	add	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6852      	ldr	r2, [r2, #4]
 80055e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	61bb      	str	r3, [r7, #24]
        break;
 80055ee:	e01d      	b.n	800562c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f0:	f7fd fe6e 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80055f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	085a      	lsrs	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	441a      	add	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	b29b      	uxth	r3, r3
 800560a:	61bb      	str	r3, [r7, #24]
        break;
 800560c:	e00e      	b.n	800562c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	b29b      	uxth	r3, r3
 8005622:	61bb      	str	r3, [r7, #24]
        break;
 8005624:	e002      	b.n	800562c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
        break;
 800562a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d908      	bls.n	8005644 <UART_SetConfig+0x530>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d204      	bcs.n	8005644 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	e001      	b.n	8005648 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	01e84800 	.word	0x01e84800
 8005664:	00f42400 	.word	0x00f42400

08005668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01a      	beq.n	800577e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005766:	d10a      	bne.n	800577e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  }
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057ba:	f7fb fd3f 	bl	800123c <HAL_GetTick>
 80057be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d10e      	bne.n	80057ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f82a 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e020      	b.n	800582e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d10e      	bne.n	8005818 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f814 	bl	8005836 <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e00a      	b.n	800582e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005846:	e05d      	b.n	8005904 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d059      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005850:	f7fb fcf4 	bl	800123c <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <UART_WaitOnFlagUntilTimeout+0x30>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11b      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005874:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e042      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d02b      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ba:	d123      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0201 	bic.w	r2, r2, #1
 80058e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e00f      	b.n	8005924 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	429a      	cmp	r2, r3
 8005920:	d092      	beq.n	8005848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800592c:	b084      	sub	sp, #16
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	f107 001c 	add.w	r0, r7, #28
 800593a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b01      	cmp	r3, #1
 8005942:	d120      	bne.n	8005986 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <USB_CoreInit+0xac>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d105      	bne.n	800597a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa52 	bl	8005e24 <USB_CoreReset>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e010      	b.n	80059a8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa46 	bl	8005e24 <USB_CoreReset>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10b      	bne.n	80059c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f043 0206 	orr.w	r2, r3, #6
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d2:	b004      	add	sp, #16
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	ffbdffbf 	.word	0xffbdffbf

080059dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 0201 	bic.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e00b      	b.n	8005a42 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e001      	b.n	8005a42 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e003      	b.n	8005a4a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a42:	2032      	movs	r0, #50	; 0x32
 8005a44:	f7fb fc06 	bl	8001254 <HAL_Delay>

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a54:	b084      	sub	sp, #16
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e009      	b.n	8005a88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3340      	adds	r3, #64	; 0x40
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b0e      	cmp	r3, #14
 8005a8c:	d9f2      	bls.n	8005a74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11c      	bne.n	8005ace <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e005      	b.n	8005ada <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	4619      	mov	r1, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	461a      	mov	r2, r3
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10c      	bne.n	8005b1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b06:	2100      	movs	r1, #0
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f959 	bl	8005dc0 <USB_SetDevSpeed>
 8005b0e:	e018      	b.n	8005b42 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b10:	2101      	movs	r1, #1
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f954 	bl	8005dc0 <USB_SetDevSpeed>
 8005b18:	e013      	b.n	8005b42 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d10c      	bne.n	8005b3a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b26:	2100      	movs	r1, #0
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f949 	bl	8005dc0 <USB_SetDevSpeed>
 8005b2e:	e008      	b.n	8005b42 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b30:	2101      	movs	r1, #1
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f944 	bl	8005dc0 <USB_SetDevSpeed>
 8005b38:	e003      	b.n	8005b42 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b3a:	2103      	movs	r1, #3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f93f 	bl	8005dc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b42:	2110      	movs	r1, #16
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8f3 	bl	8005d30 <USB_FlushTxFifo>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f911 	bl	8005d7c <USB_FlushRxFifo>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e043      	b.n	8005c16 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba4:	d118      	bne.n	8005bd8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e013      	b.n	8005bea <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e008      	b.n	8005bea <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3b7      	bcc.n	8005b8e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	e043      	b.n	8005cac <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3a:	d118      	bne.n	8005c6e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e013      	b.n	8005c80 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e008      	b.n	8005c80 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d3b7      	bcc.n	8005c24 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f043 0210 	orr.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <USB_DevInit+0x2d4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f043 0208 	orr.w	r2, r3, #8
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <USB_DevInit+0x2d8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	803c3800 	.word	0x803c3800
 8005d2c:	40000004 	.word	0x40000004

08005d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	019b      	lsls	r3, r3, #6
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <USB_FlushTxFifo+0x48>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e006      	b.n	8005d6a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d0f0      	beq.n	8005d4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <USB_FlushRxFifo+0x40>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d0f0      	beq.n	8005d8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e0c:	f043 0302 	orr.w	r3, r3, #2
 8005e10:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005e12:	2003      	movs	r0, #3
 8005e14:	f7fb fa1e 	bl	8001254 <HAL_Delay>

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <USB_CoreReset+0x64>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e01b      	b.n	8005e7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	daf2      	bge.n	8005e30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <USB_CoreReset+0x64>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e006      	b.n	8005e7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d0f0      	beq.n	8005e5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	00030d40 	.word	0x00030d40

08005e8c <__errno>:
 8005e8c:	4b01      	ldr	r3, [pc, #4]	; (8005e94 <__errno+0x8>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4e0d      	ldr	r6, [pc, #52]	; (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1ba4      	subs	r4, r4, r6
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2500      	movs	r5, #0
 8005ea4:	42a5      	cmp	r5, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4e0b      	ldr	r6, [pc, #44]	; (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	; (8005edc <__libc_init_array+0x44>)
 8005eac:	f000 fc26 	bl	80066fc <_init>
 8005eb0:	1ba4      	subs	r4, r4, r6
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2500      	movs	r5, #0
 8005eb6:	42a5      	cmp	r5, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ec0:	4798      	blx	r3
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eca:	4798      	blx	r3
 8005ecc:	3501      	adds	r5, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08006778 	.word	0x08006778
 8005ed4:	08006778 	.word	0x08006778
 8005ed8:	08006778 	.word	0x08006778
 8005edc:	0800677c 	.word	0x0800677c

08005ee0 <memset>:
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	f803 1b01 	strb.w	r1, [r3], #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <siprintf>:
 8005ef0:	b40e      	push	{r1, r2, r3}
 8005ef2:	b500      	push	{lr}
 8005ef4:	b09c      	sub	sp, #112	; 0x70
 8005ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ef8:	9002      	str	r0, [sp, #8]
 8005efa:	9006      	str	r0, [sp, #24]
 8005efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f00:	4809      	ldr	r0, [pc, #36]	; (8005f28 <siprintf+0x38>)
 8005f02:	9107      	str	r1, [sp, #28]
 8005f04:	9104      	str	r1, [sp, #16]
 8005f06:	4909      	ldr	r1, [pc, #36]	; (8005f2c <siprintf+0x3c>)
 8005f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0c:	9105      	str	r1, [sp, #20]
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	a902      	add	r1, sp, #8
 8005f14:	f000 f866 	bl	8005fe4 <_svfiprintf_r>
 8005f18:	9b02      	ldr	r3, [sp, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	b01c      	add	sp, #112	; 0x70
 8005f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f24:	b003      	add	sp, #12
 8005f26:	4770      	bx	lr
 8005f28:	2000000c 	.word	0x2000000c
 8005f2c:	ffff0208 	.word	0xffff0208

08005f30 <__ssputs_r>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	688e      	ldr	r6, [r1, #8]
 8005f36:	429e      	cmp	r6, r3
 8005f38:	4682      	mov	sl, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4690      	mov	r8, r2
 8005f3e:	4699      	mov	r9, r3
 8005f40:	d837      	bhi.n	8005fb2 <__ssputs_r+0x82>
 8005f42:	898a      	ldrh	r2, [r1, #12]
 8005f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f48:	d031      	beq.n	8005fae <__ssputs_r+0x7e>
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	6909      	ldr	r1, [r1, #16]
 8005f4e:	1a6f      	subs	r7, r5, r1
 8005f50:	6965      	ldr	r5, [r4, #20]
 8005f52:	2302      	movs	r3, #2
 8005f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f58:	fb95 f5f3 	sdiv	r5, r5, r3
 8005f5c:	f109 0301 	add.w	r3, r9, #1
 8005f60:	443b      	add	r3, r7
 8005f62:	429d      	cmp	r5, r3
 8005f64:	bf38      	it	cc
 8005f66:	461d      	movcc	r5, r3
 8005f68:	0553      	lsls	r3, r2, #21
 8005f6a:	d530      	bpl.n	8005fce <__ssputs_r+0x9e>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f000 fb2b 	bl	80065c8 <_malloc_r>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b950      	cbnz	r0, 8005f8c <__ssputs_r+0x5c>
 8005f76:	230c      	movs	r3, #12
 8005f78:	f8ca 3000 	str.w	r3, [sl]
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	463a      	mov	r2, r7
 8005f8e:	6921      	ldr	r1, [r4, #16]
 8005f90:	f000 faa8 	bl	80064e4 <memcpy>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	6126      	str	r6, [r4, #16]
 8005fa2:	6165      	str	r5, [r4, #20]
 8005fa4:	443e      	add	r6, r7
 8005fa6:	1bed      	subs	r5, r5, r7
 8005fa8:	6026      	str	r6, [r4, #0]
 8005faa:	60a5      	str	r5, [r4, #8]
 8005fac:	464e      	mov	r6, r9
 8005fae:	454e      	cmp	r6, r9
 8005fb0:	d900      	bls.n	8005fb4 <__ssputs_r+0x84>
 8005fb2:	464e      	mov	r6, r9
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4641      	mov	r1, r8
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	f000 fa9e 	bl	80064fa <memmove>
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	1b9b      	subs	r3, r3, r6
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	441e      	add	r6, r3
 8005fc8:	6026      	str	r6, [r4, #0]
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7dc      	b.n	8005f88 <__ssputs_r+0x58>
 8005fce:	462a      	mov	r2, r5
 8005fd0:	f000 fb54 	bl	800667c <_realloc_r>
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d1e2      	bne.n	8005fa0 <__ssputs_r+0x70>
 8005fda:	6921      	ldr	r1, [r4, #16]
 8005fdc:	4650      	mov	r0, sl
 8005fde:	f000 faa5 	bl	800652c <_free_r>
 8005fe2:	e7c8      	b.n	8005f76 <__ssputs_r+0x46>

08005fe4 <_svfiprintf_r>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	461d      	mov	r5, r3
 8005fea:	898b      	ldrh	r3, [r1, #12]
 8005fec:	061f      	lsls	r7, r3, #24
 8005fee:	b09d      	sub	sp, #116	; 0x74
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	d50f      	bpl.n	8006018 <_svfiprintf_r+0x34>
 8005ff8:	690b      	ldr	r3, [r1, #16]
 8005ffa:	b96b      	cbnz	r3, 8006018 <_svfiprintf_r+0x34>
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	f000 fae3 	bl	80065c8 <_malloc_r>
 8006002:	6020      	str	r0, [r4, #0]
 8006004:	6120      	str	r0, [r4, #16]
 8006006:	b928      	cbnz	r0, 8006014 <_svfiprintf_r+0x30>
 8006008:	230c      	movs	r3, #12
 800600a:	f8c8 3000 	str.w	r3, [r8]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	e0c8      	b.n	80061a6 <_svfiprintf_r+0x1c2>
 8006014:	2340      	movs	r3, #64	; 0x40
 8006016:	6163      	str	r3, [r4, #20]
 8006018:	2300      	movs	r3, #0
 800601a:	9309      	str	r3, [sp, #36]	; 0x24
 800601c:	2320      	movs	r3, #32
 800601e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006022:	2330      	movs	r3, #48	; 0x30
 8006024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006028:	9503      	str	r5, [sp, #12]
 800602a:	f04f 0b01 	mov.w	fp, #1
 800602e:	4637      	mov	r7, r6
 8006030:	463d      	mov	r5, r7
 8006032:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006036:	b10b      	cbz	r3, 800603c <_svfiprintf_r+0x58>
 8006038:	2b25      	cmp	r3, #37	; 0x25
 800603a:	d13e      	bne.n	80060ba <_svfiprintf_r+0xd6>
 800603c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006040:	d00b      	beq.n	800605a <_svfiprintf_r+0x76>
 8006042:	4653      	mov	r3, sl
 8006044:	4632      	mov	r2, r6
 8006046:	4621      	mov	r1, r4
 8006048:	4640      	mov	r0, r8
 800604a:	f7ff ff71 	bl	8005f30 <__ssputs_r>
 800604e:	3001      	adds	r0, #1
 8006050:	f000 80a4 	beq.w	800619c <_svfiprintf_r+0x1b8>
 8006054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006056:	4453      	add	r3, sl
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	783b      	ldrb	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 809d 	beq.w	800619c <_svfiprintf_r+0x1b8>
 8006062:	2300      	movs	r3, #0
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	9307      	str	r3, [sp, #28]
 8006070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006074:	931a      	str	r3, [sp, #104]	; 0x68
 8006076:	462f      	mov	r7, r5
 8006078:	2205      	movs	r2, #5
 800607a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800607e:	4850      	ldr	r0, [pc, #320]	; (80061c0 <_svfiprintf_r+0x1dc>)
 8006080:	f7fa f8e6 	bl	8000250 <memchr>
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	b9d0      	cbnz	r0, 80060be <_svfiprintf_r+0xda>
 8006088:	06d9      	lsls	r1, r3, #27
 800608a:	bf44      	itt	mi
 800608c:	2220      	movmi	r2, #32
 800608e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006092:	071a      	lsls	r2, r3, #28
 8006094:	bf44      	itt	mi
 8006096:	222b      	movmi	r2, #43	; 0x2b
 8006098:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800609c:	782a      	ldrb	r2, [r5, #0]
 800609e:	2a2a      	cmp	r2, #42	; 0x2a
 80060a0:	d015      	beq.n	80060ce <_svfiprintf_r+0xea>
 80060a2:	9a07      	ldr	r2, [sp, #28]
 80060a4:	462f      	mov	r7, r5
 80060a6:	2000      	movs	r0, #0
 80060a8:	250a      	movs	r5, #10
 80060aa:	4639      	mov	r1, r7
 80060ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b0:	3b30      	subs	r3, #48	; 0x30
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d94d      	bls.n	8006152 <_svfiprintf_r+0x16e>
 80060b6:	b1b8      	cbz	r0, 80060e8 <_svfiprintf_r+0x104>
 80060b8:	e00f      	b.n	80060da <_svfiprintf_r+0xf6>
 80060ba:	462f      	mov	r7, r5
 80060bc:	e7b8      	b.n	8006030 <_svfiprintf_r+0x4c>
 80060be:	4a40      	ldr	r2, [pc, #256]	; (80061c0 <_svfiprintf_r+0x1dc>)
 80060c0:	1a80      	subs	r0, r0, r2
 80060c2:	fa0b f000 	lsl.w	r0, fp, r0
 80060c6:	4318      	orrs	r0, r3
 80060c8:	9004      	str	r0, [sp, #16]
 80060ca:	463d      	mov	r5, r7
 80060cc:	e7d3      	b.n	8006076 <_svfiprintf_r+0x92>
 80060ce:	9a03      	ldr	r2, [sp, #12]
 80060d0:	1d11      	adds	r1, r2, #4
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	9103      	str	r1, [sp, #12]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	db01      	blt.n	80060de <_svfiprintf_r+0xfa>
 80060da:	9207      	str	r2, [sp, #28]
 80060dc:	e004      	b.n	80060e8 <_svfiprintf_r+0x104>
 80060de:	4252      	negs	r2, r2
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	9207      	str	r2, [sp, #28]
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	783b      	ldrb	r3, [r7, #0]
 80060ea:	2b2e      	cmp	r3, #46	; 0x2e
 80060ec:	d10c      	bne.n	8006108 <_svfiprintf_r+0x124>
 80060ee:	787b      	ldrb	r3, [r7, #1]
 80060f0:	2b2a      	cmp	r3, #42	; 0x2a
 80060f2:	d133      	bne.n	800615c <_svfiprintf_r+0x178>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	9203      	str	r2, [sp, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfb8      	it	lt
 8006100:	f04f 33ff 	movlt.w	r3, #4294967295
 8006104:	3702      	adds	r7, #2
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	4d2e      	ldr	r5, [pc, #184]	; (80061c4 <_svfiprintf_r+0x1e0>)
 800610a:	7839      	ldrb	r1, [r7, #0]
 800610c:	2203      	movs	r2, #3
 800610e:	4628      	mov	r0, r5
 8006110:	f7fa f89e 	bl	8000250 <memchr>
 8006114:	b138      	cbz	r0, 8006126 <_svfiprintf_r+0x142>
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	1b40      	subs	r0, r0, r5
 800611a:	fa03 f000 	lsl.w	r0, r3, r0
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	4303      	orrs	r3, r0
 8006122:	3701      	adds	r7, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	7839      	ldrb	r1, [r7, #0]
 8006128:	4827      	ldr	r0, [pc, #156]	; (80061c8 <_svfiprintf_r+0x1e4>)
 800612a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800612e:	2206      	movs	r2, #6
 8006130:	1c7e      	adds	r6, r7, #1
 8006132:	f7fa f88d 	bl	8000250 <memchr>
 8006136:	2800      	cmp	r0, #0
 8006138:	d038      	beq.n	80061ac <_svfiprintf_r+0x1c8>
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <_svfiprintf_r+0x1e8>)
 800613c:	bb13      	cbnz	r3, 8006184 <_svfiprintf_r+0x1a0>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	3307      	adds	r3, #7
 8006142:	f023 0307 	bic.w	r3, r3, #7
 8006146:	3308      	adds	r3, #8
 8006148:	9303      	str	r3, [sp, #12]
 800614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614c:	444b      	add	r3, r9
 800614e:	9309      	str	r3, [sp, #36]	; 0x24
 8006150:	e76d      	b.n	800602e <_svfiprintf_r+0x4a>
 8006152:	fb05 3202 	mla	r2, r5, r2, r3
 8006156:	2001      	movs	r0, #1
 8006158:	460f      	mov	r7, r1
 800615a:	e7a6      	b.n	80060aa <_svfiprintf_r+0xc6>
 800615c:	2300      	movs	r3, #0
 800615e:	3701      	adds	r7, #1
 8006160:	9305      	str	r3, [sp, #20]
 8006162:	4619      	mov	r1, r3
 8006164:	250a      	movs	r5, #10
 8006166:	4638      	mov	r0, r7
 8006168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800616c:	3a30      	subs	r2, #48	; 0x30
 800616e:	2a09      	cmp	r2, #9
 8006170:	d903      	bls.n	800617a <_svfiprintf_r+0x196>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0c8      	beq.n	8006108 <_svfiprintf_r+0x124>
 8006176:	9105      	str	r1, [sp, #20]
 8006178:	e7c6      	b.n	8006108 <_svfiprintf_r+0x124>
 800617a:	fb05 2101 	mla	r1, r5, r1, r2
 800617e:	2301      	movs	r3, #1
 8006180:	4607      	mov	r7, r0
 8006182:	e7f0      	b.n	8006166 <_svfiprintf_r+0x182>
 8006184:	ab03      	add	r3, sp, #12
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4622      	mov	r2, r4
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <_svfiprintf_r+0x1ec>)
 800618c:	a904      	add	r1, sp, #16
 800618e:	4640      	mov	r0, r8
 8006190:	f3af 8000 	nop.w
 8006194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006198:	4681      	mov	r9, r0
 800619a:	d1d6      	bne.n	800614a <_svfiprintf_r+0x166>
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	065b      	lsls	r3, r3, #25
 80061a0:	f53f af35 	bmi.w	800600e <_svfiprintf_r+0x2a>
 80061a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061a6:	b01d      	add	sp, #116	; 0x74
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	ab03      	add	r3, sp, #12
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4622      	mov	r2, r4
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <_svfiprintf_r+0x1ec>)
 80061b4:	a904      	add	r1, sp, #16
 80061b6:	4640      	mov	r0, r8
 80061b8:	f000 f882 	bl	80062c0 <_printf_i>
 80061bc:	e7ea      	b.n	8006194 <_svfiprintf_r+0x1b0>
 80061be:	bf00      	nop
 80061c0:	0800673c 	.word	0x0800673c
 80061c4:	08006742 	.word	0x08006742
 80061c8:	08006746 	.word	0x08006746
 80061cc:	00000000 	.word	0x00000000
 80061d0:	08005f31 	.word	0x08005f31

080061d4 <_printf_common>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	4691      	mov	r9, r2
 80061da:	461f      	mov	r7, r3
 80061dc:	688a      	ldr	r2, [r1, #8]
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bfb8      	it	lt
 80061e8:	4613      	movlt	r3, r2
 80061ea:	f8c9 3000 	str.w	r3, [r9]
 80061ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f2:	4606      	mov	r6, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	b112      	cbz	r2, 80061fe <_printf_common+0x2a>
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c9 3000 	str.w	r3, [r9]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	0699      	lsls	r1, r3, #26
 8006202:	bf42      	ittt	mi
 8006204:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006208:	3302      	addmi	r3, #2
 800620a:	f8c9 3000 	strmi.w	r3, [r9]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	f015 0506 	ands.w	r5, r5, #6
 8006214:	d107      	bne.n	8006226 <_printf_common+0x52>
 8006216:	f104 0a19 	add.w	sl, r4, #25
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	f8d9 2000 	ldr.w	r2, [r9]
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	42ab      	cmp	r3, r5
 8006224:	dc28      	bgt.n	8006278 <_printf_common+0xa4>
 8006226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	3300      	adds	r3, #0
 800622e:	bf18      	it	ne
 8006230:	2301      	movne	r3, #1
 8006232:	0692      	lsls	r2, r2, #26
 8006234:	d42d      	bmi.n	8006292 <_printf_common+0xbe>
 8006236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800623a:	4639      	mov	r1, r7
 800623c:	4630      	mov	r0, r6
 800623e:	47c0      	blx	r8
 8006240:	3001      	adds	r0, #1
 8006242:	d020      	beq.n	8006286 <_printf_common+0xb2>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	68e5      	ldr	r5, [r4, #12]
 8006248:	f8d9 2000 	ldr.w	r2, [r9]
 800624c:	f003 0306 	and.w	r3, r3, #6
 8006250:	2b04      	cmp	r3, #4
 8006252:	bf08      	it	eq
 8006254:	1aad      	subeq	r5, r5, r2
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	6922      	ldr	r2, [r4, #16]
 800625a:	bf0c      	ite	eq
 800625c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006260:	2500      	movne	r5, #0
 8006262:	4293      	cmp	r3, r2
 8006264:	bfc4      	itt	gt
 8006266:	1a9b      	subgt	r3, r3, r2
 8006268:	18ed      	addgt	r5, r5, r3
 800626a:	f04f 0900 	mov.w	r9, #0
 800626e:	341a      	adds	r4, #26
 8006270:	454d      	cmp	r5, r9
 8006272:	d11a      	bne.n	80062aa <_printf_common+0xd6>
 8006274:	2000      	movs	r0, #0
 8006276:	e008      	b.n	800628a <_printf_common+0xb6>
 8006278:	2301      	movs	r3, #1
 800627a:	4652      	mov	r2, sl
 800627c:	4639      	mov	r1, r7
 800627e:	4630      	mov	r0, r6
 8006280:	47c0      	blx	r8
 8006282:	3001      	adds	r0, #1
 8006284:	d103      	bne.n	800628e <_printf_common+0xba>
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	3501      	adds	r5, #1
 8006290:	e7c3      	b.n	800621a <_printf_common+0x46>
 8006292:	18e1      	adds	r1, r4, r3
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	2030      	movs	r0, #48	; 0x30
 8006298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800629c:	4422      	add	r2, r4
 800629e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a6:	3302      	adds	r3, #2
 80062a8:	e7c5      	b.n	8006236 <_printf_common+0x62>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4622      	mov	r2, r4
 80062ae:	4639      	mov	r1, r7
 80062b0:	4630      	mov	r0, r6
 80062b2:	47c0      	blx	r8
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0e6      	beq.n	8006286 <_printf_common+0xb2>
 80062b8:	f109 0901 	add.w	r9, r9, #1
 80062bc:	e7d8      	b.n	8006270 <_printf_common+0x9c>
	...

080062c0 <_printf_i>:
 80062c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062c8:	460c      	mov	r4, r1
 80062ca:	7e09      	ldrb	r1, [r1, #24]
 80062cc:	b085      	sub	sp, #20
 80062ce:	296e      	cmp	r1, #110	; 0x6e
 80062d0:	4617      	mov	r7, r2
 80062d2:	4606      	mov	r6, r0
 80062d4:	4698      	mov	r8, r3
 80062d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062d8:	f000 80b3 	beq.w	8006442 <_printf_i+0x182>
 80062dc:	d822      	bhi.n	8006324 <_printf_i+0x64>
 80062de:	2963      	cmp	r1, #99	; 0x63
 80062e0:	d036      	beq.n	8006350 <_printf_i+0x90>
 80062e2:	d80a      	bhi.n	80062fa <_printf_i+0x3a>
 80062e4:	2900      	cmp	r1, #0
 80062e6:	f000 80b9 	beq.w	800645c <_printf_i+0x19c>
 80062ea:	2958      	cmp	r1, #88	; 0x58
 80062ec:	f000 8083 	beq.w	80063f6 <_printf_i+0x136>
 80062f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062f8:	e032      	b.n	8006360 <_printf_i+0xa0>
 80062fa:	2964      	cmp	r1, #100	; 0x64
 80062fc:	d001      	beq.n	8006302 <_printf_i+0x42>
 80062fe:	2969      	cmp	r1, #105	; 0x69
 8006300:	d1f6      	bne.n	80062f0 <_printf_i+0x30>
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	0605      	lsls	r5, r0, #24
 8006308:	f103 0104 	add.w	r1, r3, #4
 800630c:	d52a      	bpl.n	8006364 <_printf_i+0xa4>
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	da03      	bge.n	800631e <_printf_i+0x5e>
 8006316:	222d      	movs	r2, #45	; 0x2d
 8006318:	425b      	negs	r3, r3
 800631a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800631e:	486f      	ldr	r0, [pc, #444]	; (80064dc <_printf_i+0x21c>)
 8006320:	220a      	movs	r2, #10
 8006322:	e039      	b.n	8006398 <_printf_i+0xd8>
 8006324:	2973      	cmp	r1, #115	; 0x73
 8006326:	f000 809d 	beq.w	8006464 <_printf_i+0x1a4>
 800632a:	d808      	bhi.n	800633e <_printf_i+0x7e>
 800632c:	296f      	cmp	r1, #111	; 0x6f
 800632e:	d020      	beq.n	8006372 <_printf_i+0xb2>
 8006330:	2970      	cmp	r1, #112	; 0x70
 8006332:	d1dd      	bne.n	80062f0 <_printf_i+0x30>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	f043 0320 	orr.w	r3, r3, #32
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	e003      	b.n	8006346 <_printf_i+0x86>
 800633e:	2975      	cmp	r1, #117	; 0x75
 8006340:	d017      	beq.n	8006372 <_printf_i+0xb2>
 8006342:	2978      	cmp	r1, #120	; 0x78
 8006344:	d1d4      	bne.n	80062f0 <_printf_i+0x30>
 8006346:	2378      	movs	r3, #120	; 0x78
 8006348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800634c:	4864      	ldr	r0, [pc, #400]	; (80064e0 <_printf_i+0x220>)
 800634e:	e055      	b.n	80063fc <_printf_i+0x13c>
 8006350:	6813      	ldr	r3, [r2, #0]
 8006352:	1d19      	adds	r1, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6011      	str	r1, [r2, #0]
 8006358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800635c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006360:	2301      	movs	r3, #1
 8006362:	e08c      	b.n	800647e <_printf_i+0x1be>
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6011      	str	r1, [r2, #0]
 8006368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800636c:	bf18      	it	ne
 800636e:	b21b      	sxthne	r3, r3
 8006370:	e7cf      	b.n	8006312 <_printf_i+0x52>
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	6825      	ldr	r5, [r4, #0]
 8006376:	1d18      	adds	r0, r3, #4
 8006378:	6010      	str	r0, [r2, #0]
 800637a:	0628      	lsls	r0, r5, #24
 800637c:	d501      	bpl.n	8006382 <_printf_i+0xc2>
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	e002      	b.n	8006388 <_printf_i+0xc8>
 8006382:	0668      	lsls	r0, r5, #25
 8006384:	d5fb      	bpl.n	800637e <_printf_i+0xbe>
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	4854      	ldr	r0, [pc, #336]	; (80064dc <_printf_i+0x21c>)
 800638a:	296f      	cmp	r1, #111	; 0x6f
 800638c:	bf14      	ite	ne
 800638e:	220a      	movne	r2, #10
 8006390:	2208      	moveq	r2, #8
 8006392:	2100      	movs	r1, #0
 8006394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006398:	6865      	ldr	r5, [r4, #4]
 800639a:	60a5      	str	r5, [r4, #8]
 800639c:	2d00      	cmp	r5, #0
 800639e:	f2c0 8095 	blt.w	80064cc <_printf_i+0x20c>
 80063a2:	6821      	ldr	r1, [r4, #0]
 80063a4:	f021 0104 	bic.w	r1, r1, #4
 80063a8:	6021      	str	r1, [r4, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d13d      	bne.n	800642a <_printf_i+0x16a>
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	f040 808e 	bne.w	80064d0 <_printf_i+0x210>
 80063b4:	4665      	mov	r5, ip
 80063b6:	2a08      	cmp	r2, #8
 80063b8:	d10b      	bne.n	80063d2 <_printf_i+0x112>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	07db      	lsls	r3, r3, #31
 80063be:	d508      	bpl.n	80063d2 <_printf_i+0x112>
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bfde      	ittt	le
 80063c8:	2330      	movle	r3, #48	; 0x30
 80063ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063d2:	ebac 0305 	sub.w	r3, ip, r5
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	f8cd 8000 	str.w	r8, [sp]
 80063dc:	463b      	mov	r3, r7
 80063de:	aa03      	add	r2, sp, #12
 80063e0:	4621      	mov	r1, r4
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff fef6 	bl	80061d4 <_printf_common>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d14d      	bne.n	8006488 <_printf_i+0x1c8>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	b005      	add	sp, #20
 80063f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063f6:	4839      	ldr	r0, [pc, #228]	; (80064dc <_printf_i+0x21c>)
 80063f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063fc:	6813      	ldr	r3, [r2, #0]
 80063fe:	6821      	ldr	r1, [r4, #0]
 8006400:	1d1d      	adds	r5, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6015      	str	r5, [r2, #0]
 8006406:	060a      	lsls	r2, r1, #24
 8006408:	d50b      	bpl.n	8006422 <_printf_i+0x162>
 800640a:	07ca      	lsls	r2, r1, #31
 800640c:	bf44      	itt	mi
 800640e:	f041 0120 	orrmi.w	r1, r1, #32
 8006412:	6021      	strmi	r1, [r4, #0]
 8006414:	b91b      	cbnz	r3, 800641e <_printf_i+0x15e>
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	f022 0220 	bic.w	r2, r2, #32
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	2210      	movs	r2, #16
 8006420:	e7b7      	b.n	8006392 <_printf_i+0xd2>
 8006422:	064d      	lsls	r5, r1, #25
 8006424:	bf48      	it	mi
 8006426:	b29b      	uxthmi	r3, r3
 8006428:	e7ef      	b.n	800640a <_printf_i+0x14a>
 800642a:	4665      	mov	r5, ip
 800642c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006430:	fb02 3311 	mls	r3, r2, r1, r3
 8006434:	5cc3      	ldrb	r3, [r0, r3]
 8006436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800643a:	460b      	mov	r3, r1
 800643c:	2900      	cmp	r1, #0
 800643e:	d1f5      	bne.n	800642c <_printf_i+0x16c>
 8006440:	e7b9      	b.n	80063b6 <_printf_i+0xf6>
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	6825      	ldr	r5, [r4, #0]
 8006446:	6961      	ldr	r1, [r4, #20]
 8006448:	1d18      	adds	r0, r3, #4
 800644a:	6010      	str	r0, [r2, #0]
 800644c:	0628      	lsls	r0, r5, #24
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	d501      	bpl.n	8006456 <_printf_i+0x196>
 8006452:	6019      	str	r1, [r3, #0]
 8006454:	e002      	b.n	800645c <_printf_i+0x19c>
 8006456:	066a      	lsls	r2, r5, #25
 8006458:	d5fb      	bpl.n	8006452 <_printf_i+0x192>
 800645a:	8019      	strh	r1, [r3, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	4665      	mov	r5, ip
 8006462:	e7b9      	b.n	80063d8 <_printf_i+0x118>
 8006464:	6813      	ldr	r3, [r2, #0]
 8006466:	1d19      	adds	r1, r3, #4
 8006468:	6011      	str	r1, [r2, #0]
 800646a:	681d      	ldr	r5, [r3, #0]
 800646c:	6862      	ldr	r2, [r4, #4]
 800646e:	2100      	movs	r1, #0
 8006470:	4628      	mov	r0, r5
 8006472:	f7f9 feed 	bl	8000250 <memchr>
 8006476:	b108      	cbz	r0, 800647c <_printf_i+0x1bc>
 8006478:	1b40      	subs	r0, r0, r5
 800647a:	6060      	str	r0, [r4, #4]
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006486:	e7a7      	b.n	80063d8 <_printf_i+0x118>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	462a      	mov	r2, r5
 800648c:	4639      	mov	r1, r7
 800648e:	4630      	mov	r0, r6
 8006490:	47c0      	blx	r8
 8006492:	3001      	adds	r0, #1
 8006494:	d0aa      	beq.n	80063ec <_printf_i+0x12c>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	079b      	lsls	r3, r3, #30
 800649a:	d413      	bmi.n	80064c4 <_printf_i+0x204>
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	4298      	cmp	r0, r3
 80064a2:	bfb8      	it	lt
 80064a4:	4618      	movlt	r0, r3
 80064a6:	e7a3      	b.n	80063f0 <_printf_i+0x130>
 80064a8:	2301      	movs	r3, #1
 80064aa:	464a      	mov	r2, r9
 80064ac:	4639      	mov	r1, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	47c0      	blx	r8
 80064b2:	3001      	adds	r0, #1
 80064b4:	d09a      	beq.n	80063ec <_printf_i+0x12c>
 80064b6:	3501      	adds	r5, #1
 80064b8:	68e3      	ldr	r3, [r4, #12]
 80064ba:	9a03      	ldr	r2, [sp, #12]
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	42ab      	cmp	r3, r5
 80064c0:	dcf2      	bgt.n	80064a8 <_printf_i+0x1e8>
 80064c2:	e7eb      	b.n	800649c <_printf_i+0x1dc>
 80064c4:	2500      	movs	r5, #0
 80064c6:	f104 0919 	add.w	r9, r4, #25
 80064ca:	e7f5      	b.n	80064b8 <_printf_i+0x1f8>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ac      	bne.n	800642a <_printf_i+0x16a>
 80064d0:	7803      	ldrb	r3, [r0, #0]
 80064d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064da:	e76c      	b.n	80063b6 <_printf_i+0xf6>
 80064dc:	0800674d 	.word	0x0800674d
 80064e0:	0800675e 	.word	0x0800675e

080064e4 <memcpy>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	1e43      	subs	r3, r0, #1
 80064e8:	440a      	add	r2, r1
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d100      	bne.n	80064f0 <memcpy+0xc>
 80064ee:	bd10      	pop	{r4, pc}
 80064f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064f8:	e7f7      	b.n	80064ea <memcpy+0x6>

080064fa <memmove>:
 80064fa:	4288      	cmp	r0, r1
 80064fc:	b510      	push	{r4, lr}
 80064fe:	eb01 0302 	add.w	r3, r1, r2
 8006502:	d807      	bhi.n	8006514 <memmove+0x1a>
 8006504:	1e42      	subs	r2, r0, #1
 8006506:	4299      	cmp	r1, r3
 8006508:	d00a      	beq.n	8006520 <memmove+0x26>
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006512:	e7f8      	b.n	8006506 <memmove+0xc>
 8006514:	4283      	cmp	r3, r0
 8006516:	d9f5      	bls.n	8006504 <memmove+0xa>
 8006518:	1881      	adds	r1, r0, r2
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	42d3      	cmn	r3, r2
 800651e:	d100      	bne.n	8006522 <memmove+0x28>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006526:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800652a:	e7f7      	b.n	800651c <memmove+0x22>

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d045      	beq.n	80065c0 <_free_r+0x94>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f000 f8d2 	bl	80066e8 <__malloc_lock>
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <_free_r+0x98>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	4610      	mov	r0, r2
 800654a:	b933      	cbnz	r3, 800655a <_free_r+0x2e>
 800654c:	6063      	str	r3, [r4, #4]
 800654e:	6014      	str	r4, [r2, #0]
 8006550:	4628      	mov	r0, r5
 8006552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006556:	f000 b8c8 	b.w	80066ea <__malloc_unlock>
 800655a:	42a3      	cmp	r3, r4
 800655c:	d90c      	bls.n	8006578 <_free_r+0x4c>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	1862      	adds	r2, r4, r1
 8006562:	4293      	cmp	r3, r2
 8006564:	bf04      	itt	eq
 8006566:	681a      	ldreq	r2, [r3, #0]
 8006568:	685b      	ldreq	r3, [r3, #4]
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	bf04      	itt	eq
 800656e:	1852      	addeq	r2, r2, r1
 8006570:	6022      	streq	r2, [r4, #0]
 8006572:	6004      	str	r4, [r0, #0]
 8006574:	e7ec      	b.n	8006550 <_free_r+0x24>
 8006576:	4613      	mov	r3, r2
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	b10a      	cbz	r2, 8006580 <_free_r+0x54>
 800657c:	42a2      	cmp	r2, r4
 800657e:	d9fa      	bls.n	8006576 <_free_r+0x4a>
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	1858      	adds	r0, r3, r1
 8006584:	42a0      	cmp	r0, r4
 8006586:	d10b      	bne.n	80065a0 <_free_r+0x74>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	4401      	add	r1, r0
 800658c:	1858      	adds	r0, r3, r1
 800658e:	4282      	cmp	r2, r0
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	d1dd      	bne.n	8006550 <_free_r+0x24>
 8006594:	6810      	ldr	r0, [r2, #0]
 8006596:	6852      	ldr	r2, [r2, #4]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	4401      	add	r1, r0
 800659c:	6019      	str	r1, [r3, #0]
 800659e:	e7d7      	b.n	8006550 <_free_r+0x24>
 80065a0:	d902      	bls.n	80065a8 <_free_r+0x7c>
 80065a2:	230c      	movs	r3, #12
 80065a4:	602b      	str	r3, [r5, #0]
 80065a6:	e7d3      	b.n	8006550 <_free_r+0x24>
 80065a8:	6820      	ldr	r0, [r4, #0]
 80065aa:	1821      	adds	r1, r4, r0
 80065ac:	428a      	cmp	r2, r1
 80065ae:	bf04      	itt	eq
 80065b0:	6811      	ldreq	r1, [r2, #0]
 80065b2:	6852      	ldreq	r2, [r2, #4]
 80065b4:	6062      	str	r2, [r4, #4]
 80065b6:	bf04      	itt	eq
 80065b8:	1809      	addeq	r1, r1, r0
 80065ba:	6021      	streq	r1, [r4, #0]
 80065bc:	605c      	str	r4, [r3, #4]
 80065be:	e7c7      	b.n	8006550 <_free_r+0x24>
 80065c0:	bd38      	pop	{r3, r4, r5, pc}
 80065c2:	bf00      	nop
 80065c4:	20000094 	.word	0x20000094

080065c8 <_malloc_r>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	1ccd      	adds	r5, r1, #3
 80065cc:	f025 0503 	bic.w	r5, r5, #3
 80065d0:	3508      	adds	r5, #8
 80065d2:	2d0c      	cmp	r5, #12
 80065d4:	bf38      	it	cc
 80065d6:	250c      	movcc	r5, #12
 80065d8:	2d00      	cmp	r5, #0
 80065da:	4606      	mov	r6, r0
 80065dc:	db01      	blt.n	80065e2 <_malloc_r+0x1a>
 80065de:	42a9      	cmp	r1, r5
 80065e0:	d903      	bls.n	80065ea <_malloc_r+0x22>
 80065e2:	230c      	movs	r3, #12
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	2000      	movs	r0, #0
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	f000 f87d 	bl	80066e8 <__malloc_lock>
 80065ee:	4a21      	ldr	r2, [pc, #132]	; (8006674 <_malloc_r+0xac>)
 80065f0:	6814      	ldr	r4, [r2, #0]
 80065f2:	4621      	mov	r1, r4
 80065f4:	b991      	cbnz	r1, 800661c <_malloc_r+0x54>
 80065f6:	4c20      	ldr	r4, [pc, #128]	; (8006678 <_malloc_r+0xb0>)
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	b91b      	cbnz	r3, 8006604 <_malloc_r+0x3c>
 80065fc:	4630      	mov	r0, r6
 80065fe:	f000 f863 	bl	80066c8 <_sbrk_r>
 8006602:	6020      	str	r0, [r4, #0]
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f85e 	bl	80066c8 <_sbrk_r>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d124      	bne.n	800665a <_malloc_r+0x92>
 8006610:	230c      	movs	r3, #12
 8006612:	6033      	str	r3, [r6, #0]
 8006614:	4630      	mov	r0, r6
 8006616:	f000 f868 	bl	80066ea <__malloc_unlock>
 800661a:	e7e4      	b.n	80065e6 <_malloc_r+0x1e>
 800661c:	680b      	ldr	r3, [r1, #0]
 800661e:	1b5b      	subs	r3, r3, r5
 8006620:	d418      	bmi.n	8006654 <_malloc_r+0x8c>
 8006622:	2b0b      	cmp	r3, #11
 8006624:	d90f      	bls.n	8006646 <_malloc_r+0x7e>
 8006626:	600b      	str	r3, [r1, #0]
 8006628:	50cd      	str	r5, [r1, r3]
 800662a:	18cc      	adds	r4, r1, r3
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f85c 	bl	80066ea <__malloc_unlock>
 8006632:	f104 000b 	add.w	r0, r4, #11
 8006636:	1d23      	adds	r3, r4, #4
 8006638:	f020 0007 	bic.w	r0, r0, #7
 800663c:	1ac3      	subs	r3, r0, r3
 800663e:	d0d3      	beq.n	80065e8 <_malloc_r+0x20>
 8006640:	425a      	negs	r2, r3
 8006642:	50e2      	str	r2, [r4, r3]
 8006644:	e7d0      	b.n	80065e8 <_malloc_r+0x20>
 8006646:	428c      	cmp	r4, r1
 8006648:	684b      	ldr	r3, [r1, #4]
 800664a:	bf16      	itet	ne
 800664c:	6063      	strne	r3, [r4, #4]
 800664e:	6013      	streq	r3, [r2, #0]
 8006650:	460c      	movne	r4, r1
 8006652:	e7eb      	b.n	800662c <_malloc_r+0x64>
 8006654:	460c      	mov	r4, r1
 8006656:	6849      	ldr	r1, [r1, #4]
 8006658:	e7cc      	b.n	80065f4 <_malloc_r+0x2c>
 800665a:	1cc4      	adds	r4, r0, #3
 800665c:	f024 0403 	bic.w	r4, r4, #3
 8006660:	42a0      	cmp	r0, r4
 8006662:	d005      	beq.n	8006670 <_malloc_r+0xa8>
 8006664:	1a21      	subs	r1, r4, r0
 8006666:	4630      	mov	r0, r6
 8006668:	f000 f82e 	bl	80066c8 <_sbrk_r>
 800666c:	3001      	adds	r0, #1
 800666e:	d0cf      	beq.n	8006610 <_malloc_r+0x48>
 8006670:	6025      	str	r5, [r4, #0]
 8006672:	e7db      	b.n	800662c <_malloc_r+0x64>
 8006674:	20000094 	.word	0x20000094
 8006678:	20000098 	.word	0x20000098

0800667c <_realloc_r>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	4607      	mov	r7, r0
 8006680:	4614      	mov	r4, r2
 8006682:	460e      	mov	r6, r1
 8006684:	b921      	cbnz	r1, 8006690 <_realloc_r+0x14>
 8006686:	4611      	mov	r1, r2
 8006688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800668c:	f7ff bf9c 	b.w	80065c8 <_malloc_r>
 8006690:	b922      	cbnz	r2, 800669c <_realloc_r+0x20>
 8006692:	f7ff ff4b 	bl	800652c <_free_r>
 8006696:	4625      	mov	r5, r4
 8006698:	4628      	mov	r0, r5
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	f000 f826 	bl	80066ec <_malloc_usable_size_r>
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d20f      	bcs.n	80066c4 <_realloc_r+0x48>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4638      	mov	r0, r7
 80066a8:	f7ff ff8e 	bl	80065c8 <_malloc_r>
 80066ac:	4605      	mov	r5, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d0f2      	beq.n	8006698 <_realloc_r+0x1c>
 80066b2:	4631      	mov	r1, r6
 80066b4:	4622      	mov	r2, r4
 80066b6:	f7ff ff15 	bl	80064e4 <memcpy>
 80066ba:	4631      	mov	r1, r6
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff ff35 	bl	800652c <_free_r>
 80066c2:	e7e9      	b.n	8006698 <_realloc_r+0x1c>
 80066c4:	4635      	mov	r5, r6
 80066c6:	e7e7      	b.n	8006698 <_realloc_r+0x1c>

080066c8 <_sbrk_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4c06      	ldr	r4, [pc, #24]	; (80066e4 <_sbrk_r+0x1c>)
 80066cc:	2300      	movs	r3, #0
 80066ce:	4605      	mov	r5, r0
 80066d0:	4608      	mov	r0, r1
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	f7fa fcf6 	bl	80010c4 <_sbrk>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_sbrk_r+0x1a>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_sbrk_r+0x1a>
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000678 	.word	0x20000678

080066e8 <__malloc_lock>:
 80066e8:	4770      	bx	lr

080066ea <__malloc_unlock>:
 80066ea:	4770      	bx	lr

080066ec <_malloc_usable_size_r>:
 80066ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f0:	1f18      	subs	r0, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfbc      	itt	lt
 80066f6:	580b      	ldrlt	r3, [r1, r0]
 80066f8:	18c0      	addlt	r0, r0, r3
 80066fa:	4770      	bx	lr

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
